// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Proyecto1-Compi/src/V2024/basicLexerCupVerano2024.jflex

/* JFlex example: partial Java language lexer specification */
package ParserLexer;

import java_cup.runtime.*;

/**
 * This class is a simple example lexer.
 *
 * Lexer base tomado de la p√°gina de Cup que requiere sym para utilizarse como Lexer.
 * Este lexer es utilizado por por el parser generado por BasicLexerCup (parser.java que se genera).
 */

@SuppressWarnings("fallthrough")
public class BasicLexerCupV implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\0\1\5\1\6\11\0\1\7\1\0\1\10\1\11"+
    "\11\12\7\0\32\13\1\0\1\14\2\0\1\15\1\0"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\13\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\u0185\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\1\22\6\1\10\1\11\1\1\1\0\1\12\2\0"+
    "\41\6\1\13\1\14\1\15\1\16\1\17\1\0\1\20"+
    "\1\0\45\6\1\21\1\0\11\6\1\22\10\6\1\23"+
    "\3\6\1\24\17\6\1\0\10\6\1\25\3\6\1\26"+
    "\10\6\1\27\2\6\1\30\3\6\1\31\1\32\1\6"+
    "\1\33\5\6\1\0\7\6\1\34\1\35\1\36\5\6"+
    "\1\37\1\40\12\6\1\41\1\6\1\42\1\0\11\6"+
    "\1\43\1\6\1\44\4\6\1\45\1\46\1\47\2\6"+
    "\1\50\1\6\1\51\1\52\1\53\3\6\1\54\1\55"+
    "\4\6\1\56\2\6\1\57\2\6\1\60\1\61\3\6"+
    "\1\62\3\6\1\63\1\64\2\6\1\65\1\6\1\66"+
    "\4\6\1\67\1\70\3\6\1\71\1\72\1\6\1\73"+
    "\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\114\0\162\0\114\0\230\0\114"+
    "\0\276\0\344\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8"+
    "\0\u01ee\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8"+
    "\0\u031e\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\114"+
    "\0\u0428\0\u044e\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532"+
    "\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662"+
    "\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792"+
    "\0\u07b8\0\u07de\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2"+
    "\0\u08e8\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6\0\114\0\114"+
    "\0\114\0\114\0\114\0\u09cc\0\114\0\u09f2\0\u0a18\0\u0a3e"+
    "\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e"+
    "\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e"+
    "\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8\0\u0dce"+
    "\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8\0\u0efe"+
    "\0\u0f24\0\u0f4a\0\u0f70\0\114\0\u0f96\0\u0fbc\0\u0fe2\0\u1008"+
    "\0\u102e\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\276\0\u1112"+
    "\0\u1138\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\276"+
    "\0\u1242\0\u1268\0\u128e\0\276\0\u12b4\0\u12da\0\u1300\0\u1326"+
    "\0\u134c\0\u1372\0\u1398\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456"+
    "\0\u147c\0\u14a2\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586"+
    "\0\u15ac\0\u15d2\0\u15f8\0\u161e\0\276\0\u1644\0\u166a\0\u1690"+
    "\0\276\0\u16b6\0\u16dc\0\u1702\0\u1728\0\u174e\0\u1774\0\u179a"+
    "\0\u17c0\0\276\0\u17e6\0\u180c\0\276\0\u1832\0\u1858\0\u187e"+
    "\0\276\0\276\0\u18a4\0\276\0\u18ca\0\u18f0\0\u1916\0\u193c"+
    "\0\u1962\0\u1988\0\u19ae\0\u19d4\0\u19fa\0\u1a20\0\u1a46\0\u1a6c"+
    "\0\u1a92\0\276\0\276\0\276\0\u1ab8\0\u1ade\0\u1b04\0\u1b2a"+
    "\0\u1b50\0\276\0\276\0\u1b76\0\u1b9c\0\u1bc2\0\u1be8\0\u1c0e"+
    "\0\u1c34\0\u1c5a\0\u1c80\0\u1ca6\0\u1ccc\0\276\0\u1cf2\0\276"+
    "\0\u1d18\0\u1d3e\0\u1d64\0\u1d8a\0\u1db0\0\u1dd6\0\u1dfc\0\u1e22"+
    "\0\u1e48\0\u1e6e\0\276\0\u1e94\0\276\0\u1eba\0\u1ee0\0\u1f06"+
    "\0\u1f2c\0\276\0\276\0\276\0\u1f52\0\u1f78\0\276\0\u1f9e"+
    "\0\114\0\276\0\114\0\u1fc4\0\u1fea\0\u2010\0\276\0\276"+
    "\0\u2036\0\u205c\0\u2082\0\u20a8\0\276\0\u20ce\0\u20f4\0\276"+
    "\0\u211a\0\u2140\0\276\0\276\0\u2166\0\u218c\0\u21b2\0\114"+
    "\0\u21d8\0\u21fe\0\u2224\0\276\0\276\0\u224a\0\u2270\0\276"+
    "\0\u2296\0\276\0\u22bc\0\u22e2\0\u2308\0\u232e\0\276\0\276"+
    "\0\u2354\0\u237a\0\u23a0\0\276\0\276\0\u23c6\0\276\0\276";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\4\1\6\1\7\1\10\1\3"+
    "\1\11\1\12\1\11\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\11\1\26"+
    "\1\27\1\30\1\11\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\4\11\2\37\2\3\1\37\1\40\6\37\1\41"+
    "\31\37\50\0\1\4\43\0\2\7\2\0\42\7\11\0"+
    "\3\11\2\0\30\11\11\0\2\12\1\11\2\0\30\11"+
    "\15\0\1\42\30\0\11\43\3\44\2\43\23\44\1\45"+
    "\4\44\11\0\3\11\2\0\1\11\1\46\1\11\1\47"+
    "\24\11\11\0\3\11\2\0\1\50\16\11\1\51\10\11"+
    "\11\0\3\11\2\0\10\11\1\52\3\11\1\53\5\11"+
    "\1\54\5\11\11\0\3\11\2\0\22\11\1\55\5\11"+
    "\11\0\3\11\2\0\11\11\1\56\1\11\1\57\4\11"+
    "\1\60\2\11\1\61\4\11\11\0\3\11\2\0\10\11"+
    "\1\62\17\11\11\0\3\11\2\0\1\63\16\11\1\64"+
    "\10\11\11\0\3\11\2\0\1\65\7\11\1\66\17\11"+
    "\11\0\3\11\2\0\13\11\1\67\14\11\11\0\3\11"+
    "\2\0\1\70\3\11\1\71\3\11\1\72\17\11\11\0"+
    "\3\11\2\0\1\73\13\11\1\74\13\11\11\0\3\11"+
    "\2\0\15\11\1\75\12\11\11\0\3\11\2\0\22\11"+
    "\1\76\5\11\11\0\3\11\2\0\4\11\1\77\7\11"+
    "\1\100\13\11\11\0\3\11\2\0\10\11\1\101\2\11"+
    "\1\102\14\11\11\0\3\11\2\0\17\11\1\103\10\11"+
    "\11\0\3\11\2\0\11\11\1\104\3\11\1\105\12\11"+
    "\11\0\3\11\2\0\1\106\27\11\2\37\2\0\1\37"+
    "\1\0\6\37\1\0\31\37\5\0\1\107\6\0\1\110"+
    "\14\0\1\111\3\0\1\112\1\0\1\113\6\0\14\42"+
    "\1\0\1\114\30\42\11\43\3\0\2\43\41\0\3\44"+
    "\1\0\1\115\30\44\11\0\3\44\1\0\1\115\4\44"+
    "\1\116\23\44\11\0\3\11\2\0\17\11\1\117\10\11"+
    "\11\0\3\11\2\0\23\11\1\120\4\11\11\0\3\11"+
    "\2\0\11\11\1\121\16\11\11\0\3\11\2\0\14\11"+
    "\1\122\13\11\11\0\3\11\2\0\4\11\1\123\23\11"+
    "\11\0\3\11\2\0\12\11\1\124\4\11\1\125\10\11"+
    "\11\0\3\11\2\0\15\11\1\126\12\11\11\0\3\11"+
    "\2\0\4\11\1\127\23\11\11\0\3\11\2\0\5\11"+
    "\1\130\22\11\11\0\3\11\2\0\21\11\1\131\1\11"+
    "\1\132\4\11\11\0\3\11\2\0\2\11\1\133\25\11"+
    "\11\0\3\11\2\0\4\11\1\134\23\11\11\0\3\11"+
    "\2\0\13\11\1\135\14\11\11\0\3\11\2\0\20\11"+
    "\1\136\7\11\11\0\3\11\2\0\10\11\1\137\17\11"+
    "\11\0\3\11\2\0\3\11\1\140\24\11\11\0\3\11"+
    "\2\0\20\11\1\141\7\11\11\0\3\11\2\0\21\11"+
    "\1\142\6\11\11\0\3\11\2\0\6\11\1\143\10\11"+
    "\1\144\10\11\11\0\3\11\2\0\11\11\1\145\16\11"+
    "\11\0\3\11\2\0\13\11\1\146\14\11\11\0\3\11"+
    "\2\0\17\11\1\147\3\11\1\150\4\11\11\0\3\11"+
    "\2\0\2\11\1\151\25\11\11\0\3\11\2\0\4\11"+
    "\1\152\23\11\11\0\3\11\2\0\10\11\1\153\17\11"+
    "\11\0\3\11\2\0\26\11\1\154\1\11\11\0\3\11"+
    "\2\0\3\11\1\155\24\11\11\0\3\11\2\0\6\11"+
    "\1\156\21\11\11\0\3\11\2\0\14\11\1\157\13\11"+
    "\11\0\3\11\2\0\22\11\1\160\5\11\11\0\3\11"+
    "\2\0\21\11\1\161\6\11\11\0\3\11\2\0\1\162"+
    "\27\11\11\0\3\11\2\0\17\11\1\163\10\11\10\0"+
    "\1\164\46\0\3\44\1\0\1\115\17\44\1\165\10\44"+
    "\11\0\3\11\2\0\4\11\1\166\23\11\11\0\3\11"+
    "\2\0\10\11\1\167\17\11\11\0\3\11\2\0\21\11"+
    "\1\170\6\11\11\0\3\11\2\0\12\11\1\171\15\11"+
    "\11\0\3\11\2\0\17\11\1\172\10\11\11\0\3\11"+
    "\2\0\4\11\1\173\23\11\11\0\3\11\2\0\21\11"+
    "\1\174\6\11\11\0\3\11\2\0\10\11\1\175\17\11"+
    "\11\0\3\11\2\0\13\11\1\176\14\11\11\0\3\11"+
    "\2\0\14\11\1\177\13\11\11\0\3\11\2\0\17\11"+
    "\1\200\10\11\11\0\3\11\2\0\10\11\1\201\11\11"+
    "\1\202\5\11\11\0\3\11\2\0\22\11\1\203\5\11"+
    "\11\0\3\11\2\0\17\11\1\204\10\11\11\0\3\11"+
    "\2\0\17\11\1\205\10\11\11\0\3\11\2\0\15\11"+
    "\1\206\12\11\11\0\3\11\2\0\13\11\1\207\14\11"+
    "\11\0\3\11\2\0\1\210\27\11\11\0\3\11\2\0"+
    "\21\11\1\211\6\11\11\0\3\11\2\0\4\11\1\212"+
    "\23\11\11\0\3\11\2\0\14\11\1\213\13\11\11\0"+
    "\3\11\2\0\26\11\1\214\1\11\11\0\3\11\2\0"+
    "\2\11\1\215\25\11\11\0\3\11\2\0\20\11\1\216"+
    "\7\11\11\0\3\11\2\0\17\11\1\217\10\11\11\0"+
    "\3\11\2\0\10\11\1\220\17\11\11\0\3\11\2\0"+
    "\7\11\1\221\20\11\11\0\3\11\2\0\13\11\1\222"+
    "\14\11\11\0\3\11\2\0\4\11\1\223\23\11\11\0"+
    "\3\11\2\0\4\11\1\224\23\11\11\0\3\11\2\0"+
    "\14\11\1\225\13\11\11\0\3\11\2\0\22\11\1\226"+
    "\5\11\11\0\3\11\2\0\24\11\1\227\3\11\11\0"+
    "\3\11\2\0\4\11\1\230\23\11\11\0\3\11\2\0"+
    "\10\11\1\231\17\11\11\0\3\11\2\0\21\11\1\232"+
    "\6\11\11\0\3\11\2\0\10\11\1\233\17\11\11\0"+
    "\3\44\1\0\1\115\1\234\27\44\11\0\3\11\2\0"+
    "\2\11\1\235\1\11\1\236\12\11\1\237\10\11\11\0"+
    "\3\11\2\0\4\11\1\240\23\11\11\0\3\11\2\0"+
    "\1\241\27\11\11\0\3\11\2\0\10\11\1\242\17\11"+
    "\11\0\3\11\2\0\17\11\1\243\10\11\11\0\3\11"+
    "\2\0\21\11\1\244\6\11\11\0\3\11\2\0\1\245"+
    "\27\11\11\0\3\11\2\0\3\11\1\246\24\11\11\0"+
    "\3\11\2\0\3\11\1\247\24\11\11\0\3\11\2\0"+
    "\4\11\1\250\23\11\11\0\3\11\2\0\1\251\27\11"+
    "\11\0\3\11\2\0\4\11\1\252\23\11\11\0\3\11"+
    "\2\0\2\11\1\253\25\11\11\0\3\11\2\0\6\11"+
    "\1\254\21\11\11\0\3\11\2\0\4\11\1\255\23\11"+
    "\11\0\3\11\2\0\1\256\27\11\11\0\3\11\2\0"+
    "\2\11\1\257\25\11\11\0\3\11\2\0\14\11\1\260"+
    "\13\11\11\0\3\11\2\0\17\11\1\261\10\11\11\0"+
    "\3\11\2\0\20\11\1\262\7\11\11\0\3\11\2\0"+
    "\7\11\1\263\20\11\11\0\3\11\2\0\21\11\1\264"+
    "\6\11\11\0\3\11\2\0\1\265\27\11\11\0\3\11"+
    "\2\0\3\11\1\266\24\11\11\0\3\11\2\0\4\11"+
    "\1\267\23\11\11\0\3\11\2\0\20\11\1\270\7\11"+
    "\11\0\3\11\2\0\13\11\1\271\14\11\11\0\3\11"+
    "\2\0\20\11\1\272\7\11\11\0\3\11\2\0\11\11"+
    "\1\273\16\11\11\0\3\11\2\0\4\11\1\274\23\11"+
    "\11\0\3\11\2\0\1\11\1\275\26\11\11\0\3\11"+
    "\2\0\13\11\1\276\14\11\11\0\3\11\2\0\12\11"+
    "\1\277\15\11\11\0\3\11\2\0\17\11\1\300\10\11"+
    "\11\0\3\11\2\0\14\11\1\301\13\11\11\0\3\44"+
    "\1\0\1\115\13\44\1\302\14\44\11\0\3\11\2\0"+
    "\22\11\1\303\5\11\11\0\3\11\2\0\12\11\1\304"+
    "\15\11\11\0\3\11\2\0\4\11\1\305\23\11\11\0"+
    "\3\11\2\0\13\11\1\306\14\11\11\0\3\11\2\0"+
    "\27\11\1\307\11\0\3\11\2\0\20\11\1\310\7\11"+
    "\11\0\3\11\2\0\1\311\27\11\11\0\3\11\2\0"+
    "\1\312\27\11\11\0\3\11\2\0\14\11\1\313\13\11"+
    "\11\0\3\11\2\0\4\11\1\314\23\11\11\0\3\11"+
    "\2\0\6\11\1\315\21\11\11\0\3\11\2\0\11\11"+
    "\1\316\16\11\11\0\3\11\2\0\7\11\1\317\20\11"+
    "\11\0\3\11\2\0\17\11\1\320\10\11\11\0\3\11"+
    "\2\0\6\11\1\321\21\11\11\0\3\11\2\0\17\11"+
    "\1\322\10\11\11\0\3\11\2\0\7\11\1\323\20\11"+
    "\11\0\3\11\2\0\17\11\1\324\10\11\11\0\3\11"+
    "\2\0\2\11\1\325\25\11\11\0\3\11\2\0\14\11"+
    "\1\326\13\11\11\0\3\11\2\0\10\11\1\327\17\11"+
    "\11\0\3\11\2\0\1\330\27\11\11\0\3\11\2\0"+
    "\1\11\1\331\26\11\11\0\3\11\2\0\11\11\1\332"+
    "\16\11\11\0\3\11\2\0\5\11\1\333\22\11\11\0"+
    "\3\11\2\0\1\334\27\11\11\0\3\11\2\0\14\11"+
    "\1\335\13\11\11\0\3\11\2\0\14\11\1\336\13\11"+
    "\11\0\3\11\2\0\4\11\1\337\23\11\11\0\3\11"+
    "\2\0\20\11\1\340\7\11\11\0\3\44\1\0\1\115"+
    "\14\44\1\341\13\44\11\0\3\11\2\0\4\11\1\342"+
    "\23\11\11\0\3\11\2\0\15\11\1\343\12\11\11\0"+
    "\3\11\2\0\6\11\1\344\21\11\11\0\3\11\2\0"+
    "\21\11\1\345\6\11\11\0\3\11\2\0\1\346\27\11"+
    "\11\0\3\11\2\0\21\11\1\347\6\11\11\0\3\11"+
    "\2\0\2\11\1\350\1\11\1\351\12\11\1\352\10\11"+
    "\11\0\3\11\2\0\1\353\27\11\11\0\3\11\2\0"+
    "\23\11\1\354\4\11\11\0\3\11\2\0\1\355\27\11"+
    "\11\0\3\11\2\0\4\11\1\356\23\11\11\0\3\11"+
    "\2\0\1\357\27\11\11\0\3\11\2\0\10\11\1\360"+
    "\17\11\11\0\3\11\2\0\1\361\27\11\11\0\3\11"+
    "\2\0\17\11\1\362\10\11\11\0\3\11\2\0\25\11"+
    "\1\363\2\11\11\0\3\11\2\0\3\11\1\364\24\11"+
    "\11\0\3\11\2\0\22\11\1\365\5\11\11\0\3\11"+
    "\2\0\1\366\27\11\11\0\3\11\2\0\14\11\1\367"+
    "\13\11\11\0\3\11\2\0\11\11\1\370\16\11\4\0"+
    "\1\371\4\0\3\11\2\0\30\11\11\0\3\11\2\0"+
    "\4\11\1\372\23\11\11\0\3\44\1\0\1\373\30\44"+
    "\11\0\3\11\2\0\13\11\1\374\14\11\11\0\3\11"+
    "\2\0\1\375\27\11\11\0\3\11\2\0\1\376\27\11"+
    "\11\0\3\11\2\0\14\11\1\377\13\11\11\0\3\11"+
    "\2\0\17\11\1\u0100\10\11\11\0\3\11\2\0\1\u0101"+
    "\27\11\11\0\3\11\2\0\22\11\1\u0102\5\11\11\0"+
    "\3\11\2\0\12\11\1\u0103\15\11\11\0\3\11\2\0"+
    "\4\11\1\u0104\23\11\11\0\3\11\2\0\4\11\1\u0105"+
    "\23\11\11\0\3\11\2\0\4\11\1\u0106\23\11\11\0"+
    "\3\11\2\0\11\11\1\u0107\16\11\11\0\3\11\2\0"+
    "\1\u0108\27\11\11\0\3\11\2\0\12\11\1\u0109\15\11"+
    "\11\0\3\11\2\0\4\11\1\u010a\23\11\11\0\3\11"+
    "\2\0\4\11\1\u010b\23\11\11\0\3\11\2\0\11\11"+
    "\1\u010c\16\11\11\0\3\11\2\0\21\11\1\u010d\6\11"+
    "\11\0\3\11\2\0\16\11\1\u010e\11\11\11\0\3\11"+
    "\2\0\11\11\1\u010f\16\11\4\0\1\u0110\4\0\3\11"+
    "\2\0\30\11\11\0\3\11\2\0\4\11\1\u0111\23\11"+
    "\11\0\3\11\2\0\15\11\1\u0112\12\11\11\0\3\11"+
    "\2\0\6\11\1\u0113\21\11\11\0\3\11\2\0\13\11"+
    "\1\u0114\14\11\11\0\3\11\2\0\14\11\1\u0115\13\11"+
    "\11\0\3\11\2\0\1\11\1\u0116\26\11\11\0\3\11"+
    "\2\0\13\11\1\u0117\14\11\11\0\3\11\2\0\14\11"+
    "\1\u0118\13\11\11\0\3\11\2\0\22\11\1\u0119\5\11"+
    "\11\0\3\11\2\0\14\11\1\u011a\13\11\11\0\3\11"+
    "\2\0\13\11\1\u011b\14\11\11\0\3\11\2\0\1\u011c"+
    "\27\11\11\0\3\11\2\0\1\u011d\27\11\11\0\3\11"+
    "\2\0\10\11\1\u011e\17\11\11\0\3\11\2\0\1\u011f"+
    "\27\11\11\0\3\11\2\0\4\11\1\u0120\23\11\11\0"+
    "\3\11\2\0\21\11\1\u0121\6\11\11\0\3\11\2\0"+
    "\16\11\1\u0122\11\11\11\0\3\11\2\0\11\11\1\u0123"+
    "\16\11\11\0\3\11\2\0\14\11\1\u0124\13\11\11\0"+
    "\3\11\2\0\14\11\1\u0125\13\11\11\0\3\11\2\0"+
    "\22\11\1\u0126\5\11\11\0\3\11\2\0\14\11\1\u0127"+
    "\13\11\11\0\3\11\2\0\4\11\1\u0128\23\11";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9196];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\1\1\1\11\27\1\1\11"+
    "\1\1\1\0\1\1\2\0\41\1\5\11\1\0\1\11"+
    "\1\0\45\1\1\11\1\0\46\1\1\0\45\1\1\0"+
    "\36\1\1\0\27\1\1\11\1\1\1\11\24\1\1\11"+
    "\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
/* Definiciones de c√≥digo Java */
StringBuffer string = new StringBuffer();

private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
}

private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BasicLexerCupV(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal character <" + yytext() + ">");
            }
          // fall through
          case 61: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 62: break;
          case 3:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 63: break;
          case 4:
            { /* Ignore single-line comments */
            }
          // fall through
          case 64: break;
          case 5:
            { return symbol(sym.NEGATIVO);
            }
          // fall through
          case 65: break;
          case 6:
            { System.err.println("Error l√©xico en l√≠nea " + yyline + ", columna " + yycolumn + ": identificador sin guiones bajos '" + yytext() + "'");
        /* si fuera solo x*/
            }
          // fall through
          case 66: break;
          case 7:
            { return symbol(sym.L_INTEGER);
            }
          // fall through
          case 67: break;
          case 8:
            { string.append(yytext());
            }
          // fall through
          case 68: break;
          case 9:
            { yybegin(YYINITIAL); return symbol(sym.L_STRING, string.toString());
            }
          // fall through
          case 69: break;
          case 10:
            { System.err.println("Error l√©xico en l√≠nea " + yyline + ", columna " + yycolumn + ": identificador mal formado '" + yytext() + "'");
        /* si falta un _ como _x o x_ o un simbolo no valido como @ */
            }
          // fall through
          case 70: break;
          case 11:
            { string.append('\"');
            }
          // fall through
          case 71: break;
          case 12:
            { string.append('\\');
            }
          // fall through
          case 72: break;
          case 13:
            { string.append('\n');
            }
          // fall through
          case 73: break;
          case 14:
            { string.append('\r');
            }
          // fall through
          case 74: break;
          case 15:
            { string.append('\t');
            }
          // fall through
          case 75: break;
          case 16:
            { return symbol(sym.IDENTIFICADOR);
            }
          // fall through
          case 76: break;
          case 17:
            { /* Ignore multi-line comments */
            }
          // fall through
          case 77: break;
          case 18:
            { return symbol(sym.IF);
            }
          // fall through
          case 78: break;
          case 19:
            { return symbol(sym.ELSE);
            }
          // fall through
          case 79: break;
          case 20:
            { return symbol(sym.IGUAL);
            }
          // fall through
          case 80: break;
          case 21:
            { return symbol(sym.BREAK);
            }
          // fall through
          case 81: break;
          case 22:
            { return symbol(sym.RETURN);
            }
          // fall through
          case 82: break;
          case 23:
            { return symbol(sym.MODULO);
            }
          // fall through
          case 83: break;
          case 24:
            { return symbol(sym.PRINT);
            }
          // fall through
          case 84: break;
          case 25:
            { return symbol(sym.INCREMENTO);
            }
          // fall through
          case 85: break;
          case 26:
            { return symbol(sym.DIVISION);
            }
          // fall through
          case 86: break;
          case 27:
            { return symbol(sym.DOS_PUNTOS);
            }
          // fall through
          case 87: break;
          case 28:
            { return symbol(sym.STRING);
            }
          // fall through
          case 88: break;
          case 29:
            { return symbol(sym.CHAR);
            }
          // fall through
          case 89: break;
          case 30:
            { return symbol(sym.FOR);
            }
          // fall through
          case 90: break;
          case 31:
            { return symbol(sym.DISYUNCION);
            }
          // fall through
          case 91: break;
          case 32:
            { return symbol(sym.DECREMENTO);
            }
          // fall through
          case 92: break;
          case 33:
            { return symbol(sym.DEFAULT);
            }
          // fall through
          case 93: break;
          case 34:
            { return symbol(sym.SWITCH);
            }
          // fall through
          case 94: break;
          case 35:
            { return symbol(sym.ASIGNA);
            }
          // fall through
          case 95: break;
          case 36:
            { return symbol(sym.READ);
            }
          // fall through
          case 96: break;
          case 37:
            { return symbol(sym.CONJUNCION);
            }
          // fall through
          case 97: break;
          case 38:
            { return symbol(sym.MAYOR);
            }
          // fall through
          case 98: break;
          case 39:
            { return symbol(sym.SUMA);
            }
          // fall through
          case 99: break;
          case 40:
            { return symbol(sym.INTEGER);
            }
          // fall through
          case 100: break;
          case 41:
            { return symbol(sym.BOOL);
            }
          // fall through
          case 101: break;
          case 42:
            { return symbol(sym.MAYOR_IGUAL);
            }
          // fall through
          case 102: break;
          case 43:
            { return symbol(sym.MAIN);
            }
          // fall through
          case 103: break;
          case 44:
            { return symbol(sym.POTENCIA);
            }
          // fall through
          case 104: break;
          case 45:
            { return symbol(sym.NEGACION);
            }
          // fall through
          case 105: break;
          case 46:
            { return symbol(sym.WHILE);
            }
          // fall through
          case 106: break;
          case 47:
            { return symbol(sym.CASE);
            }
          // fall through
          case 107: break;
          case 48:
            { return symbol(sym.DIFERENTE);
            }
          // fall through
          case 108: break;
          case 49:
            { return symbol(sym.MENOR);
            }
          // fall through
          case 109: break;
          case 50:
            { return symbol(sym.FLOAT);
            }
          // fall through
          case 110: break;
          case 51:
            { return symbol(sym.MENOR_IGUAL);
            }
          // fall through
          case 111: break;
          case 52:
            { return symbol(sym.FIN_EXPRESION);
            }
          // fall through
          case 112: break;
          case 53:
            { return symbol(sym.ABRECUENTO);
            }
          // fall through
          case 113: break;
          case 54:
            { return symbol(sym.PARENTESISAPERTURA);
            }
          // fall through
          case 114: break;
          case 55:
            { return symbol(sym.MULTIPLICACION);
            }
          // fall through
          case 115: break;
          case 56:
            { return symbol(sym.ABREEMPAQUE);
            }
          // fall through
          case 116: break;
          case 57:
            { return symbol(sym.RESTA);
            }
          // fall through
          case 117: break;
          case 58:
            { return symbol(sym.CIERRACUENTO);
            }
          // fall through
          case 118: break;
          case 59:
            { return symbol(sym.PARENTESISCIERRE);
            }
          // fall through
          case 119: break;
          case 60:
            { return symbol(sym.CIERREEMPAQUE);
            }
          // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
