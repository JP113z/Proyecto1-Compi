// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Proyecto1-Compi/src/V2024/basicLexerCupVerano2024.jflex

/* JFlex example: partial Java language lexer specification */
package ParserLexer;

import java_cup.runtime.*;

/**
 * This class is a simple example lexer.
 *
 * Lexer base tomado de la p√°gina de Cup que requiere sym para utilizarse como Lexer.
 * Este lexer es utilizado por por el parser generado por BasicLexerCup (parser.java que se genera).
 */

@SuppressWarnings("fallthrough")
public class BasicLexerCupV implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\4\22\0\1\5"+
    "\1\0\1\6\1\7\10\0\1\10\1\11\1\12\1\13"+
    "\12\14\7\0\32\15\1\0\1\16\2\0\1\17\1\0"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\2\15\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\u0185\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\3\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\23\10\1\11\1\12\1\0\1\7\2\1"+
    "\2\13\2\1\1\0\1\14\1\10\1\14\41\10\1\15"+
    "\1\16\1\17\1\20\1\21\1\7\1\0\1\1\2\22"+
    "\1\23\1\14\45\10\1\0\1\24\1\14\11\10\1\25"+
    "\10\10\1\26\3\10\1\27\17\10\1\24\1\14\10\10"+
    "\1\30\3\10\1\31\10\10\1\32\2\10\1\33\3\10"+
    "\1\34\1\35\1\10\1\36\5\10\1\14\7\10\1\37"+
    "\1\40\1\41\5\10\1\42\1\43\12\10\1\44\1\10"+
    "\1\45\1\14\11\10\1\46\1\10\1\47\4\10\1\50"+
    "\1\51\1\52\2\10\1\53\1\10\1\54\1\55\1\56"+
    "\3\10\1\57\1\60\4\10\1\61\2\10\1\62\2\10"+
    "\1\63\1\64\3\10\1\65\3\10\1\66\1\67\2\10"+
    "\1\70\1\10\1\71\4\10\1\72\1\73\3\10\1\74"+
    "\1\75\1\10\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\120\0\240\0\120\0\310"+
    "\0\120\0\360\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0"+
    "\0\u0208\0\u0230\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320"+
    "\0\u0348\0\u0370\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460"+
    "\0\u0488\0\170\0\u04b0\0\u04d8\0\u0500\0\u0528\0\120\0\u0550"+
    "\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0550\0\u0618\0\u0640\0\u0668"+
    "\0\u0690\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758\0\u0780\0\u07a8"+
    "\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898\0\u08c0\0\u08e8"+
    "\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\u0a28"+
    "\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\170"+
    "\0\170\0\170\0\170\0\170\0\u0b68\0\u0b90\0\u0bb8\0\120"+
    "\0\170\0\u0550\0\u0be0\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8"+
    "\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8"+
    "\0\u0e10\0\u0e38\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28"+
    "\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068"+
    "\0\u1090\0\u10b8\0\u10e0\0\u1108\0\u1130\0\u1158\0\u1180\0\u11a8"+
    "\0\u11d0\0\120\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0"+
    "\0\u12e8\0\u1310\0\u1338\0\u1360\0\u0140\0\u1388\0\u13b0\0\u13d8"+
    "\0\u1400\0\u1428\0\u1450\0\u1478\0\u14a0\0\u0140\0\u14c8\0\u14f0"+
    "\0\u1518\0\u0140\0\u1540\0\u1568\0\u1590\0\u15b8\0\u15e0\0\u1608"+
    "\0\u1630\0\u1658\0\u1680\0\u16a8\0\u16d0\0\u16f8\0\u1720\0\u1748"+
    "\0\u1770\0\170\0\u1798\0\u17c0\0\u17e8\0\u1810\0\u1838\0\u1860"+
    "\0\u1888\0\u18b0\0\u18d8\0\u0140\0\u1900\0\u1928\0\u1950\0\u0140"+
    "\0\u1978\0\u19a0\0\u19c8\0\u19f0\0\u1a18\0\u1a40\0\u1a68\0\u1a90"+
    "\0\u0140\0\u1ab8\0\u1ae0\0\u0140\0\u1b08\0\u1b30\0\u1b58\0\u0140"+
    "\0\u0140\0\u1b80\0\u0140\0\u1ba8\0\u1bd0\0\u1bf8\0\u1c20\0\u1c48"+
    "\0\u1c70\0\u1c98\0\u1cc0\0\u1ce8\0\u1d10\0\u1d38\0\u1d60\0\u1d88"+
    "\0\u0140\0\u0140\0\u0140\0\u1db0\0\u1dd8\0\u1e00\0\u1e28\0\u1e50"+
    "\0\u0140\0\u0140\0\u1e78\0\u1ea0\0\u1ec8\0\u1ef0\0\u1f18\0\u1f40"+
    "\0\u1f68\0\u1f90\0\u1fb8\0\u1fe0\0\u0140\0\u2008\0\u0140\0\u2030"+
    "\0\u2058\0\u2080\0\u20a8\0\u20d0\0\u20f8\0\u2120\0\u2148\0\u2170"+
    "\0\u2198\0\u0140\0\u21c0\0\u0140\0\u21e8\0\u2210\0\u2238\0\u2260"+
    "\0\u0140\0\u0140\0\u0140\0\u2288\0\u22b0\0\u0140\0\u22d8\0\170"+
    "\0\u0140\0\u0550\0\u2300\0\u2328\0\u2350\0\u0140\0\u0140\0\u2378"+
    "\0\u23a0\0\u23c8\0\u23f0\0\u0140\0\u2418\0\u2440\0\u0140\0\u2468"+
    "\0\u2490\0\u0140\0\u0140\0\u24b8\0\u24e0\0\u2508\0\170\0\u2530"+
    "\0\u2558\0\u2580\0\u0140\0\u0140\0\u25a8\0\u25d0\0\u0140\0\u25f8"+
    "\0\u0140\0\u2620\0\u2648\0\u2670\0\u2698\0\u0140\0\u0140\0\u26c0"+
    "\0\u26e8\0\u2710\0\u0140\0\u0140\0\u2738\0\u0140\0\u0140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\4\1\7\1\10\1\11"+
    "\1\12\2\3\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\14"+
    "\1\30\1\31\1\32\1\14\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\4\14\2\41\1\0\1\41\1\0\1\41"+
    "\1\42\7\41\1\43\31\41\1\3\2\0\1\3\2\0"+
    "\42\3\52\0\1\4\45\0\2\10\1\0\1\10\1\0"+
    "\43\10\1\3\2\0\1\3\2\0\6\3\1\44\34\3"+
    "\2\0\1\3\2\0\4\3\1\45\1\3\1\13\1\46"+
    "\1\3\1\47\30\46\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\30\14\1\3\2\0\1\3\2\0"+
    "\11\3\1\51\30\3\1\52\2\53\1\52\2\53\6\52"+
    "\2\54\1\52\1\55\23\54\1\56\4\54\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\1\14\1\57"+
    "\1\14\1\60\24\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\1\61\16\14\1\62\10\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\10\14"+
    "\1\63\3\14\1\64\5\14\1\65\5\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\22\14\1\66"+
    "\5\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\11\14\1\67\1\14\1\70\4\14\1\71\2\14"+
    "\1\72\4\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\10\14\1\73\17\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\1\74\16\14\1\75"+
    "\10\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\1\76\7\14\1\77\17\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\13\14\1\100\14\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\1\101\3\14\1\102\3\14\1\103\17\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\1\104\13\14"+
    "\1\105\13\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\15\14\1\106\12\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\22\14\1\107\5\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\4\14\1\110\7\14\1\111\13\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\10\14\1\112\2\14"+
    "\1\113\14\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\17\14\1\114\10\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\11\14\1\115\3\14"+
    "\1\116\12\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\1\117\27\14\2\41\1\0\1\41\1\0"+
    "\1\41\1\0\7\41\1\0\31\41\6\0\1\120\7\0"+
    "\1\121\14\0\1\122\3\0\1\123\1\0\1\124\6\0"+
    "\1\3\2\0\1\3\2\0\4\3\1\45\1\3\1\44"+
    "\34\3\2\0\1\3\2\0\4\3\1\45\1\3\1\125"+
    "\34\3\2\0\1\3\2\0\6\3\2\46\1\3\1\47"+
    "\30\46\1\3\2\0\1\3\2\0\6\3\2\55\1\3"+
    "\31\55\1\51\2\126\1\51\2\126\10\51\1\3\1\127"+
    "\30\51\1\52\2\53\1\52\2\53\6\52\2\3\1\52"+
    "\1\130\30\3\14\53\2\0\1\53\1\131\30\0\1\3"+
    "\2\0\1\3\2\0\6\3\2\54\1\3\1\132\30\54"+
    "\1\3\2\0\1\3\2\0\6\3\2\54\1\3\1\132"+
    "\4\54\1\133\23\54\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\17\14\1\134\10\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\23\14\1\135"+
    "\4\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\11\14\1\136\16\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\14\14\1\137\13\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\4\14"+
    "\1\140\23\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\12\14\1\141\4\14\1\142\10\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\15\14"+
    "\1\143\12\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\4\14\1\144\23\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\5\14\1\145\22\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\21\14\1\146\1\14\1\147\4\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\2\14\1\150\25\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\4\14\1\151\23\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\13\14\1\152\14\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\20\14\1\153"+
    "\7\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\10\14\1\154\17\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\3\14\1\155\24\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\20\14"+
    "\1\156\7\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\21\14\1\157\6\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\6\14\1\160\10\14"+
    "\1\161\10\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\11\14\1\162\16\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\13\14\1\163\14\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\17\14\1\164\3\14\1\165\4\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\2\14\1\166\25\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\4\14\1\167\23\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\10\14\1\170\17\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\26\14\1\171"+
    "\1\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\3\14\1\172\24\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\6\14\1\173\21\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\14\14"+
    "\1\174\13\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\22\14\1\175\5\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\21\14\1\176\6\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\1\177\27\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\17\14\1\200\10\14\1\3\2\0\1\3"+
    "\2\0\6\3\1\125\33\3\16\126\1\0\1\201\30\126"+
    "\1\3\2\0\1\3\2\0\5\3\1\202\35\3\2\0"+
    "\1\3\2\0\6\3\2\54\1\3\1\132\17\54\1\203"+
    "\10\54\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\4\14\1\204\23\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\10\14\1\205\17\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\21\14"+
    "\1\206\6\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\12\14\1\207\15\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\17\14\1\210\10\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\4\14\1\211\23\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\21\14\1\212\6\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\10\14\1\213"+
    "\17\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\13\14\1\214\14\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\14\14\1\215\13\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\17\14"+
    "\1\216\10\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\10\14\1\217\11\14\1\220\5\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\22\14"+
    "\1\221\5\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\17\14\1\222\10\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\17\14\1\223\10\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\15\14\1\224\12\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\13\14\1\225\14\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\1\226\27\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\21\14\1\227\6\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\4\14\1\230\23\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\14\14\1\231"+
    "\13\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\26\14\1\232\1\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\2\14\1\233\25\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\20\14"+
    "\1\234\7\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\17\14\1\235\10\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\10\14\1\236\17\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\7\14\1\237\20\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\13\14\1\240\14\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\4\14\1\241"+
    "\23\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\4\14\1\242\23\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\14\14\1\243\13\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\22\14"+
    "\1\244\5\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\24\14\1\245\3\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\4\14\1\246\23\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\10\14\1\247\17\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\21\14\1\250\6\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\10\14\1\251"+
    "\17\14\13\0\1\252\34\0\1\3\2\0\1\3\2\0"+
    "\6\3\2\54\1\3\1\132\1\253\27\54\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\2\14\1\254"+
    "\1\14\1\255\12\14\1\256\10\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\4\14\1\257\23\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\1\260\27\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\10\14\1\261\17\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\17\14\1\262\10\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\21\14\1\263\6\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\1\264\27\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\3\14\1\265\24\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\3\14\1\266\24\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\4\14\1\267\23\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\1\270\27\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\4\14\1\271\23\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\2\14\1\272\25\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\6\14\1\273"+
    "\21\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\4\14\1\274\23\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\1\275\27\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\2\14\1\276"+
    "\25\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\14\14\1\277\13\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\17\14\1\300\10\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\20\14"+
    "\1\301\7\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\7\14\1\302\20\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\21\14\1\303\6\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\1\304\27\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\3\14\1\305\24\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\4\14\1\306\23\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\20\14\1\307\7\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\13\14\1\310\14\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\20\14\1\311"+
    "\7\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\11\14\1\312\16\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\4\14\1\313\23\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\1\14"+
    "\1\314\26\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\13\14\1\315\14\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\12\14\1\316\15\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\17\14\1\317\10\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\14\14\1\320\13\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\54\1\3\1\132\13\54\1\321"+
    "\14\54\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\22\14\1\322\5\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\12\14\1\323\15\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\4\14"+
    "\1\324\23\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\13\14\1\325\14\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\27\14\1\326\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\20\14"+
    "\1\327\7\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\1\330\27\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\1\331\27\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\14\14\1\332"+
    "\13\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\4\14\1\333\23\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\6\14\1\334\21\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\11\14"+
    "\1\335\16\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\7\14\1\336\20\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\17\14\1\337\10\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\6\14\1\340\21\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\17\14\1\341\10\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\7\14\1\342"+
    "\20\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\17\14\1\343\10\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\2\14\1\344\25\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\14\14"+
    "\1\345\13\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\10\14\1\346\17\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\1\347\27\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\1\14"+
    "\1\350\26\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\11\14\1\351\16\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\5\14\1\352\22\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\1\353\27\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\14\14\1\354\13\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\14\14\1\355\13\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\4\14\1\356\23\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\20\14\1\357\7\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\54\1\3\1\132\14\54\1\360"+
    "\13\54\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\4\14\1\361\23\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\15\14\1\362\12\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\6\14"+
    "\1\363\21\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\21\14\1\364\6\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\1\365\27\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\21\14"+
    "\1\366\6\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\2\14\1\367\1\14\1\370\12\14\1\371"+
    "\10\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\1\372\27\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\23\14\1\373\4\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\1\374\27\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\4\14\1\375\23\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\1\376\27\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\10\14\1\377\17\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\1\u0100\27\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\17\14\1\u0101\10\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\25\14\1\u0102\2\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\3\14\1\u0103\24\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\22\14\1\u0104\5\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\1\u0105\27\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\14\14\1\u0106\13\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\11\14\1\u0107\16\14\1\3\2\0"+
    "\1\3\1\0\1\u0108\6\3\2\14\1\3\1\50\30\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\4\14\1\u0109\23\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\54\1\3\1\u010a\30\54\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\13\14\1\u010b\14\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\1\u010c"+
    "\27\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\1\u010d\27\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\14\14\1\u010e\13\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\17\14\1\u010f"+
    "\10\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\1\u0110\27\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\22\14\1\u0111\5\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\12\14\1\u0112"+
    "\15\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\4\14\1\u0113\23\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\4\14\1\u0114\23\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\4\14"+
    "\1\u0115\23\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\11\14\1\u0116\16\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\1\u0117\27\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\12\14"+
    "\1\u0118\15\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\4\14\1\u0119\23\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\4\14\1\u011a\23\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\11\14\1\u011b\16\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\21\14\1\u011c\6\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\16\14\1\u011d"+
    "\11\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\11\14\1\u011e\16\14\1\3\2\0\1\3\1\0"+
    "\1\u011f\6\3\2\14\1\3\1\50\30\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\4\14\1\u0120"+
    "\23\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\15\14\1\u0121\12\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\6\14\1\u0122\21\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\13\14"+
    "\1\u0123\14\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\14\14\1\u0124\13\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\1\14\1\u0125\26\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\13\14\1\u0126\14\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\14\14\1\u0127\13\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\22\14\1\u0128"+
    "\5\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\14\14\1\u0129\13\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\13\14\1\u012a\14\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\1\u012b"+
    "\27\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\1\u012c\27\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\10\14\1\u012d\17\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\1\u012e\27\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\4\14\1\u012f\23\14\1\3\2\0\1\3\2\0\6\3"+
    "\2\14\1\3\1\50\21\14\1\u0130\6\14\1\3\2\0"+
    "\1\3\2\0\6\3\2\14\1\3\1\50\16\14\1\u0131"+
    "\11\14\1\3\2\0\1\3\2\0\6\3\2\14\1\3"+
    "\1\50\11\14\1\u0132\16\14\1\3\2\0\1\3\2\0"+
    "\6\3\2\14\1\3\1\50\14\14\1\u0133\13\14\1\3"+
    "\2\0\1\3\2\0\6\3\2\14\1\3\1\50\14\14"+
    "\1\u0134\13\14\1\3\2\0\1\3\2\0\6\3\2\14"+
    "\1\3\1\50\22\14\1\u0135\5\14\1\3\2\0\1\3"+
    "\2\0\6\3\2\14\1\3\1\50\14\14\1\u0136\13\14"+
    "\1\3\2\0\1\3\2\0\6\3\2\14\1\3\1\50"+
    "\4\14\1\u0137\23\14";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10080];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\35\1\1\11\1\0\7\1\1\0"+
    "\44\1\5\11\1\1\1\0\2\1\1\11\47\1\1\0"+
    "\50\1\1\11\135\1\1\11\26\1\1\11\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
/* Definiciones de c√≥digo Java */
StringBuffer string = new StringBuffer();

private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
}

private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BasicLexerCupV(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Error l√©xico: Secuencia no v√°lida '" + yytext() +
            "' en l√≠nea " + (yyline + 1) + ", columna " + (yycolumn + 1));
            }
          // fall through
          case 64: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 65: break;
          case 3:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 66: break;
          case 4:
            { /* Ignore single-line comments */
            }
          // fall through
          case 67: break;
          case 5:
            { return symbol(sym.COMA);
            }
          // fall through
          case 68: break;
          case 6:
            { return symbol(sym.NEGATIVO);
            }
          // fall through
          case 69: break;
          case 7:
            { try {
            if (yytext().contains(".")) {
                return symbol(sym.L_FLOAT, Double.parseDouble(yytext())); // Si es decimal
            } else {
                return symbol(sym.L_INTEGER, Integer.parseInt(yytext())); // Si es entero
            }
        } catch (NumberFormatException e) {
            System.err.println("Error l√©xico: N√∫mero mal formado '" + yytext() + "' en l√≠nea " + yyline + ", columna " + yycolumn);
        }
            }
          // fall through
          case 70: break;
          case 8:
            { System.err.println("Error l√©xico: Palabra no permitida '" + yytext() + "' en l√≠nea "
            + (yyline + 1) + ", columna " + (yycolumn + 1));
            }
          // fall through
          case 71: break;
          case 9:
            { string.append(yytext());
            }
          // fall through
          case 72: break;
          case 10:
            { yybegin(YYINITIAL); return symbol(sym.L_STRING, string.toString());
            }
          // fall through
          case 73: break;
          case 11:
            { System.err.println("Error l√©xico: Identificador debe iniciar con '_': '" + yytext() + "' en l√≠nea "
            + (yyline + 1) + ", columna " + (yycolumn + 1));
            }
          // fall through
          case 74: break;
          case 12:
            { System.err.println("Error l√©xico: Identificador debe terminar con '_': '" + yytext() + "' en l√≠nea "
            + (yyline + 1) + ", columna " + (yycolumn + 1));
            }
          // fall through
          case 75: break;
          case 13:
            { string.append('\"');
            }
          // fall through
          case 76: break;
          case 14:
            { string.append('\\');
            }
          // fall through
          case 77: break;
          case 15:
            { string.append('\n');
            }
          // fall through
          case 78: break;
          case 16:
            { string.append('\r');
            }
          // fall through
          case 79: break;
          case 17:
            { string.append('\t');
            }
          // fall through
          case 80: break;
          case 18:
            { System.err.println("Error l√©xico: Identificador mal formado (caracteres no v√°lidos o espacios): '" + yytext() +
            "' en l√≠nea " + (yyline + 1) + ", columna " + (yycolumn + 1));
            }
          // fall through
          case 81: break;
          case 19:
            { return symbol(sym.IDENTIFICADOR);
            }
          // fall through
          case 82: break;
          case 20:
            { /* Ignore multi-line comments */
            }
          // fall through
          case 83: break;
          case 21:
            { return symbol(sym.IF);
            }
          // fall through
          case 84: break;
          case 22:
            { return symbol(sym.ELSE);
            }
          // fall through
          case 85: break;
          case 23:
            { return symbol(sym.IGUAL);
            }
          // fall through
          case 86: break;
          case 24:
            { return symbol(sym.BREAK);
            }
          // fall through
          case 87: break;
          case 25:
            { return symbol(sym.RETURN);
            }
          // fall through
          case 88: break;
          case 26:
            { return symbol(sym.MODULO);
            }
          // fall through
          case 89: break;
          case 27:
            { return symbol(sym.PRINT);
            }
          // fall through
          case 90: break;
          case 28:
            { return symbol(sym.INCREMENTO);
            }
          // fall through
          case 91: break;
          case 29:
            { return symbol(sym.DIVISION);
            }
          // fall through
          case 92: break;
          case 30:
            { return symbol(sym.DOS_PUNTOS);
            }
          // fall through
          case 93: break;
          case 31:
            { return symbol(sym.STRING);
            }
          // fall through
          case 94: break;
          case 32:
            { return symbol(sym.CHAR);
            }
          // fall through
          case 95: break;
          case 33:
            { return symbol(sym.FOR);
            }
          // fall through
          case 96: break;
          case 34:
            { return symbol(sym.DISYUNCION);
            }
          // fall through
          case 97: break;
          case 35:
            { return symbol(sym.DECREMENTO);
            }
          // fall through
          case 98: break;
          case 36:
            { return symbol(sym.DEFAULT);
            }
          // fall through
          case 99: break;
          case 37:
            { return symbol(sym.SWITCH);
            }
          // fall through
          case 100: break;
          case 38:
            { return symbol(sym.ASIGNA);
            }
          // fall through
          case 101: break;
          case 39:
            { return symbol(sym.READ);
            }
          // fall through
          case 102: break;
          case 40:
            { return symbol(sym.CONJUNCION);
            }
          // fall through
          case 103: break;
          case 41:
            { return symbol(sym.MAYOR);
            }
          // fall through
          case 104: break;
          case 42:
            { return symbol(sym.SUMA);
            }
          // fall through
          case 105: break;
          case 43:
            { return symbol(sym.INTEGER);
            }
          // fall through
          case 106: break;
          case 44:
            { return symbol(sym.BOOL);
            }
          // fall through
          case 107: break;
          case 45:
            { return symbol(sym.MAYOR_IGUAL);
            }
          // fall through
          case 108: break;
          case 46:
            { return symbol(sym.MAIN);
            }
          // fall through
          case 109: break;
          case 47:
            { return symbol(sym.POTENCIA);
            }
          // fall through
          case 110: break;
          case 48:
            { return symbol(sym.NEGACION);
            }
          // fall through
          case 111: break;
          case 49:
            { return symbol(sym.WHILE);
            }
          // fall through
          case 112: break;
          case 50:
            { return symbol(sym.CASE);
            }
          // fall through
          case 113: break;
          case 51:
            { return symbol(sym.DIFERENTE);
            }
          // fall through
          case 114: break;
          case 52:
            { return symbol(sym.MENOR);
            }
          // fall through
          case 115: break;
          case 53:
            { return symbol(sym.FLOAT);
            }
          // fall through
          case 116: break;
          case 54:
            { return symbol(sym.MENOR_IGUAL);
            }
          // fall through
          case 117: break;
          case 55:
            { return symbol(sym.FIN_EXPRESION);
            }
          // fall through
          case 118: break;
          case 56:
            { return symbol(sym.ABRECUENTO);
            }
          // fall through
          case 119: break;
          case 57:
            { return symbol(sym.PARENTESISAPERTURA);
            }
          // fall through
          case 120: break;
          case 58:
            { return symbol(sym.MULTIPLICACION);
            }
          // fall through
          case 121: break;
          case 59:
            { return symbol(sym.ABREEMPAQUE);
            }
          // fall through
          case 122: break;
          case 60:
            { return symbol(sym.RESTA);
            }
          // fall through
          case 123: break;
          case 61:
            { return symbol(sym.CIERRACUENTO);
            }
          // fall through
          case 124: break;
          case 62:
            { return symbol(sym.PARENTESISCIERRE);
            }
          // fall through
          case 125: break;
          case 63:
            { return symbol(sym.CIERREEMPAQUE);
            }
          // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
