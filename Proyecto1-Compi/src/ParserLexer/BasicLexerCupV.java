// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Proyecto1-Compi/src/V2024/basicLexerCupVerano2024.jflex

/* JFlex example: partial Java language lexer specification */
package ParserLexer;

import java_cup.runtime.*;

/**
 * This class is a simple example lexer.
 *
 * Lexer base tomado de la p√°gina de Cup que requiere sym para utilizarse como Lexer.
 * Este lexer es utilizado por por el parser generado por BasicLexerCup (parser.java que se genera).
 */

@SuppressWarnings("fallthrough")
public class BasicLexerCupV implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\0\1\5\1\6\10\0\1\7\1\10\1\11\1\12"+
    "\12\13\7\0\32\14\1\0\1\15\2\0\1\16\1\0"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\2\14\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\u0185\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\25\1\1\10\1\11\1\0\1\7\2\0\1\12\2\0"+
    "\2\13\41\0\1\14\1\15\1\16\1\17\1\20\1\7"+
    "\1\0\1\21\1\22\1\13\45\0\1\23\1\13\11\0"+
    "\1\24\10\0\1\25\3\0\1\26\17\0\1\13\10\0"+
    "\1\27\3\0\1\30\10\0\1\31\2\0\1\32\3\0"+
    "\1\33\1\34\1\0\1\35\5\0\1\13\7\0\1\36"+
    "\1\37\1\40\5\0\1\41\1\42\12\0\1\43\1\0"+
    "\1\44\1\13\11\0\1\45\1\0\1\46\4\0\1\47"+
    "\1\50\1\51\2\0\1\52\1\0\1\53\1\54\1\55"+
    "\3\0\1\56\1\57\4\0\1\60\2\0\1\61\2\0"+
    "\1\62\1\63\3\0\1\64\3\0\1\65\1\66\2\0"+
    "\1\67\1\0\1\70\4\0\1\71\1\72\3\0\1\73"+
    "\1\74\1\0\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[303];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\116\0\165\0\116\0\234\0\116"+
    "\0\303\0\352\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4"+
    "\0\u01fb\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c"+
    "\0\u0333\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444"+
    "\0\116\0\u046b\0\u0492\0\u04b9\0\u0111\0\116\0\u04e0\0\u0507"+
    "\0\u052e\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f"+
    "\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777"+
    "\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af"+
    "\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7"+
    "\0\u0a0e\0\u0a35\0\u0a5c\0\116\0\116\0\116\0\116\0\116"+
    "\0\u0a83\0\u0aaa\0\116\0\116\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46"+
    "\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u0c30\0\u0c57\0\u0c7e"+
    "\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f\0\u0db6"+
    "\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee"+
    "\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff\0\u1026"+
    "\0\u104d\0\u1074\0\116\0\u109b\0\u10c2\0\u10e9\0\u1110\0\u1137"+
    "\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u11fa\0\u0111\0\u1221\0\u1248"+
    "\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332\0\u0111\0\u1359"+
    "\0\u1380\0\u13a7\0\u0111\0\u13ce\0\u13f5\0\u141c\0\u1443\0\u146a"+
    "\0\u1491\0\u14b8\0\u14df\0\u1506\0\u152d\0\u1554\0\u157b\0\u15a2"+
    "\0\u15c9\0\u15f0\0\u1617\0\u163e\0\u1665\0\u168c\0\u16b3\0\u16da"+
    "\0\u1701\0\u1728\0\u174f\0\u0111\0\u1776\0\u179d\0\u17c4\0\u0111"+
    "\0\u17eb\0\u1812\0\u1839\0\u1860\0\u1887\0\u18ae\0\u18d5\0\u18fc"+
    "\0\u0111\0\u1923\0\u194a\0\u0111\0\u1971\0\u1998\0\u19bf\0\u0111"+
    "\0\u0111\0\u19e6\0\u0111\0\u1a0d\0\u1a34\0\u1a5b\0\u1a82\0\u1aa9"+
    "\0\u1ad0\0\u1af7\0\u1b1e\0\u1b45\0\u1b6c\0\u1b93\0\u1bba\0\u1be1"+
    "\0\u0111\0\u0111\0\u0111\0\u1c08\0\u1c2f\0\u1c56\0\u1c7d\0\u1ca4"+
    "\0\u0111\0\u0111\0\u1ccb\0\u1cf2\0\u1d19\0\u1d40\0\u1d67\0\u1d8e"+
    "\0\u1db5\0\u1ddc\0\u1e03\0\u1e2a\0\u0111\0\u1e51\0\u0111\0\u1e78"+
    "\0\u1e9f\0\u1ec6\0\u1eed\0\u1f14\0\u1f3b\0\u1f62\0\u1f89\0\u1fb0"+
    "\0\u1fd7\0\u0111\0\u1ffe\0\u0111\0\u2025\0\u204c\0\u2073\0\u209a"+
    "\0\u0111\0\u0111\0\u0111\0\u20c1\0\u20e8\0\u0111\0\u210f\0\116"+
    "\0\u0111\0\116\0\u2136\0\u215d\0\u2184\0\u0111\0\u0111\0\u21ab"+
    "\0\u21d2\0\u21f9\0\u2220\0\u0111\0\u2247\0\u226e\0\u0111\0\u2295"+
    "\0\u22bc\0\u0111\0\u0111\0\u22e3\0\u230a\0\u2331\0\116\0\u2358"+
    "\0\u237f\0\u23a6\0\u0111\0\u0111\0\u23cd\0\u23f4\0\u0111\0\u241b"+
    "\0\u0111\0\u2442\0\u2469\0\u2490\0\u24b7\0\u0111\0\u0111\0\u24de"+
    "\0\u2505\0\u252c\0\u0111\0\u0111\0\u2553\0\u0111\0\u0111";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[303];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\4\1\6\1\7\1\10\1\11"+
    "\2\3\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\13\1\27"+
    "\1\30\1\31\1\13\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\4\13\2\40\2\0\1\40\1\41\7\40\1\42"+
    "\31\40\51\0\1\4\44\0\2\7\2\0\43\7\13\0"+
    "\1\43\44\0\1\44\1\0\1\12\1\45\1\0\1\46"+
    "\30\45\13\0\2\45\1\0\1\46\30\45\16\0\1\47"+
    "\30\0\13\50\2\51\1\50\1\0\23\51\1\52\4\51"+
    "\13\0\2\45\1\0\1\46\1\45\1\53\1\45\1\54"+
    "\24\45\13\0\2\45\1\0\1\46\1\55\16\45\1\56"+
    "\10\45\13\0\2\45\1\0\1\46\10\45\1\57\3\45"+
    "\1\60\5\45\1\61\5\45\13\0\2\45\1\0\1\46"+
    "\22\45\1\62\5\45\13\0\2\45\1\0\1\46\11\45"+
    "\1\63\1\45\1\64\4\45\1\65\2\45\1\66\4\45"+
    "\13\0\2\45\1\0\1\46\10\45\1\67\17\45\13\0"+
    "\2\45\1\0\1\46\1\70\16\45\1\71\10\45\13\0"+
    "\2\45\1\0\1\46\1\72\7\45\1\73\17\45\13\0"+
    "\2\45\1\0\1\46\13\45\1\74\14\45\13\0\2\45"+
    "\1\0\1\46\1\75\3\45\1\76\3\45\1\77\17\45"+
    "\13\0\2\45\1\0\1\46\1\100\13\45\1\101\13\45"+
    "\13\0\2\45\1\0\1\46\15\45\1\102\12\45\13\0"+
    "\2\45\1\0\1\46\22\45\1\103\5\45\13\0\2\45"+
    "\1\0\1\46\4\45\1\104\7\45\1\105\13\45\13\0"+
    "\2\45\1\0\1\46\10\45\1\106\2\45\1\107\14\45"+
    "\13\0\2\45\1\0\1\46\17\45\1\110\10\45\13\0"+
    "\2\45\1\0\1\46\11\45\1\111\3\45\1\112\12\45"+
    "\13\0\2\45\1\0\1\46\1\113\27\45\2\40\2\0"+
    "\1\40\1\0\7\40\1\0\31\40\5\0\1\114\7\0"+
    "\1\115\14\0\1\116\3\0\1\117\1\0\1\120\17\0"+
    "\1\44\1\0\1\43\44\0\1\44\1\0\1\121\33\0"+
    "\15\47\1\0\1\122\30\47\13\50\2\0\1\50\1\123"+
    "\43\0\2\51\1\0\1\124\30\51\13\0\2\51\1\0"+
    "\1\124\4\51\1\125\23\51\13\0\2\45\1\0\1\46"+
    "\17\45\1\126\10\45\13\0\2\45\1\0\1\46\23\45"+
    "\1\127\4\45\13\0\2\45\1\0\1\46\11\45\1\130"+
    "\16\45\13\0\2\45\1\0\1\46\14\45\1\131\13\45"+
    "\13\0\2\45\1\0\1\46\4\45\1\132\23\45\13\0"+
    "\2\45\1\0\1\46\12\45\1\133\4\45\1\134\10\45"+
    "\13\0\2\45\1\0\1\46\15\45\1\135\12\45\13\0"+
    "\2\45\1\0\1\46\4\45\1\136\23\45\13\0\2\45"+
    "\1\0\1\46\5\45\1\137\22\45\13\0\2\45\1\0"+
    "\1\46\21\45\1\140\1\45\1\141\4\45\13\0\2\45"+
    "\1\0\1\46\2\45\1\142\25\45\13\0\2\45\1\0"+
    "\1\46\4\45\1\143\23\45\13\0\2\45\1\0\1\46"+
    "\13\45\1\144\14\45\13\0\2\45\1\0\1\46\20\45"+
    "\1\145\7\45\13\0\2\45\1\0\1\46\10\45\1\146"+
    "\17\45\13\0\2\45\1\0\1\46\3\45\1\147\24\45"+
    "\13\0\2\45\1\0\1\46\20\45\1\150\7\45\13\0"+
    "\2\45\1\0\1\46\21\45\1\151\6\45\13\0\2\45"+
    "\1\0\1\46\6\45\1\152\10\45\1\153\10\45\13\0"+
    "\2\45\1\0\1\46\11\45\1\154\16\45\13\0\2\45"+
    "\1\0\1\46\13\45\1\155\14\45\13\0\2\45\1\0"+
    "\1\46\17\45\1\156\3\45\1\157\4\45\13\0\2\45"+
    "\1\0\1\46\2\45\1\160\25\45\13\0\2\45\1\0"+
    "\1\46\4\45\1\161\23\45\13\0\2\45\1\0\1\46"+
    "\10\45\1\162\17\45\13\0\2\45\1\0\1\46\26\45"+
    "\1\163\1\45\13\0\2\45\1\0\1\46\3\45\1\164"+
    "\24\45\13\0\2\45\1\0\1\46\6\45\1\165\21\45"+
    "\13\0\2\45\1\0\1\46\14\45\1\166\13\45\13\0"+
    "\2\45\1\0\1\46\22\45\1\167\5\45\13\0\2\45"+
    "\1\0\1\46\21\45\1\170\6\45\13\0\2\45\1\0"+
    "\1\46\1\171\27\45\13\0\2\45\1\0\1\46\17\45"+
    "\1\172\10\45\13\0\1\121\45\0\1\173\47\0\2\51"+
    "\1\0\1\124\17\51\1\174\10\51\13\0\2\45\1\0"+
    "\1\46\4\45\1\175\23\45\13\0\2\45\1\0\1\46"+
    "\10\45\1\176\17\45\13\0\2\45\1\0\1\46\21\45"+
    "\1\177\6\45\13\0\2\45\1\0\1\46\12\45\1\200"+
    "\15\45\13\0\2\45\1\0\1\46\17\45\1\201\10\45"+
    "\13\0\2\45\1\0\1\46\4\45\1\202\23\45\13\0"+
    "\2\45\1\0\1\46\21\45\1\203\6\45\13\0\2\45"+
    "\1\0\1\46\10\45\1\204\17\45\13\0\2\45\1\0"+
    "\1\46\13\45\1\205\14\45\13\0\2\45\1\0\1\46"+
    "\14\45\1\206\13\45\13\0\2\45\1\0\1\46\17\45"+
    "\1\207\10\45\13\0\2\45\1\0\1\46\10\45\1\210"+
    "\11\45\1\211\5\45\13\0\2\45\1\0\1\46\22\45"+
    "\1\212\5\45\13\0\2\45\1\0\1\46\17\45\1\213"+
    "\10\45\13\0\2\45\1\0\1\46\17\45\1\214\10\45"+
    "\13\0\2\45\1\0\1\46\15\45\1\215\12\45\13\0"+
    "\2\45\1\0\1\46\13\45\1\216\14\45\13\0\2\45"+
    "\1\0\1\46\1\217\27\45\13\0\2\45\1\0\1\46"+
    "\21\45\1\220\6\45\13\0\2\45\1\0\1\46\4\45"+
    "\1\221\23\45\13\0\2\45\1\0\1\46\14\45\1\222"+
    "\13\45\13\0\2\45\1\0\1\46\26\45\1\223\1\45"+
    "\13\0\2\45\1\0\1\46\2\45\1\224\25\45\13\0"+
    "\2\45\1\0\1\46\20\45\1\225\7\45\13\0\2\45"+
    "\1\0\1\46\17\45\1\226\10\45\13\0\2\45\1\0"+
    "\1\46\10\45\1\227\17\45\13\0\2\45\1\0\1\46"+
    "\7\45\1\230\20\45\13\0\2\45\1\0\1\46\13\45"+
    "\1\231\14\45\13\0\2\45\1\0\1\46\4\45\1\232"+
    "\23\45\13\0\2\45\1\0\1\46\4\45\1\233\23\45"+
    "\13\0\2\45\1\0\1\46\14\45\1\234\13\45\13\0"+
    "\2\45\1\0\1\46\22\45\1\235\5\45\13\0\2\45"+
    "\1\0\1\46\24\45\1\236\3\45\13\0\2\45\1\0"+
    "\1\46\4\45\1\237\23\45\13\0\2\45\1\0\1\46"+
    "\10\45\1\240\17\45\13\0\2\45\1\0\1\46\21\45"+
    "\1\241\6\45\13\0\2\45\1\0\1\46\10\45\1\242"+
    "\17\45\13\0\2\51\1\0\1\124\1\243\27\51\13\0"+
    "\2\45\1\0\1\46\2\45\1\244\1\45\1\245\12\45"+
    "\1\246\10\45\13\0\2\45\1\0\1\46\4\45\1\247"+
    "\23\45\13\0\2\45\1\0\1\46\1\250\27\45\13\0"+
    "\2\45\1\0\1\46\10\45\1\251\17\45\13\0\2\45"+
    "\1\0\1\46\17\45\1\252\10\45\13\0\2\45\1\0"+
    "\1\46\21\45\1\253\6\45\13\0\2\45\1\0\1\46"+
    "\1\254\27\45\13\0\2\45\1\0\1\46\3\45\1\255"+
    "\24\45\13\0\2\45\1\0\1\46\3\45\1\256\24\45"+
    "\13\0\2\45\1\0\1\46\4\45\1\257\23\45\13\0"+
    "\2\45\1\0\1\46\1\260\27\45\13\0\2\45\1\0"+
    "\1\46\4\45\1\261\23\45\13\0\2\45\1\0\1\46"+
    "\2\45\1\262\25\45\13\0\2\45\1\0\1\46\6\45"+
    "\1\263\21\45\13\0\2\45\1\0\1\46\4\45\1\264"+
    "\23\45\13\0\2\45\1\0\1\46\1\265\27\45\13\0"+
    "\2\45\1\0\1\46\2\45\1\266\25\45\13\0\2\45"+
    "\1\0\1\46\14\45\1\267\13\45\13\0\2\45\1\0"+
    "\1\46\17\45\1\270\10\45\13\0\2\45\1\0\1\46"+
    "\20\45\1\271\7\45\13\0\2\45\1\0\1\46\7\45"+
    "\1\272\20\45\13\0\2\45\1\0\1\46\21\45\1\273"+
    "\6\45\13\0\2\45\1\0\1\46\1\274\27\45\13\0"+
    "\2\45\1\0\1\46\3\45\1\275\24\45\13\0\2\45"+
    "\1\0\1\46\4\45\1\276\23\45\13\0\2\45\1\0"+
    "\1\46\20\45\1\277\7\45\13\0\2\45\1\0\1\46"+
    "\13\45\1\300\14\45\13\0\2\45\1\0\1\46\20\45"+
    "\1\301\7\45\13\0\2\45\1\0\1\46\11\45\1\302"+
    "\16\45\13\0\2\45\1\0\1\46\4\45\1\303\23\45"+
    "\13\0\2\45\1\0\1\46\1\45\1\304\26\45\13\0"+
    "\2\45\1\0\1\46\13\45\1\305\14\45\13\0\2\45"+
    "\1\0\1\46\12\45\1\306\15\45\13\0\2\45\1\0"+
    "\1\46\17\45\1\307\10\45\13\0\2\45\1\0\1\46"+
    "\14\45\1\310\13\45\13\0\2\51\1\0\1\124\13\51"+
    "\1\311\14\51\13\0\2\45\1\0\1\46\22\45\1\312"+
    "\5\45\13\0\2\45\1\0\1\46\12\45\1\313\15\45"+
    "\13\0\2\45\1\0\1\46\4\45\1\314\23\45\13\0"+
    "\2\45\1\0\1\46\13\45\1\315\14\45\13\0\2\45"+
    "\1\0\1\46\27\45\1\316\13\0\2\45\1\0\1\46"+
    "\20\45\1\317\7\45\13\0\2\45\1\0\1\46\1\320"+
    "\27\45\13\0\2\45\1\0\1\46\1\321\27\45\13\0"+
    "\2\45\1\0\1\46\14\45\1\322\13\45\13\0\2\45"+
    "\1\0\1\46\4\45\1\323\23\45\13\0\2\45\1\0"+
    "\1\46\6\45\1\324\21\45\13\0\2\45\1\0\1\46"+
    "\11\45\1\325\16\45\13\0\2\45\1\0\1\46\7\45"+
    "\1\326\20\45\13\0\2\45\1\0\1\46\17\45\1\327"+
    "\10\45\13\0\2\45\1\0\1\46\6\45\1\330\21\45"+
    "\13\0\2\45\1\0\1\46\17\45\1\331\10\45\13\0"+
    "\2\45\1\0\1\46\7\45\1\332\20\45\13\0\2\45"+
    "\1\0\1\46\17\45\1\333\10\45\13\0\2\45\1\0"+
    "\1\46\2\45\1\334\25\45\13\0\2\45\1\0\1\46"+
    "\14\45\1\335\13\45\13\0\2\45\1\0\1\46\10\45"+
    "\1\336\17\45\13\0\2\45\1\0\1\46\1\337\27\45"+
    "\13\0\2\45\1\0\1\46\1\45\1\340\26\45\13\0"+
    "\2\45\1\0\1\46\11\45\1\341\16\45\13\0\2\45"+
    "\1\0\1\46\5\45\1\342\22\45\13\0\2\45\1\0"+
    "\1\46\1\343\27\45\13\0\2\45\1\0\1\46\14\45"+
    "\1\344\13\45\13\0\2\45\1\0\1\46\14\45\1\345"+
    "\13\45\13\0\2\45\1\0\1\46\4\45\1\346\23\45"+
    "\13\0\2\45\1\0\1\46\20\45\1\347\7\45\13\0"+
    "\2\51\1\0\1\124\14\51\1\350\13\51\13\0\2\45"+
    "\1\0\1\46\4\45\1\351\23\45\13\0\2\45\1\0"+
    "\1\46\15\45\1\352\12\45\13\0\2\45\1\0\1\46"+
    "\6\45\1\353\21\45\13\0\2\45\1\0\1\46\21\45"+
    "\1\354\6\45\13\0\2\45\1\0\1\46\1\355\27\45"+
    "\13\0\2\45\1\0\1\46\21\45\1\356\6\45\13\0"+
    "\2\45\1\0\1\46\2\45\1\357\1\45\1\360\12\45"+
    "\1\361\10\45\13\0\2\45\1\0\1\46\1\362\27\45"+
    "\13\0\2\45\1\0\1\46\23\45\1\363\4\45\13\0"+
    "\2\45\1\0\1\46\1\364\27\45\13\0\2\45\1\0"+
    "\1\46\4\45\1\365\23\45\13\0\2\45\1\0\1\46"+
    "\1\366\27\45\13\0\2\45\1\0\1\46\10\45\1\367"+
    "\17\45\13\0\2\45\1\0\1\46\1\370\27\45\13\0"+
    "\2\45\1\0\1\46\17\45\1\371\10\45\13\0\2\45"+
    "\1\0\1\46\25\45\1\372\2\45\13\0\2\45\1\0"+
    "\1\46\3\45\1\373\24\45\13\0\2\45\1\0\1\46"+
    "\22\45\1\374\5\45\13\0\2\45\1\0\1\46\1\375"+
    "\27\45\13\0\2\45\1\0\1\46\14\45\1\376\13\45"+
    "\13\0\2\45\1\0\1\46\11\45\1\377\16\45\4\0"+
    "\1\u0100\6\0\2\45\1\0\1\46\30\45\13\0\2\45"+
    "\1\0\1\46\4\45\1\u0101\23\45\13\0\2\51\1\0"+
    "\1\u0102\30\51\13\0\2\45\1\0\1\46\13\45\1\u0103"+
    "\14\45\13\0\2\45\1\0\1\46\1\u0104\27\45\13\0"+
    "\2\45\1\0\1\46\1\u0105\27\45\13\0\2\45\1\0"+
    "\1\46\14\45\1\u0106\13\45\13\0\2\45\1\0\1\46"+
    "\17\45\1\u0107\10\45\13\0\2\45\1\0\1\46\1\u0108"+
    "\27\45\13\0\2\45\1\0\1\46\22\45\1\u0109\5\45"+
    "\13\0\2\45\1\0\1\46\12\45\1\u010a\15\45\13\0"+
    "\2\45\1\0\1\46\4\45\1\u010b\23\45\13\0\2\45"+
    "\1\0\1\46\4\45\1\u010c\23\45\13\0\2\45\1\0"+
    "\1\46\4\45\1\u010d\23\45\13\0\2\45\1\0\1\46"+
    "\11\45\1\u010e\16\45\13\0\2\45\1\0\1\46\1\u010f"+
    "\27\45\13\0\2\45\1\0\1\46\12\45\1\u0110\15\45"+
    "\13\0\2\45\1\0\1\46\4\45\1\u0111\23\45\13\0"+
    "\2\45\1\0\1\46\4\45\1\u0112\23\45\13\0\2\45"+
    "\1\0\1\46\11\45\1\u0113\16\45\13\0\2\45\1\0"+
    "\1\46\21\45\1\u0114\6\45\13\0\2\45\1\0\1\46"+
    "\16\45\1\u0115\11\45\13\0\2\45\1\0\1\46\11\45"+
    "\1\u0116\16\45\4\0\1\u0117\6\0\2\45\1\0\1\46"+
    "\30\45\13\0\2\45\1\0\1\46\4\45\1\u0118\23\45"+
    "\13\0\2\45\1\0\1\46\15\45\1\u0119\12\45\13\0"+
    "\2\45\1\0\1\46\6\45\1\u011a\21\45\13\0\2\45"+
    "\1\0\1\46\13\45\1\u011b\14\45\13\0\2\45\1\0"+
    "\1\46\14\45\1\u011c\13\45\13\0\2\45\1\0\1\46"+
    "\1\45\1\u011d\26\45\13\0\2\45\1\0\1\46\13\45"+
    "\1\u011e\14\45\13\0\2\45\1\0\1\46\14\45\1\u011f"+
    "\13\45\13\0\2\45\1\0\1\46\22\45\1\u0120\5\45"+
    "\13\0\2\45\1\0\1\46\14\45\1\u0121\13\45\13\0"+
    "\2\45\1\0\1\46\13\45\1\u0122\14\45\13\0\2\45"+
    "\1\0\1\46\1\u0123\27\45\13\0\2\45\1\0\1\46"+
    "\1\u0124\27\45\13\0\2\45\1\0\1\46\10\45\1\u0125"+
    "\17\45\13\0\2\45\1\0\1\46\1\u0126\27\45\13\0"+
    "\2\45\1\0\1\46\4\45\1\u0127\23\45\13\0\2\45"+
    "\1\0\1\46\21\45\1\u0128\6\45\13\0\2\45\1\0"+
    "\1\46\16\45\1\u0129\11\45\13\0\2\45\1\0\1\46"+
    "\11\45\1\u012a\16\45\13\0\2\45\1\0\1\46\14\45"+
    "\1\u012b\13\45\13\0\2\45\1\0\1\46\14\45\1\u012c"+
    "\13\45\13\0\2\45\1\0\1\46\22\45\1\u012d\5\45"+
    "\13\0\2\45\1\0\1\46\14\45\1\u012e\13\45\13\0"+
    "\2\45\1\0\1\46\4\45\1\u012f\23\45";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9594];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\1\1\1\11\30\1\1\11"+
    "\1\0\1\1\2\0\1\11\2\0\2\1\41\0\5\11"+
    "\1\1\1\0\2\11\1\1\45\0\1\11\1\1\11\0"+
    "\1\1\10\0\1\1\3\0\1\1\17\0\1\1\10\0"+
    "\1\1\3\0\1\1\10\0\1\1\2\0\1\1\3\0"+
    "\2\1\1\0\1\1\5\0\1\1\7\0\3\1\5\0"+
    "\2\1\12\0\1\1\1\0\2\1\11\0\1\1\1\0"+
    "\1\1\4\0\3\1\2\0\1\1\1\0\1\11\1\1"+
    "\1\11\3\0\2\1\4\0\1\1\2\0\1\1\2\0"+
    "\2\1\3\0\1\11\3\0\2\1\2\0\1\1\1\0"+
    "\1\1\4\0\2\1\3\0\2\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[303];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
/* Definiciones de c√≥digo Java */
StringBuffer string = new StringBuffer();

private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
}

private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BasicLexerCupV(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Error l√©xico: Token no reconocido '" + yytext() +
        "' en l√≠nea " + (yyline + 1) + ", columna " + (yycolumn + 1));
            }
          // fall through
          case 63: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 64: break;
          case 3:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 65: break;
          case 4:
            { /* Ignore single-line comments */
            }
          // fall through
          case 66: break;
          case 5:
            { return symbol(sym.COMA);
            }
          // fall through
          case 67: break;
          case 6:
            { return symbol(sym.NEGATIVO);
            }
          // fall through
          case 68: break;
          case 7:
            { try {
            if (yytext().contains(".")) {
                return symbol(sym.L_FLOAT, Double.parseDouble(yytext())); // Si es decimal
            } else {
                return symbol(sym.L_INTEGER, Integer.parseInt(yytext())); // Si es entero
            }
        } catch (NumberFormatException e) {
            System.err.println("Error l√©xico: N√∫mero mal formado '" + yytext() + "' en l√≠nea " + yyline + ", columna " + yycolumn);
        }
            }
          // fall through
          case 69: break;
          case 8:
            { string.append(yytext());
            }
          // fall through
          case 70: break;
          case 9:
            { yybegin(YYINITIAL); return symbol(sym.L_STRING, string.toString());
            }
          // fall through
          case 71: break;
          case 10:
            { System.err.println("Error l√©xico: Identificador debe iniciar con '_': '" + yytext() + "' en l√≠nea "
            + (yyline + 1) + ", columna " + (yycolumn + 1));
            }
          // fall through
          case 72: break;
          case 11:
            { System.err.println("Error l√©xico: Identificador debe terminar con '_': '" + yytext() + "' en l√≠nea "
            + (yyline + 1) + ", columna " + (yycolumn + 1));
            }
          // fall through
          case 73: break;
          case 12:
            { string.append('\"');
            }
          // fall through
          case 74: break;
          case 13:
            { string.append('\\');
            }
          // fall through
          case 75: break;
          case 14:
            { string.append('\n');
            }
          // fall through
          case 76: break;
          case 15:
            { string.append('\r');
            }
          // fall through
          case 77: break;
          case 16:
            { string.append('\t');
            }
          // fall through
          case 78: break;
          case 17:
            { System.err.println("Error l√©xico: Identificador mal formado (caracteres no v√°lidos o espacios): '" + yytext() +
            "' en l√≠nea " + (yyline + 1) + ", columna " + (yycolumn + 1));
            }
          // fall through
          case 79: break;
          case 18:
            { return symbol(sym.IDENTIFICADOR);
            }
          // fall through
          case 80: break;
          case 19:
            { /* Ignore multi-line comments */
            }
          // fall through
          case 81: break;
          case 20:
            { return symbol(sym.IF);
            }
          // fall through
          case 82: break;
          case 21:
            { return symbol(sym.ELSE);
            }
          // fall through
          case 83: break;
          case 22:
            { return symbol(sym.IGUAL);
            }
          // fall through
          case 84: break;
          case 23:
            { return symbol(sym.BREAK);
            }
          // fall through
          case 85: break;
          case 24:
            { return symbol(sym.RETURN);
            }
          // fall through
          case 86: break;
          case 25:
            { return symbol(sym.MODULO);
            }
          // fall through
          case 87: break;
          case 26:
            { return symbol(sym.PRINT);
            }
          // fall through
          case 88: break;
          case 27:
            { return symbol(sym.INCREMENTO);
            }
          // fall through
          case 89: break;
          case 28:
            { return symbol(sym.DIVISION);
            }
          // fall through
          case 90: break;
          case 29:
            { return symbol(sym.DOS_PUNTOS);
            }
          // fall through
          case 91: break;
          case 30:
            { return symbol(sym.STRING);
            }
          // fall through
          case 92: break;
          case 31:
            { return symbol(sym.CHAR);
            }
          // fall through
          case 93: break;
          case 32:
            { return symbol(sym.FOR);
            }
          // fall through
          case 94: break;
          case 33:
            { return symbol(sym.DISYUNCION);
            }
          // fall through
          case 95: break;
          case 34:
            { return symbol(sym.DECREMENTO);
            }
          // fall through
          case 96: break;
          case 35:
            { return symbol(sym.DEFAULT);
            }
          // fall through
          case 97: break;
          case 36:
            { return symbol(sym.SWITCH);
            }
          // fall through
          case 98: break;
          case 37:
            { return symbol(sym.ASIGNA);
            }
          // fall through
          case 99: break;
          case 38:
            { return symbol(sym.READ);
            }
          // fall through
          case 100: break;
          case 39:
            { return symbol(sym.CONJUNCION);
            }
          // fall through
          case 101: break;
          case 40:
            { return symbol(sym.MAYOR);
            }
          // fall through
          case 102: break;
          case 41:
            { return symbol(sym.SUMA);
            }
          // fall through
          case 103: break;
          case 42:
            { return symbol(sym.INTEGER);
            }
          // fall through
          case 104: break;
          case 43:
            { return symbol(sym.BOOL);
            }
          // fall through
          case 105: break;
          case 44:
            { return symbol(sym.MAYOR_IGUAL);
            }
          // fall through
          case 106: break;
          case 45:
            { return symbol(sym.MAIN);
            }
          // fall through
          case 107: break;
          case 46:
            { return symbol(sym.POTENCIA);
            }
          // fall through
          case 108: break;
          case 47:
            { return symbol(sym.NEGACION);
            }
          // fall through
          case 109: break;
          case 48:
            { return symbol(sym.WHILE);
            }
          // fall through
          case 110: break;
          case 49:
            { return symbol(sym.CASE);
            }
          // fall through
          case 111: break;
          case 50:
            { return symbol(sym.DIFERENTE);
            }
          // fall through
          case 112: break;
          case 51:
            { return symbol(sym.MENOR);
            }
          // fall through
          case 113: break;
          case 52:
            { return symbol(sym.FLOAT);
            }
          // fall through
          case 114: break;
          case 53:
            { return symbol(sym.MENOR_IGUAL);
            }
          // fall through
          case 115: break;
          case 54:
            { return symbol(sym.FIN_EXPRESION);
            }
          // fall through
          case 116: break;
          case 55:
            { return symbol(sym.ABRECUENTO);
            }
          // fall through
          case 117: break;
          case 56:
            { return symbol(sym.PARENTESISAPERTURA);
            }
          // fall through
          case 118: break;
          case 57:
            { return symbol(sym.MULTIPLICACION);
            }
          // fall through
          case 119: break;
          case 58:
            { return symbol(sym.ABREEMPAQUE);
            }
          // fall through
          case 120: break;
          case 59:
            { return symbol(sym.RESTA);
            }
          // fall through
          case 121: break;
          case 60:
            { return symbol(sym.CIERRACUENTO);
            }
          // fall through
          case 122: break;
          case 61:
            { return symbol(sym.PARENTESISCIERRE);
            }
          // fall through
          case 123: break;
          case 62:
            { return symbol(sym.CIERREEMPAQUE);
            }
          // fall through
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
