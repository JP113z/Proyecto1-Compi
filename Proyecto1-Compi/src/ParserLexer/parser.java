
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\064\002\000\002\002" +
    "\005\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\004\005\000\002\004\003\000\002\061\005" +
    "\000\002\061\004\000\002\061\005\000\002\061\003\000" +
    "\002\005\004\000\002\005\004\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\003\000\002\013\004\000\002\013\003\000" +
    "\002\014\006\000\002\014\006\000\002\014\005\000\002" +
    "\014\006\000\002\014\004\000\002\014\006\000\002\014" +
    "\006\000\002\015\003\000\002\015\004\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\003\000\002\017\004\000\002" +
    "\065\002\000\002\020\006\000\002\060\004\000\002\060" +
    "\004\000\002\060\003\000\002\021\006\000\002\021\006" +
    "\000\002\021\005\000\002\021\006\000\002\021\006\000" +
    "\002\063\005\000\002\063\005\000\002\066\002\000\002" +
    "\024\005\000\002\067\002\000\002\024\006\000\002\024" +
    "\003\000\002\023\003\000\002\070\002\000\002\023\006" +
    "\000\002\004\005\000\002\061\005\000\002\071\002\000" +
    "\002\025\006\000\002\072\002\000\002\025\006\000\002" +
    "\073\002\000\002\026\010\000\002\026\003\000\002\074" +
    "\002\000\002\027\006\000\002\030\003\000\002\030\004" +
    "\000\002\031\003\000\002\033\004\000\002\033\005\000" +
    "\002\032\003\000\002\075\002\000\002\032\006\000\002" +
    "\004\005\000\002\076\002\000\002\034\006\000\002\077" +
    "\002\000\002\034\006\000\002\035\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\037\005\000\002" +
    "\040\003\000\002\040\003\000\002\041\004\000\002\100" +
    "\002\000\002\041\005\000\002\042\005\000\002\043\003" +
    "\000\002\043\003\000\002\043\004\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\101\002\000\002" +
    "\043\006\000\002\044\003\000\002\044\003\000\002\045" +
    "\003\000\002\045\004\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\004\000\002\047\007\000\002" +
    "\047\011\000\002\050\011\000\002\062\007\000\002\051" +
    "\005\000\002\051\006\000\002\102\002\000\002\052\012" +
    "\000\002\053\003\000\002\053\004\000\002\054\006\000" +
    "\002\054\005\000\002\022\005\000\002\022\004\000\002" +
    "\055\004\000\002\056\006\000\002\056\006\000\002\056" +
    "\006\000\002\056\004\000\002\056\006\000\002\057\006" +
    "\000\002\057\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\006\003\004\016\005\001\002\000\004\002" +
    "\ufffe\001\002\000\020\003\000\020\000\021\000\022\000" +
    "\023\000\024\000\025\000\001\002\000\004\002\007\001" +
    "\002\000\004\002\001\001\002\000\020\003\017\020\012" +
    "\021\016\022\022\023\023\024\013\025\021\001\002\000" +
    "\006\003\uffce\011\uffce\001\002\000\006\003\ufffd\025\ufffd" +
    "\001\002\000\006\003\ufff9\025\ufff9\001\002\000\022\002" +
    "\uffd0\003\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\001\002\000\004\025\026\001\002\000\006\003" +
    "\ufffc\025\ufffc\001\002\000\006\003\uffca\011\uffca\001\002" +
    "\000\022\002\uffff\003\017\020\012\021\016\022\022\023" +
    "\023\024\013\025\021\001\002\000\004\003\024\001\002" +
    "\000\006\003\ufffb\025\ufffb\001\002\000\006\003\ufffa\025" +
    "\ufffa\001\002\000\006\003\uffcb\011\uffcb\001\002\000\022" +
    "\002\uffcf\003\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\001\002\000\006\003\uffcc\011\uffcc\001\002" +
    "\000\006\003\032\011\030\001\002\000\016\012\uffc2\020" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\001\002\000\004" +
    "\004\033\001\002\000\004\004\uffbe\001\002\000\070\003" +
    "\062\005\056\010\052\011\072\014\114\015\077\020\037" +
    "\021\016\022\022\023\103\024\013\025\045\030\053\031" +
    "\036\032\111\033\117\034\065\035\074\040\044\052\054" +
    "\054\100\055\042\056\073\061\070\062\060\065\116\070" +
    "\046\001\002\000\022\002\uffcd\003\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\001\002\000\066\003" +
    "\uff83\005\uff83\011\uff83\020\uff83\021\uff83\022\uff83\023\uff83" +
    "\024\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035" +
    "\uff83\040\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83" +
    "\057\uff83\060\uff83\061\uff83\062\uff83\065\uff83\070\uff83\001" +
    "\002\000\006\020\uffa0\023\uffa0\001\002\000\046\003\ufffd" +
    "\012\uff8c\013\uff8c\025\ufffd\030\uff8c\031\uff8c\032\uff8c\033" +
    "\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\041\uff8c\042\uff8c" +
    "\043\uff8c\044\uff8c\045\uff8c\046\uff8c\001\002\000\004\013" +
    "\376\001\002\000\066\003\uff85\005\uff85\011\uff85\020\uff85" +
    "\021\uff85\022\uff85\023\uff85\024\uff85\030\uff85\031\uff85\032" +
    "\uff85\033\uff85\034\uff85\035\uff85\040\uff85\052\uff85\053\uff85" +
    "\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061\uff85\062" +
    "\uff85\065\uff85\070\uff85\001\002\000\004\011\364\001\002" +
    "\000\004\010\361\001\002\000\006\020\uff97\023\uff97\001" +
    "\002\000\006\006\354\010\uffa2\001\002\000\004\006\236" +
    "\001\002\000\076\003\uffd5\005\uffd5\010\uffd5\011\uffd5\014" +
    "\uffd5\015\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\040\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5" +
    "\057\uffd5\060\uffd5\061\uffd5\062\uffd5\065\uffd5\070\uffd5\001" +
    "\002\000\066\003\uff84\005\uff84\011\uff84\020\uff84\021\uff84" +
    "\022\uff84\023\uff84\024\uff84\030\uff84\031\uff84\032\uff84\033" +
    "\uff84\034\uff84\035\uff84\040\uff84\052\uff84\053\uff84\054\uff84" +
    "\055\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062\uff84\065" +
    "\uff84\070\uff84\001\002\000\076\003\uffd1\005\uffd1\010\uffd1" +
    "\011\uffd1\014\uffd1\015\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\040\uffd1\052\uffd1\053\uffd1\054\uffd1\055" +
    "\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\065\uffd1" +
    "\070\uffd1\001\002\000\016\026\134\027\137\065\141\066" +
    "\136\067\133\070\131\001\002\000\006\020\uffa1\023\uffa1" +
    "\001\002\000\004\011\343\001\002\000\032\003\337\005" +
    "\340\010\052\014\114\015\077\020\012\021\016\022\022" +
    "\023\023\024\013\025\045\062\147\001\002\000\004\003" +
    "\333\001\002\000\006\012\uff8f\013\uff8f\001\002\000\010" +
    "\013\330\020\157\023\160\001\002\000\066\003\uff88\005" +
    "\uff88\011\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88" +
    "\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88\040" +
    "\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057\uff88" +
    "\060\uff88\061\uff88\062\uff88\065\uff88\070\uff88\001\002\000" +
    "\050\003\uffdf\005\uffdf\010\uffdf\013\ufff0\014\uffdf\015\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\041" +
    "\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\062\uffdf" +
    "\001\002\000\016\041\163\042\172\043\166\044\165\045" +
    "\167\046\171\001\002\000\076\003\uffd3\005\uffd3\010\uffd3" +
    "\011\uffd3\014\uffd3\015\uffd3\020\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\025\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\040\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\065\uffd3" +
    "\070\uffd3\001\002\000\006\020\uff9d\023\uff9d\001\002\000" +
    "\042\012\uff93\013\uff93\030\053\031\036\032\111\033\117" +
    "\034\065\035\074\036\324\037\325\041\163\042\172\043" +
    "\166\044\165\045\167\046\171\001\002\000\066\003\uff87" +
    "\005\uff87\011\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024" +
    "\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035\uff87" +
    "\040\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057" +
    "\uff87\060\uff87\061\uff87\062\uff87\065\uff87\070\uff87\001\002" +
    "\000\004\013\320\001\002\000\066\003\uff86\005\uff86\011" +
    "\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86\030\uff86" +
    "\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86\040\uff86\052" +
    "\uff86\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86" +
    "\061\uff86\062\uff86\065\uff86\070\uff86\001\002\000\042\003" +
    "\uff8e\011\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e" +
    "\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\040" +
    "\uff8e\065\uff8e\070\uff8e\001\002\000\004\011\273\001\002" +
    "\000\006\020\uff9c\023\uff9c\001\002\000\076\003\uffd4\005" +
    "\uffd4\010\uffd4\011\uffd4\014\uffd4\015\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\040\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\065\uffd4\070\uffd4\001\002\000\004\010\270\001\002" +
    "\000\004\011\263\001\002\000\004\011\252\001\002\000" +
    "\004\025\245\001\002\000\024\003\170\010\173\013\162" +
    "\041\163\042\172\043\166\044\165\045\167\046\171\001" +
    "\002\000\046\003\ufffa\012\uff8b\013\uff8b\025\ufffa\030\uff8b" +
    "\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037" +
    "\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b" +
    "\001\002\000\032\003\uffd7\005\uffd7\010\uffd7\014\uffd7\015" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\062\uffd7\001\002\000\006\012\uff90\013\uff90\001\002\000" +
    "\076\003\uffd2\005\uffd2\010\uffd2\011\uffd2\014\uffd2\015\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\040\uffd2" +
    "\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060" +
    "\uffd2\061\uffd2\062\uffd2\065\uffd2\070\uffd2\001\002\000\006" +
    "\020\157\023\160\001\002\000\006\012\uff94\013\uff94\001" +
    "\002\000\006\020\uff9f\023\uff9f\001\002\000\006\005\150" +
    "\062\147\001\002\000\006\003\145\025\146\001\002\000" +
    "\010\003\124\011\123\025\126\001\002\000\006\012\uff91" +
    "\013\uff91\001\002\000\004\006\120\001\002\000\006\020" +
    "\uff9e\023\uff9e\001\002\000\004\007\uffb6\001\002\000\004" +
    "\007\122\001\002\000\004\025\uffb5\001\002\000\020\025" +
    "\126\026\134\027\137\065\141\066\136\067\133\070\131" +
    "\001\002\000\076\003\uff6f\005\uff6f\010\uff6f\011\uff6f\014" +
    "\uff6f\015\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f" +
    "\025\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f\035" +
    "\uff6f\040\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f" +
    "\057\uff6f\060\uff6f\061\uff6f\062\uff6f\065\uff6f\070\uff6f\001" +
    "\002\000\004\012\127\001\002\000\102\003\uffa2\005\uffa2" +
    "\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\020" +
    "\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\030\uffa2" +
    "\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\040\uffa2\052" +
    "\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2" +
    "\061\uffa2\062\uffa2\065\uffa2\070\uffa2\001\002\000\004\003" +
    "\130\001\002\000\076\003\uff6e\005\uff6e\010\uff6e\011\uff6e" +
    "\014\uff6e\015\uff6e\020\uff6e\021\uff6e\022\uff6e\023\uff6e\024" +
    "\uff6e\025\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e\034\uff6e" +
    "\035\uff6e\040\uff6e\052\uff6e\053\uff6e\054\uff6e\055\uff6e\056" +
    "\uff6e\057\uff6e\060\uff6e\061\uff6e\062\uff6e\065\uff6e\070\uff6e" +
    "\001\002\000\102\003\ufff5\005\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\030\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\040\ufff5\052\ufff5\053\ufff5\054\ufff5" +
    "\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\065" +
    "\ufff5\070\ufff5\001\002\000\102\003\ufff4\005\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\035\ufff4\040\ufff4\052\ufff4\053" +
    "\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4" +
    "\062\ufff4\065\ufff4\070\ufff4\001\002\000\102\003\ufff6\005" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\040\ufff6" +
    "\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060" +
    "\ufff6\061\ufff6\062\ufff6\065\ufff6\070\ufff6\001\002\000\102" +
    "\003\ufff3\005\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\040\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3" +
    "\057\ufff3\060\ufff3\061\ufff3\062\ufff3\065\ufff3\070\ufff3\001" +
    "\002\000\006\003\143\012\144\001\002\000\102\003\ufff7" +
    "\005\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\040" +
    "\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7" +
    "\060\ufff7\061\ufff7\062\ufff7\065\ufff7\070\ufff7\001\002\000" +
    "\102\003\ufff2\005\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\040\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056" +
    "\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\065\ufff2\070\ufff2" +
    "\001\002\000\004\012\142\001\002\000\102\003\ufff8\005" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\030" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\040\ufff8" +
    "\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060" +
    "\ufff8\061\ufff8\062\ufff8\065\ufff8\070\ufff8\001\002\000\076" +
    "\003\uff72\005\uff72\010\uff72\011\uff72\014\uff72\015\uff72\020" +
    "\uff72\021\uff72\022\uff72\023\uff72\024\uff72\025\uff72\030\uff72" +
    "\031\uff72\032\uff72\033\uff72\034\uff72\035\uff72\040\uff72\052" +
    "\uff72\053\uff72\054\uff72\055\uff72\056\uff72\057\uff72\060\uff72" +
    "\061\uff72\062\uff72\065\uff72\070\uff72\001\002\000\076\003" +
    "\uff70\005\uff70\010\uff70\011\uff70\014\uff70\015\uff70\020\uff70" +
    "\021\uff70\022\uff70\023\uff70\024\uff70\025\uff70\030\uff70\031" +
    "\uff70\032\uff70\033\uff70\034\uff70\035\uff70\040\uff70\052\uff70" +
    "\053\uff70\054\uff70\055\uff70\056\uff70\057\uff70\060\uff70\061" +
    "\uff70\062\uff70\065\uff70\070\uff70\001\002\000\076\003\uff71" +
    "\005\uff71\010\uff71\011\uff71\014\uff71\015\uff71\020\uff71\021" +
    "\uff71\022\uff71\023\uff71\024\uff71\025\uff71\030\uff71\031\uff71" +
    "\032\uff71\033\uff71\034\uff71\035\uff71\040\uff71\052\uff71\053" +
    "\uff71\054\uff71\055\uff71\056\uff71\057\uff71\060\uff71\061\uff71" +
    "\062\uff71\065\uff71\070\uff71\001\002\000\036\003\uffea\005" +
    "\uffea\010\uffea\012\uffea\013\uffea\017\uffea\041\uffea\042\uffea" +
    "\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\001" +
    "\002\000\036\003\uffeb\005\uffeb\010\uffeb\012\uffeb\013\uffeb" +
    "\017\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\001\002\000\016\026\134\027\137" +
    "\065\141\066\136\067\133\070\131\001\002\000\004\003" +
    "\153\001\002\000\004\005\152\001\002\000\022\002\uffc8" +
    "\003\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\001\002\000\022\002\uffc5\003\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\001\002\000\006\003" +
    "\155\013\156\001\002\000\004\005\uffc3\001\002\000\004" +
    "\005\uffc4\001\002\000\012\012\uff8c\013\uff8c\063\uff8c\064" +
    "\uff8c\001\002\000\012\012\uff8b\013\uff8b\063\uff8b\064\uff8b" +
    "\001\002\000\006\012\uff92\013\uff92\001\002\000\076\003" +
    "\uffe0\005\uffe0\010\uffe0\011\uffe0\014\uffe0\015\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\040\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061" +
    "\uffe0\062\uffe0\065\uffe0\070\uffe0\001\002\000\026\004\uffe9" +
    "\020\uffe9\023\uffe9\025\uffe9\026\uffe9\027\uffe9\065\uffe9\066" +
    "\uffe9\067\uffe9\070\uffe9\001\002\000\020\025\126\026\134" +
    "\027\137\065\141\066\136\067\133\070\131\001\002\000" +
    "\026\004\uffe6\020\uffe6\023\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\065\uffe6\066\uffe6\067\uffe6\070\uffe6\001\002\000\026\004" +
    "\uffe7\020\uffe7\023\uffe7\025\uffe7\026\uffe7\027\uffe7\065\uffe7" +
    "\066\uffe7\067\uffe7\070\uffe7\001\002\000\026\004\uffe5\020" +
    "\uffe5\023\uffe5\025\uffe5\026\uffe5\027\uffe5\065\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\001\002\000\076\003\uffda\005\uffda\010" +
    "\uffda\011\uffda\014\uffda\015\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\040\uffda\052\uffda\053\uffda\054\uffda" +
    "\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\065" +
    "\uffda\070\uffda\001\002\000\026\004\uffe4\020\uffe4\023\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\065\uffe4\066\uffe4\067\uffe4\070" +
    "\uffe4\001\002\000\026\004\uffe8\020\uffe8\023\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\001" +
    "\002\000\056\003\177\011\072\020\037\021\016\022\022" +
    "\023\103\024\013\025\175\026\134\027\137\030\053\031" +
    "\036\032\111\033\117\034\065\035\074\040\044\051\202" +
    "\065\206\066\136\067\133\070\176\001\002\000\004\013" +
    "\242\001\002\000\004\013\241\001\002\000\010\003\ufff5" +
    "\006\236\013\ufff5\001\002\000\120\003\uffec\005\uffec\010" +
    "\uffec\011\uffec\013\ufff0\014\uffec\015\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\030\uffec\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\040\uffec\041\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\052" +
    "\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec" +
    "\061\uffec\062\uffec\065\uffec\070\uffec\001\002\000\022\041" +
    "\163\042\172\043\166\044\165\045\167\046\171\047\211" +
    "\050\210\001\002\000\076\003\uffdc\005\uffdc\010\uffdc\011" +
    "\uffdc\014\uffdc\015\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\040\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\065\uffdc\070" +
    "\uffdc\001\002\000\016\026\uffe1\027\uffe1\065\uffe1\066\uffe1" +
    "\067\uffe1\070\uffe1\001\002\000\016\026\134\027\137\065" +
    "\141\066\136\067\133\070\131\001\002\000\006\003\214" +
    "\013\215\001\002\000\022\041\163\042\172\043\166\044" +
    "\165\045\167\046\171\047\211\050\210\001\002\000\010" +
    "\003\ufff8\006\120\013\ufff8\001\002\000\020\025\126\026" +
    "\134\027\137\065\141\066\136\067\133\070\131\001\002" +
    "\000\024\004\uffe2\012\uffe2\025\uffe2\026\uffe2\027\uffe2\065" +
    "\uffe2\066\uffe2\067\uffe2\070\uffe2\001\002\000\024\004\uffe3" +
    "\012\uffe3\025\uffe3\026\uffe3\027\uffe3\065\uffe3\066\uffe3\067" +
    "\uffe3\070\uffe3\001\002\000\100\003\uffed\005\uffed\010\uffed" +
    "\011\uffed\012\uffed\014\uffed\015\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\030\uffed\031\uffed\032\uffed" +
    "\033\uffed\034\uffed\035\uffed\040\uffed\052\uffed\053\uffed\054" +
    "\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed" +
    "\065\uffed\070\uffed\001\002\000\100\003\uffef\005\uffef\010" +
    "\uffef\011\uffef\012\uffef\014\uffef\015\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\030\uffef\031\uffef\032" +
    "\uffef\033\uffef\034\uffef\035\uffef\040\uffef\052\uffef\053\uffef" +
    "\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062" +
    "\uffef\065\uffef\070\uffef\001\002\000\076\003\uffd8\005\uffd8" +
    "\010\uffd8\011\uffd8\014\uffd8\015\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\040\uffd8\052\uffd8\053\uffd8\054" +
    "\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8" +
    "\065\uffd8\070\uffd8\001\002\000\076\003\uffde\005\uffde\010" +
    "\uffde\011\uffde\014\uffde\015\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\040\uffde\052\uffde\053\uffde\054\uffde" +
    "\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\065" +
    "\uffde\070\uffde\001\002\000\100\003\uffee\005\uffee\010\uffee" +
    "\011\uffee\012\uffee\014\uffee\015\uffee\020\uffee\021\uffee\022" +
    "\uffee\023\uffee\024\uffee\025\uffee\030\uffee\031\uffee\032\uffee" +
    "\033\uffee\034\uffee\035\uffee\040\uffee\052\uffee\053\uffee\054" +
    "\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee" +
    "\065\uffee\070\uffee\001\002\000\004\004\223\001\002\000" +
    "\004\004\223\001\002\000\102\003\uffb9\004\223\005\uffb9" +
    "\010\uffb9\011\uffb9\012\uffb9\014\uffb9\015\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\035\uffb9\040\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\065\uffb9\070\uffb9\001\002\000\104\003\uffad\004" +
    "\uffad\005\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad" +
    "\015\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad" +
    "\040\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057" +
    "\uffad\060\uffad\061\uffad\062\uffad\065\uffad\070\uffad\001\002" +
    "\000\016\005\227\020\012\021\016\022\022\023\023\024" +
    "\013\001\002\000\104\003\uffaf\004\uffaf\005\uffaf\010\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\020\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\040\uffaf\052\uffaf\053" +
    "\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\062\uffaf\065\uffaf\070\uffaf\001\002\000\006\005\uffaa\017" +
    "\uffaa\001\002\000\006\005\231\017\230\001\002\000\104" +
    "\003\uffac\004\uffac\005\uffac\010\uffac\011\uffac\012\uffac\013" +
    "\uffac\014\uffac\015\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034" +
    "\uffac\035\uffac\040\uffac\052\uffac\053\uffac\054\uffac\055\uffac" +
    "\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\065\uffac\070" +
    "\uffac\001\002\000\014\020\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\001\002\000\104\003\uffab\004\uffab\005\uffab\010" +
    "\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\020\uffab" +
    "\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\030\uffab\031" +
    "\uffab\032\uffab\033\uffab\034\uffab\035\uffab\040\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061" +
    "\uffab\062\uffab\065\uffab\070\uffab\001\002\000\014\020\012" +
    "\021\016\022\022\023\023\024\013\001\002\000\006\005" +
    "\uffa8\017\uffa8\001\002\000\104\003\uffae\004\uffae\005\uffae" +
    "\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\020" +
    "\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\040\uffae\052" +
    "\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae" +
    "\061\uffae\062\uffae\065\uffae\070\uffae\001\002\000\010\004" +
    "\223\012\uffba\013\uffba\001\002\000\004\007\uffb8\001\002" +
    "\000\004\007\240\001\002\000\004\025\uffb7\001\002\000" +
    "\076\003\uffdb\005\uffdb\010\uffdb\011\uffdb\014\uffdb\015\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\040\uffdb" +
    "\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\062\uffdb\065\uffdb\070\uffdb\001\002\000\076" +
    "\003\uffdd\005\uffdd\010\uffdd\011\uffdd\014\uffdd\015\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\040\uffdd\052" +
    "\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd" +
    "\061\uffdd\062\uffdd\065\uffdd\070\uffdd\001\002\000\006\012" +
    "\uffa7\013\uffa7\001\002\000\006\012\ufff1\013\ufff1\001\002" +
    "\000\004\006\uffb4\001\002\000\004\006\247\001\002\000" +
    "\004\025\250\001\002\000\004\007\251\001\002\000\022" +
    "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\001\002\000\024\003\255\020\012\021\016" +
    "\022\022\023\023\024\013\051\202\065\116\070\046\001" +
    "\002\000\004\012\257\001\002\000\006\047\211\050\210" +
    "\001\002\000\010\012\uffec\047\uffb2\050\uffb2\001\002\000" +
    "\006\047\211\050\210\001\002\000\056\003\260\011\072" +
    "\020\037\021\016\022\022\023\103\024\013\030\053\031" +
    "\036\032\111\033\117\034\065\035\074\040\044\052\054" +
    "\054\100\055\042\056\073\061\070\062\060\065\116\070" +
    "\046\001\002\000\022\012\ufff0\013\ufff0\041\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\046\uffb2\001\002\000\016\041" +
    "\163\042\172\043\166\044\165\045\167\046\171\001\002" +
    "\000\066\003\uff7e\005\uff7e\011\uff7e\020\uff7e\021\uff7e\022" +
    "\uff7e\023\uff7e\024\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e" +
    "\034\uff7e\035\uff7e\040\uff7e\052\uff7e\053\uff7e\054\uff7e\055" +
    "\uff7e\056\uff7e\057\uff7e\060\uff7e\061\uff7e\062\uff7e\065\uff7e" +
    "\070\uff7e\001\002\000\010\012\264\020\157\023\160\001" +
    "\002\000\004\003\267\001\002\000\004\012\266\001\002" +
    "\000\076\003\uff6d\005\uff6d\010\uff6d\011\uff6d\014\uff6d\015" +
    "\uff6d\020\uff6d\021\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d" +
    "\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\040" +
    "\uff6d\052\uff6d\053\uff6d\054\uff6d\055\uff6d\056\uff6d\057\uff6d" +
    "\060\uff6d\061\uff6d\062\uff6d\065\uff6d\070\uff6d\001\002\000" +
    "\076\003\uff6c\005\uff6c\010\uff6c\011\uff6c\014\uff6c\015\uff6c" +
    "\020\uff6c\021\uff6c\022\uff6c\023\uff6c\024\uff6c\025\uff6c\030" +
    "\uff6c\031\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c\040\uff6c" +
    "\052\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c\060" +
    "\uff6c\061\uff6c\062\uff6c\065\uff6c\070\uff6c\001\002\000\016" +
    "\026\uffa6\027\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\001" +
    "\002\000\016\026\134\027\137\065\141\066\136\067\133" +
    "\070\131\001\002\000\076\003\uffa5\005\uffa5\010\uffa5\011" +
    "\uffa5\014\uffa5\015\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5" +
    "\024\uffa5\025\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\040\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\065\uffa5\070" +
    "\uffa5\001\002\000\004\025\126\001\002\000\004\012\275" +
    "\001\002\000\004\004\uff7b\001\002\000\004\004\277\001" +
    "\002\000\006\057\301\060\300\001\002\000\004\063\313" +
    "\001\002\000\006\020\157\023\160\001\002\000\010\005" +
    "\uff79\057\uff79\060\uff79\001\002\000\010\005\304\057\301" +
    "\060\300\001\002\000\066\003\uff7a\005\uff7a\011\uff7a\020" +
    "\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\030\uff7a\031\uff7a" +
    "\032\uff7a\033\uff7a\034\uff7a\035\uff7a\040\uff7a\052\uff7a\053" +
    "\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a" +
    "\062\uff7a\065\uff7a\070\uff7a\001\002\000\010\005\uff78\057" +
    "\uff78\060\uff78\001\002\000\004\063\307\001\002\000\056" +
    "\003\260\011\072\020\037\021\016\022\022\023\103\024" +
    "\013\030\053\031\036\032\111\033\117\034\065\035\074" +
    "\040\044\052\054\054\100\055\042\056\073\061\070\062" +
    "\060\065\116\070\046\001\002\000\064\003\260\005\uff77" +
    "\011\072\020\037\021\016\022\022\023\103\024\013\030" +
    "\053\031\036\032\111\033\117\034\065\035\074\040\044" +
    "\052\054\054\100\055\042\056\073\057\uff77\060\uff77\061" +
    "\070\062\060\065\116\070\046\001\002\000\064\003\uff8a" +
    "\005\uff8a\011\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024" +
    "\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a" +
    "\040\uff8a\052\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060" +
    "\uff8a\061\uff8a\062\uff8a\065\uff8a\070\uff8a\001\002\000\064" +
    "\003\uff89\005\uff89\011\uff89\020\uff89\021\uff89\022\uff89\023" +
    "\uff89\024\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89" +
    "\035\uff89\040\uff89\052\uff89\054\uff89\055\uff89\056\uff89\057" +
    "\uff89\060\uff89\061\uff89\062\uff89\065\uff89\070\uff89\001\002" +
    "\000\056\003\260\011\072\020\037\021\016\022\022\023" +
    "\103\024\013\030\053\031\036\032\111\033\117\034\065" +
    "\035\074\040\044\052\054\054\100\055\042\056\073\061" +
    "\070\062\060\065\116\070\046\001\002\000\064\003\260" +
    "\005\uff76\011\072\020\037\021\016\022\022\023\103\024" +
    "\013\030\053\031\036\032\111\033\117\034\065\035\074" +
    "\040\044\052\054\054\100\055\042\056\073\057\uff76\060" +
    "\uff76\061\070\062\060\065\116\070\046\001\002\000\042" +
    "\003\260\011\072\020\037\021\016\022\022\023\103\024" +
    "\013\030\053\031\036\032\111\033\117\034\065\035\074" +
    "\040\044\065\116\070\046\001\002\000\004\012\317\001" +
    "\002\000\006\012\uff8d\013\uff8d\001\002\000\066\003\uff73" +
    "\005\uff73\011\uff73\020\uff73\021\uff73\022\uff73\023\uff73\024" +
    "\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73" +
    "\040\uff73\052\uff73\053\uff73\054\uff73\055\uff73\056\uff73\057" +
    "\uff73\060\uff73\061\uff73\062\uff73\065\uff73\070\uff73\001\002" +
    "\000\006\020\157\023\160\001\002\000\006\012\uff98\013" +
    "\uff98\001\002\000\006\020\157\023\160\001\002\000\006" +
    "\012\uff9a\013\uff9a\001\002\000\006\012\uff99\013\uff99\001" +
    "\002\000\006\012\uff9b\013\uff9b\001\002\000\006\012\uff95" +
    "\013\uff95\001\002\000\066\003\uff74\005\uff74\011\uff74\020" +
    "\uff74\021\uff74\022\uff74\023\uff74\024\uff74\030\uff74\031\uff74" +
    "\032\uff74\033\uff74\034\uff74\035\uff74\040\uff74\052\uff74\053" +
    "\uff74\054\uff74\055\uff74\056\uff74\057\uff74\060\uff74\061\uff74" +
    "\062\uff74\065\uff74\070\uff74\001\002\000\004\013\332\001" +
    "\002\000\066\003\uff75\005\uff75\011\uff75\020\uff75\021\uff75" +
    "\022\uff75\023\uff75\024\uff75\030\uff75\031\uff75\032\uff75\033" +
    "\uff75\034\uff75\035\uff75\040\uff75\052\uff75\053\uff75\054\uff75" +
    "\055\uff75\056\uff75\057\uff75\060\uff75\061\uff75\062\uff75\065" +
    "\uff75\070\uff75\001\002\000\022\002\uffc7\003\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\001\002\000" +
    "\010\003\170\010\173\013\162\001\002\000\004\005\342" +
    "\001\002\000\032\003\uffd6\005\uffd6\010\uffd6\014\uffd6\015" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\062\uffd6\001\002\000\076\003\uffdf\005\uffdf\010\uffdf\011" +
    "\uffdf\014\uffdf\015\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\040\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\065\uffdf\070" +
    "\uffdf\001\002\000\004\003\341\001\002\000\022\002\uffc6" +
    "\003\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\001\002\000\022\002\uffc9\003\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\001\002\000\006\047" +
    "\211\050\210\001\002\000\004\012\345\001\002\000\056" +
    "\003\260\011\072\020\037\021\016\022\022\023\103\024" +
    "\013\030\053\031\036\032\111\033\117\034\065\035\074" +
    "\040\044\052\054\054\100\055\042\056\073\061\070\062" +
    "\060\065\116\070\046\001\002\000\066\003\uff81\005\uff81" +
    "\011\uff81\020\uff81\021\uff81\022\uff81\023\uff81\024\uff81\030" +
    "\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81\040\uff81" +
    "\052\uff81\053\347\054\uff81\055\uff81\056\uff81\057\uff81\060" +
    "\uff81\061\uff81\062\uff81\065\uff81\070\uff81\001\002\000\056" +
    "\003\260\011\072\020\037\021\016\022\022\023\103\024" +
    "\013\030\053\031\036\032\111\033\117\034\065\035\074" +
    "\040\044\052\054\054\100\055\042\056\073\061\070\062" +
    "\060\065\116\070\046\001\002\000\066\003\uff80\005\uff80" +
    "\011\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\030" +
    "\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80\040\uff80" +
    "\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80\060" +
    "\uff80\061\uff80\062\uff80\065\uff80\070\uff80\001\002\000\004" +
    "\013\352\001\002\000\004\003\353\001\002\000\076\003" +
    "\uffd9\005\uffd9\010\uffd9\011\uffd9\014\uffd9\015\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\040\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061" +
    "\uffd9\062\uffd9\065\uffd9\070\uffd9\001\002\000\004\007\uffb1" +
    "\001\002\000\004\007\356\001\002\000\004\010\uffb0\001" +
    "\002\000\006\020\157\023\160\001\002\000\006\012\uff96" +
    "\013\uff96\001\002\000\016\026\uffa4\027\uffa4\065\uffa4\066" +
    "\uffa4\067\uffa4\070\uffa4\001\002\000\016\026\134\027\137" +
    "\065\141\066\136\067\133\070\131\001\002\000\076\003" +
    "\uffa3\005\uffa3\010\uffa3\011\uffa3\014\uffa3\015\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\030\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\040\uffa3\052\uffa3" +
    "\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061" +
    "\uffa3\062\uffa3\065\uffa3\070\uffa3\001\002\000\004\025\365" +
    "\001\002\000\004\063\366\001\002\000\006\020\157\023" +
    "\160\001\002\000\004\012\374\001\002\000\004\064\371" +
    "\001\002\000\006\020\157\023\160\001\002\000\006\012" +
    "\uff7d\064\373\001\002\000\004\012\uff7c\001\002\000\026" +
    "\003\337\010\052\014\114\015\077\020\012\021\016\022" +
    "\022\023\023\024\013\025\045\001\002\000\066\003\uff7f" +
    "\005\uff7f\011\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024" +
    "\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f" +
    "\040\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f\057" +
    "\uff7f\060\uff7f\061\uff7f\062\uff7f\065\uff7f\070\uff7f\001\002" +
    "\000\066\003\uff82\005\uff82\011\uff82\020\uff82\021\uff82\022" +
    "\uff82\023\uff82\024\uff82\030\uff82\031\uff82\032\uff82\033\uff82" +
    "\034\uff82\035\uff82\040\uff82\052\uff82\053\uff82\054\uff82\055" +
    "\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82\065\uff82" +
    "\070\uff82\001\002\000\014\020\012\021\016\022\022\023" +
    "\023\024\013\001\002\000\004\012\u0101\001\002\000\004" +
    "\004\uffc1\001\002\000\006\012\u0105\017\u0104\001\002\000" +
    "\006\012\uffbd\017\uffbd\001\002\000\014\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\001\002\000\004\004\uffbf\001" +
    "\002\000\014\020\012\021\016\022\022\023\023\024\013" +
    "\001\002\000\006\012\uffbb\017\uffbb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\004\002\005\001\001\000\002\001\001\000" +
    "\004\064\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\014\017\017\020\013\060\010\001\001\000" +
    "\004\065\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\014\020\024\060\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\030\001\001\000\006\066\377\067\376\001\001\000" +
    "\004\021\033\001\001\000\002\001\001\000\070\003\112" +
    "\004\107\005\101\013\074\014\063\015\054\016\103\022" +
    "\047\025\100\026\062\027\042\034\046\035\075\036\106" +
    "\037\114\041\104\042\056\043\037\044\065\046\111\047" +
    "\060\050\066\052\040\055\034\056\105\057\050\062\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\100\356\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\350\010" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\112\005\333\013\074\014\063\016\335\027\042\034" +
    "\046\035\075\056\105\057\050\063\334\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\320\036" +
    "\322\040\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\101\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\150" +
    "\001\001\000\002\001\001\000\004\035\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\137\010\131\035\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\153\010\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\243\010\131\035\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\112\004\107\005" +
    "\204\007\203\010\131\012\202\025\100\026\177\036\106" +
    "\037\114\041\104\042\056\043\173\044\065\061\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\216\011\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\215\010\131" +
    "\001\001\000\002\001\001\000\006\006\163\011\206\001" +
    "\001\000\002\001\001\000\010\007\212\010\131\035\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\234\031\223\033\221\001" +
    "\001\000\010\030\220\031\223\033\221\001\001\000\006" +
    "\031\233\033\221\001\001\000\002\001\001\000\010\003" +
    "\112\005\224\032\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\075" +
    "\231\001\001\000\002\001\001\000\006\003\112\005\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\233\033\221\001\001\000\004\071\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\073\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\112\005\253\012\202" +
    "\025\100\026\255\061\252\001\001\000\002\001\001\000" +
    "\004\011\206\001\001\000\002\001\001\000\004\011\217" +
    "\001\001\000\046\003\112\004\107\005\260\022\047\025" +
    "\100\026\062\036\106\037\114\041\104\042\056\043\037" +
    "\044\065\046\261\047\060\050\066\052\040\055\034\062" +
    "\070\001\001\000\002\001\001\000\004\006\163\001\001" +
    "\000\002\001\001\000\004\044\264\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\076\270\001\001\000\006\007\271\010\131\001" +
    "\001\000\002\001\001\000\004\035\273\001\001\000\002" +
    "\001\001\000\004\102\275\001\001\000\002\001\001\000" +
    "\006\053\302\054\301\001\001\000\002\001\001\000\004" +
    "\044\305\001\001\000\002\001\001\000\004\054\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\003\112\004\107\005\260\022\047\025\100\026" +
    "\062\036\106\037\114\041\104\042\056\043\037\044\065" +
    "\045\307\046\310\047\060\050\066\052\040\055\034\062" +
    "\070\001\001\000\046\003\112\004\107\005\260\022\047" +
    "\025\100\026\062\036\106\037\114\041\104\042\056\043" +
    "\037\044\065\046\311\047\060\050\066\052\040\055\034" +
    "\062\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\003\112\004\107\005\260\022\047\025\100\026\062" +
    "\036\106\037\114\041\104\042\056\043\037\044\065\045" +
    "\313\046\310\047\060\050\066\052\040\055\034\062\070" +
    "\001\001\000\046\003\112\004\107\005\260\022\047\025" +
    "\100\026\062\036\106\037\114\041\104\042\056\043\037" +
    "\044\065\046\311\047\060\050\066\052\040\055\034\062" +
    "\070\001\001\000\030\003\112\004\107\005\260\025\100" +
    "\026\062\036\106\037\114\041\104\042\056\043\315\044" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\326\001\001\000\002\001\001\000" +
    "\004\044\325\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\343\001\001\000\002\001\001\000\046\003" +
    "\112\004\107\005\260\022\047\025\100\026\062\036\106" +
    "\037\114\041\104\042\056\043\037\044\065\046\345\047" +
    "\060\050\066\052\040\055\034\062\070\001\001\000\002" +
    "\001\001\000\046\003\112\004\107\005\260\022\047\025" +
    "\100\026\062\036\106\037\114\041\104\042\056\043\037" +
    "\044\065\046\347\047\060\050\066\052\040\055\034\062" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\357\001\001" +
    "\000\002\001\001\000\004\077\361\001\001\000\006\007" +
    "\362\010\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\367\051\366\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\371\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\112\005" +
    "\333\013\074\014\063\016\374\027\042\034\046\035\075" +
    "\056\105\057\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\112\005\u0102\023\u0101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\070\u0105\001\001\000\002\001\001\000\006" +
    "\003\112\005\u0106\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    BasicLexerCupV lex;

    @Override
    public void syntax_error(Symbol s) {
        System.err.println("Error sintáctico en línea " + (s.left + 1) +
                           ", columna " + (s.right + 1) + ". Token inesperado: " + s.value);

        // Intentar avanzar al siguiente token sin detener el análisis
        try {
            // Avanzar al siguiente token
            s = lex.next_token();
        } catch (Exception e) {
            System.err.println("Error al intentar avanzar al siguiente token.");
        }
    }



    @SuppressWarnings("deprecation")
    public parser(BasicLexerCupV lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
        this.currentHash = null;
    }

    // Tabla de símbolos
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<>();
    String currentHash;

    public void imprimirTablaSimbolos() {
        for (String key : listaTablasSimbolos.keySet()) {
            System.out.println("\nTabla de símbolos: " + key);
            System.out.println("+--------+---------+----------------------+------------+");
            System.out.println("| Línea  | Columna | Lexema              | Tipo       |");
            System.out.println("+--------+---------+----------------------+------------+");
            for (String simbolo : listaTablasSimbolos.get(key)) {
                System.out.println(simbolo);
            }
            System.out.println("+--------+---------+----------------------+------------+\n");
        }
    }

    public void agregarTablaSimbolos(String tipoTabla, String nombre) {
        System.out.println("/+++Nueva tabla símbolos función o main+++/ " + nombre);
        ArrayList<String> nuevaTabla = new ArrayList<>();
        currentHash = nombre;
        listaTablasSimbolos.put(currentHash, nuevaTabla);
    }

    public void agregarVariable(int linea, int columna, String lexema, String tipo) {
        System.out.println("PARSER: identificador (agregar o verificar) " + lexema);
        if (currentHash == null) {
            System.err.println("Error: No hay una tabla de símbolos activa");
            return;
        }
        ArrayList<String> tabla = listaTablasSimbolos.get(currentHash);
        if (tabla == null) {
            System.err.println("Error: La tabla de símbolos '" + currentHash + "' no existe");
            return;
        }
        String entrada = String.format("| %-6d | %-7d | %-20s | %-10s |",
                linea + 1, columna + 1, lexema, tipo);
        tabla.add(entrada);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

 
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

       parser.agregarTablaSimbolos("main", "_verano_");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= MAIN NT$0 funciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;
		
             System.err.println("Error en la estructura inicial.");
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos ::= INTEGER 
            {
              Object RESULT =null;
		RESULT="rodolfo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipos ::= STRING 
            {
              Object RESULT =null;
		RESULT="cometa";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipos ::= CHAR 
            {
              Object RESULT =null;
		RESULT="cupido";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipos ::= FLOAT 
            {
              Object RESULT =null;
		RESULT="bromista";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipos ::= BOOL 
            {
              Object RESULT =null;
		RESULT="trueno";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literales ::= L_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "rodolfo");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literales ::= L_STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cometa");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literales ::= L_FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "bromista");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literales ::= L_CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cupido");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literales ::= bool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bool ::= TRUE 
            {
              Object RESULT =null;
		RESULT="true";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bool ::= FALSE 
            {
              Object RESULT =null;
		RESULT="false";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresionRelacional ::= asignarTipo operadorRelacional literales 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión relacional: " + op + " " + l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresionRelacional ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Expresión relacional inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresionLogica ::= asignarTipo operadorLogico literales 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión lógica: " + op + " " + l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresionLogica ::= negacion literales 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión lógica con negación: !" + n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresionLogica ::= asignarTipo operadorLogico variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresionLogica ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Expresión lógica inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignarTipo ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), t.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarTipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asignarTipo ::= tipos error 
            {
              Object RESULT =null;
		 System.err.println("Error: Falta identificador después del tipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarTipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operadorRelacional ::= MENOR 
            {
              Object RESULT =null;
		RESULT="snowball";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operadorRelacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="evergreen";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operadorRelacional ::= MAYOR 
            {
              Object RESULT =null;
		RESULT="minstix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operadorRelacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="upatree";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operadorRelacional ::= IGUAL 
            {
              Object RESULT =null;
		RESULT="mary";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operadorRelacional ::= DIFERENTE 
            {
              Object RESULT =null;
		RESULT="openslae";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operadorLogico ::= CONJUNCION 
            {
              Object RESULT =null;
		RESULT="melchor";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operadorLogico ::= DISYUNCION 
            {
              Object RESULT =null;
		RESULT="gaspar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // negacion ::= NEGACION 
            {
              Object RESULT =null;
		RESULT="baltazar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // creacion ::= asignarTipo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // creacion ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Asignación inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // creacionAsignacion ::= asignarTipo ASIGNA literales FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // creacionAsignacion ::= asignarTipo ASIGNA expresiones FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // creacionAsignacion ::= asignarTipo ASIGNA expresionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // creacionAsignacion ::= asignarTipo ASIGNA IDENTIFICADOR FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // creacionAsignacion ::= asignarTipo error 
            {
              Object RESULT =null;
		 System.err.println("Error: Expresión inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // creacionAsignacion ::= ASIGNA literales FIN_EXPRESION error 
            {
              Object RESULT =null;
		 System.err.println("Error: Falta la asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // creacionAsignacion ::= asignarTipo ASIGNA literales error 
            {
              Object RESULT =null;
		 System.err.println("Error: Falta el fin de expresión"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia ::= asignaVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia ::= print 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia ::= read 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 parser.agregarTablaSimbolos("funcion", e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funcion ::= encabezadoFuncion NT$1 parametros bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // encabezadoFuncion ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), t.toString());
        RESULT = id.toString();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // encabezadoFuncion ::= IDENTIFICADOR error 
            {
              Object RESULT =null;
		 System.err.println("Error: Al encabezado de la función le falta el tipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // encabezadoFuncion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bloque ::= corcheteIzquierdo sentencias return_funcion corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bloque ::= corcheteIzquierdo sentenciaEstructura return_funcion corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bloque ::= corcheteIzquierdo corcheteDerecho error 
            {
              Object RESULT =null;
		 System.err.println("Error: bloque vacio"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bloque ::= corcheteIzquierdo sentencias corcheteDerecho error 
            {
              Object RESULT =null;
		 System.err.println("Error: A la función le falta el retorno"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloque ::= corcheteIzquierdo sentenciaEstructura corcheteDerecho error 
            {
              Object RESULT =null;
		 System.err.println("Error: A la función le falta el retorno"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // return_funcion ::= RETURN literales FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_funcion",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // return_funcion ::= RETURN literales error 
            {
              Object RESULT =null;
		 System.err.println("Error: Al retorno le falta el fin de expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_funcion",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$2 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametros ::= PARENTESISAPERTURA NT$2 PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$3 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametros ::= PARENTESISAPERTURA NT$3 parametroAux PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametros ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Parametros mal definidos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametroAux ::= asignarTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$4 ::= 
            {
              Object RESULT =null;
 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametroAux ::= parametroAux COMA NT$4 asignarTipo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresionRelacional ::= crearArreglos operadorRelacional arreglos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresionLogica ::= crearArreglos operadorLogico arreglos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$5 ::= 
            {
              Object RESULT =null;
		int cVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Character cVar = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = "abreempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipoArreglo ::= L_CHAR CORCHETEAPERTURA NT$5 CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Character cVar = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = "cierraempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$6 ::= 
            {
              Object RESULT =null;
		int iVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer iVar = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = "abreempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipoArreglo ::= L_INTEGER CORCHETEAPERTURA NT$6 CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer iVar = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = "cierraempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$7 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), t.toString() + "[]");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // crearArreglos ::= tipoArreglo IDENTIFICADOR NT$7 CORCHETEAPERTURA IDENTIFICADOR CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearArreglos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // crearArreglos ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error en la estructura de crear arreglos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearArreglos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$8 ::= 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = "abreempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // modificarArreglos ::= IDENTIFICADOR CORCHETEAPERTURA NT$8 CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = "cierraempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modificarArreglos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arreglos ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arreglos ::= arreglos arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arreglo ::= parametrosArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametrosArreglo ::= corcheteIzquierdo corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametrosArreglo ::= corcheteIzquierdo parametrosArregloAux corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parametrosArregloAux ::= asignarTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArregloAux",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$9 ::= 
            {
              Object RESULT =null;
 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parametrosArregloAux ::= parametrosArregloAux COMA NT$9 asignarTipo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArregloAux",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresionRelacional ::= asignarTipo operadorRelacional variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$10 ::= 
            {
              Object RESULT =null;
RESULT="entrega";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // asignaVariable ::= variable ASIGNA NT$10 literales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$11 ::= 
            {
              Object RESULT =null;
RESULT="entrega";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // asignaVariable ::= modificarArreglos ASIGNA NT$11 literales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // variable ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Variable: " + idVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operandoBinaria ::= SUMA 
            {
              Object RESULT =null;
		RESULT="navidad";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operandoBinaria ::= RESTA 
            {
              Object RESULT =null;
		RESULT="intercambio";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operandoBinaria ::= DIVISION 
            {
              Object RESULT =null;
		RESULT="reyes";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operandoBinaria ::= MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT="nochebuena";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operandoBinaria ::= MODULO 
            {
              Object RESULT =null;
		RESULT="magos";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operandoBinaria ::= POTENCIA 
            {
              Object RESULT =null;
		RESULT="adviento";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresionBinaria ::= expresion operandoBinaria expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operandoUnario ::= INCREMENTO 
            {
              Object RESULT =null;
		RESULT="quien";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operandoUnario ::= DECREMENTO 
            {
              Object RESULT =null;
		RESULT="grinch";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresionUnario ::= expresion operandoUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$12 ::= 
            {
              Object RESULT =null;
RESULT="-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresionUnario ::= NEGATIVO NT$12 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresionRelacionalMat ::= expresion operadorRelacional expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacionalMat",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresiones ::= expresionRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresiones ::= operandoBinaria expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresiones ::= expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresiones ::= expresionUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresiones ::= expresionRelacionalMat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$13 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresiones ::= PARENTESISAPERTURA NT$13 expresiones PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresion ::= INTEGER 
            {
              Object RESULT =null;
		RESULT="rodolfo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresion ::= FLOAT 
            {
              Object RESULT =null;
		RESULT="bromista";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencia_lista ::= sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_lista",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencia_lista ::= sentencia_lista sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_lista",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentenciaEstructura ::= if_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentenciaEstructura ::= for_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentenciaEstructura ::= while_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentenciaEstructura ::= switch_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentenciaEstructura ::= return_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentenciaEstructura ::= break_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sentenciaEstructura ::= expresiones FIN_EXPRESION 
            {
              Object RESULT =null;
		RESULT="finregalo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // if_estructura ::= IF PARENTESISAPERTURA operadorLogico PARENTESISCIERRE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // if_estructura ::= IF PARENTESISAPERTURA operadorLogico PARENTESISCIERRE sentenciaEstructura ELSE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // for_estructura ::= FOR PARENTESISAPERTURA IDENTIFICADOR DOS_PUNTOS rango PARENTESISCIERRE sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_estructura",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // while_estructura ::= WHILE PARENTESISAPERTURA expresionLogica PARENTESISCIERRE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_estructura",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // rango ::= expresion PUNTOS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rango",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // rango ::= expresion PUNTOS expresion PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rango",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$14 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "switch_" + symbol.value.toString(), "switch");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // switch_estructura ::= SWITCH PARENTESISAPERTURA variable PARENTESISCIERRE NT$14 corcheteIzquierdo casos_switch corcheteDerecho 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_estructura",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // casos_switch ::= caso_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // casos_switch ::= casos_switch caso_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // caso_switch ::= CASE expresion DOS_PUNTOS sentencia_lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_switch",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // caso_switch ::= DEFAULT DOS_PUNTOS sentencia_lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_switch",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // return_estructura ::= RETURN expresion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // return_estructura ::= RETURN FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // break_estructura ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_estructura",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // print ::= PRINT PARENTESISAPERTURA literales PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // print ::= PRINT PARENTESISAPERTURA variable PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // print ::= PRINT PARENTESISAPERTURA variable error 
            {
              Object RESULT =null;
		 System.err.println("Error: No se cerró el print"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // print ::= PRINT error 
            {
              Object RESULT =null;
		 System.err.println("Error: Print mal formado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // print ::= PRINT variable PARENTESISCIERRE error 
            {
              Object RESULT =null;
		 System.err.println("Print mal formado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // read ::= READ PARENTESISAPERTURA expresion PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // read ::= READ PARENTESISAPERTURA PARENTESISCIERRE error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
