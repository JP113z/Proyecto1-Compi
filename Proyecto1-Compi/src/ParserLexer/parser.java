
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import Tree.Arbol;
import Tree.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\231\000\002\002\004\000\002\070\002\000\002\002" +
    "\005\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\061\003\000\002\061\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\064" +
    "\003\000\002\064\003\000\002\066\003\000\002\067\003" +
    "\000\002\010\003\000\002\010\003\000\002\004\005\000" +
    "\002\004\005\000\002\004\004\000\002\056\005\000\002" +
    "\056\004\000\002\056\005\000\002\005\004\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\011\003\000" +
    "\002\011\003\000\002\012\003\000\002\013\004\000\002" +
    "\013\003\000\002\014\006\000\002\014\006\000\002\014" +
    "\006\000\002\014\004\000\002\014\006\000\002\014\006" +
    "\000\002\015\003\000\002\015\004\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\003\000\002\017\004\000\002\071\002\000\002\020\006" +
    "\000\002\055\004\000\002\055\004\000\002\055\003\000" +
    "\002\021\006\000\002\021\005\000\002\021\006\000\002" +
    "\060\005\000\002\060\005\000\002\072\002\000\002\024" +
    "\005\000\002\073\002\000\002\024\006\000\002\024\003" +
    "\000\002\023\004\000\002\023\006\000\002\062\006\000" +
    "\002\062\006\000\002\062\006\000\002\062\006\000\002" +
    "\074\002\000\002\025\010\000\002\075\002\000\002\026" +
    "\007\000\002\027\003\000\002\027\004\000\002\030\003" +
    "\000\002\032\004\000\002\032\005\000\002\031\003\000" +
    "\002\076\002\000\002\031\006\000\002\077\002\000\002" +
    "\033\006\000\002\033\006\000\002\100\002\000\002\033" +
    "\007\000\002\033\006\000\002\034\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\005\000\002\065\005\000\002\065\005\000\002" +
    "\065\004\000\002\065\007\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\036\005\000\002\036\004\000" +
    "\002\036\005\000\002\037\003\000\002\037\003\000\002" +
    "\040\004\000\002\101\002\000\002\040\005\000\002\040" +
    "\004\000\002\041\005\000\002\041\005\000\002\041\007" +
    "\000\002\042\003\000\002\042\003\000\002\042\004\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\005\000\002\102\002\000\002\042\006\000\002\043" +
    "\003\000\002\043\004\000\002\044\003\000\002\044\003" +
    "\000\002\046\017\000\002\046\015\000\002\057\011\000" +
    "\002\057\015\000\002\057\015\000\002\057\014\000\002" +
    "\022\005\000\002\022\004\000\002\052\004\000\002\053" +
    "\007\000\002\053\007\000\002\053\006\000\002\053\004" +
    "\000\002\053\006\000\002\054\007\000\002\054\007\000" +
    "\002\054\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\006\003\004\016\005\001\002\000\004\002" +
    "\ufffe\001\002\000\020\003\000\020\000\021\000\022\000" +
    "\023\000\024\000\025\000\001\002\000\004\002\007\001" +
    "\002\000\004\002\001\001\002\000\020\003\017\020\012" +
    "\021\016\022\022\023\023\024\013\025\021\001\002\000" +
    "\006\003\uffc9\011\uffc9\001\002\000\004\025\ufffd\001\002" +
    "\000\004\025\ufff9\001\002\000\022\002\uffcb\003\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\001\002" +
    "\000\004\025\026\001\002\000\004\025\ufffc\001\002\000" +
    "\006\003\uffc5\011\uffc5\001\002\000\022\002\uffff\003\017" +
    "\020\012\021\016\022\022\023\023\024\013\025\021\001" +
    "\002\000\004\003\024\001\002\000\004\025\ufffb\001\002" +
    "\000\004\025\ufffa\001\002\000\006\003\uffc6\011\uffc6\001" +
    "\002\000\022\002\uffca\003\uffca\020\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\001\002\000\006\003\uffc7\011" +
    "\uffc7\001\002\000\006\003\031\011\030\001\002\000\016" +
    "\012\uffbf\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\001" +
    "\002\000\004\004\uffbb\001\002\000\004\004\033\001\002" +
    "\000\036\003\061\004\043\005\070\010\065\014\060\015" +
    "\036\020\012\021\016\022\022\023\023\024\013\025\064" +
    "\054\042\055\067\001\002\000\022\002\uffc8\003\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\001\002" +
    "\000\040\003\uff7a\004\uff7a\005\uff7a\010\uff7a\014\uff7a\015" +
    "\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a" +
    "\054\uff7a\055\uff7a\062\uff7a\001\002\000\004\011\u011a\001" +
    "\002\000\040\003\uffcd\004\uffcd\005\uffcd\010\uffcd\014\uffcd" +
    "\015\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\054\uffcd\055\uffcd\062\uffcd\001\002\000\010\003\100" +
    "\010\101\013\u0105\001\002\000\040\003\061\004\043\005" +
    "\u0113\010\065\014\060\015\036\020\012\021\016\022\022" +
    "\023\023\024\013\025\064\054\042\055\067\062\u0111\001" +
    "\002\000\004\011\362\001\002\000\010\005\354\064\337" +
    "\067\341\001\002\000\022\004\043\010\346\041\126\042" +
    "\141\043\131\044\135\045\115\046\105\001\002\000\020" +
    "\010\335\041\126\042\141\043\131\044\135\045\115\046" +
    "\105\001\002\000\020\010\326\041\126\042\141\043\131" +
    "\044\135\045\115\046\105\001\002\000\024\004\uffb0\010" +
    "\uffb0\013\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\001\002\000\004\025\320\001\002\000\040\003" +
    "\uffd4\004\uffd4\005\uffd4\010\uffd4\014\uffd4\015\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\054\uffd4\055" +
    "\uffd4\062\uffd4\001\002\000\040\003\uffd2\004\uffd2\005\uffd2" +
    "\010\uffd2\014\uffd2\015\uffd2\020\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\054\uffd2\055\uffd2\062\uffd2\001\002" +
    "\000\024\004\uffae\010\uffae\013\uffae\041\uffae\042\uffae\043" +
    "\uffae\044\uffae\045\uffae\046\uffae\001\002\000\040\003\uffce" +
    "\004\uffce\005\uffce\010\uffce\014\uffce\015\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\054\uffce\055\uffce" +
    "\062\uffce\001\002\000\040\003\uffcf\004\uffcf\005\uffcf\010" +
    "\uffcf\014\uffcf\015\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\054\uffcf\055\uffcf\062\uffcf\001\002\000" +
    "\040\003\uffd1\004\uffd1\005\uffd1\010\uffd1\014\uffd1\015\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\054" +
    "\uffd1\055\uffd1\062\uffd1\001\002\000\040\003\uff7b\004\uff7b" +
    "\005\uff7b\010\uff7b\014\uff7b\015\uff7b\020\uff7b\021\uff7b\022" +
    "\uff7b\023\uff7b\024\uff7b\025\uff7b\054\uff7b\055\uff7b\062\uff7b" +
    "\001\002\000\010\003\306\011\304\025\077\001\002\000" +
    "\040\003\uffdb\004\uffdb\005\uffdb\010\uffdb\014\uffdb\015\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\054" +
    "\uffdb\055\uffdb\062\uffdb\001\002\000\004\010\255\001\002" +
    "\000\040\003\uffcc\004\uffcc\005\uffcc\010\uffcc\014\uffcc\015" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\054\uffcc\055\uffcc\062\uffcc\001\002\000\042\006\251\010" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2" +
    "\036\uffa2\037\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\046\uffa2\001\002\000\016\026\121\027\142\064\147" +
    "\065\104\066\102\067\116\001\002\000\040\003\uffd0\004" +
    "\uffd0\005\uffd0\010\uffd0\014\uffd0\015\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\054\uffd0\055\uffd0\062" +
    "\uffd0\001\002\000\004\011\072\001\002\000\004\003\071" +
    "\001\002\000\022\002\uffc3\003\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\001\002\000\020\010\065" +
    "\020\012\021\016\022\022\023\023\024\013\025\077\001" +
    "\002\000\004\017\234\001\002\000\004\025\233\001\002" +
    "\000\004\010\217\001\002\000\006\003\100\010\101\001" +
    "\002\000\072\003\uffa2\005\uffa2\010\uffa2\012\uffa2\013\uffa2" +
    "\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\030" +
    "\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\062\uffa2\001\002\000\042\003\uffd7" +
    "\004\uffd7\005\uffd7\010\uffd7\014\uffd7\015\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\054\uffd7" +
    "\055\uffd7\062\uffd7\001\002\000\070\011\130\020\012\021" +
    "\016\022\022\023\023\024\013\025\114\026\121\027\142" +
    "\030\117\031\106\032\144\033\145\034\124\035\132\040" +
    "\110\041\126\042\141\043\131\044\135\045\115\046\105" +
    "\051\123\064\147\065\104\066\102\067\116\001\002\000" +
    "\114\003\uffef\004\uffef\005\uffef\010\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\024\uffef\025\uffef\030\uffef\031\uffef\032\uffef\033\uffef" +
    "\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042" +
    "\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef" +
    "\054\uffef\055\uffef\062\uffef\064\uffef\066\uffef\001\002\000" +
    "\066\003\ufff4\004\ufff4\005\ufff4\010\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4" +
    "\045\ufff4\046\ufff4\047\ufff4\050\ufff4\054\ufff4\055\ufff4\062" +
    "\ufff4\001\002\000\066\003\ufff6\004\ufff6\005\ufff6\010\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\015\ufff6\017\ufff6\020\ufff6\021" +
    "\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\041\ufff6\042\ufff6" +
    "\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\054" +
    "\ufff6\055\ufff6\062\ufff6\001\002\000\036\004\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\051\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\001\002" +
    "\000\056\005\uff97\012\uff97\013\uff97\017\uff97\020\uff97\021" +
    "\uff97\022\uff97\023\uff97\024\uff97\025\uff97\040\uff97\041\uff97" +
    "\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050" +
    "\uff97\062\uff97\064\uff97\066\uff97\001\002\000\004\013\216" +
    "\001\002\000\006\064\uff8c\066\uff8c\001\002\000\016\026" +
    "\121\027\142\064\147\065\104\066\102\067\116\001\002" +
    "\000\114\003\ufff2\004\ufff2\005\ufff2\010\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050" +
    "\ufff2\054\ufff2\055\ufff2\062\ufff2\064\ufff2\066\ufff2\001\002" +
    "\000\064\003\ufff3\005\ufff3\012\ufff3\013\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\030\117\031\106" +
    "\032\144\033\145\034\124\035\132\036\163\037\166\041" +
    "\126\042\141\043\131\044\135\045\115\046\105\062\ufff3" +
    "\001\002\000\042\010\uffa2\013\205\030\uffa2\031\uffa2\032" +
    "\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\041\uffa2" +
    "\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\001\002\000" +
    "\036\004\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\051\uffe1\064\uffe1\065\uffe1\066" +
    "\uffe1\067\uffe1\001\002\000\066\003\ufff5\004\ufff5\005\ufff5" +
    "\010\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\017\ufff5\020" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\041\ufff5" +
    "\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\054\ufff5\055\ufff5\062\ufff5\001\002\000\056\005\uff98" +
    "\012\uff98\013\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023" +
    "\uff98\024\uff98\025\uff98\040\uff98\041\uff98\042\uff98\043\uff98" +
    "\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98\062\uff98\064" +
    "\uff98\066\uff98\001\002\000\042\005\uff81\012\uff81\013\uff81" +
    "\017\uff81\020\uff81\021\uff81\022\uff81\023\uff81\024\uff81\041" +
    "\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\062\uff81" +
    "\001\002\000\066\003\uffee\004\uffee\005\uffee\010\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\041\uffee\042\uffee\043" +
    "\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\054\uffee" +
    "\055\uffee\062\uffee\001\002\000\004\013\204\001\002\000" +
    "\016\026\uffdd\027\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd" +
    "\001\002\000\056\005\uff94\012\uff94\013\uff94\017\uff94\020" +
    "\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\040\uff94" +
    "\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047" +
    "\uff94\050\uff94\062\uff94\064\uff94\066\uff94\001\002\000\016" +
    "\026\121\027\142\064\147\065\104\066\102\067\116\001" +
    "\002\000\036\004\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\051\uffe5\064\uffe5\065" +
    "\uffe5\066\uffe5\067\uffe5\001\002\000\006\003\202\013\uff85" +
    "\001\002\000\066\011\uff7f\020\uff7f\021\uff7f\022\uff7f\023" +
    "\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f" +
    "\032\uff7f\033\uff7f\034\uff7f\035\uff7f\040\uff7f\041\uff7f\042" +
    "\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\064\uff7f\065\uff7f" +
    "\066\uff7f\067\uff7f\001\002\000\036\004\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\051\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\001\002\000" +
    "\056\005\uff93\012\uff93\013\uff93\017\uff93\020\uff93\021\uff93" +
    "\022\uff93\023\uff93\024\uff93\025\uff93\040\uff93\041\uff93\042" +
    "\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93" +
    "\062\uff93\064\uff93\066\uff93\001\002\000\114\003\ufff1\004" +
    "\ufff1\005\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044" +
    "\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\054\ufff1\055\ufff1" +
    "\062\ufff1\064\ufff1\066\ufff1\001\002\000\040\010\165\030" +
    "\117\031\106\032\144\033\145\034\124\035\132\036\163" +
    "\037\166\041\126\042\141\043\131\044\135\045\115\046" +
    "\105\001\002\000\036\004\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\051\uffe2\064" +
    "\uffe2\065\uffe2\066\uffe2\067\uffe2\001\002\000\022\041\126" +
    "\042\141\043\131\044\135\045\115\046\105\047\154\050" +
    "\153\001\002\000\042\005\uff82\012\uff82\013\uff82\017\uff82" +
    "\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82\041\uff82\042" +
    "\uff82\043\uff82\044\uff82\045\uff82\046\uff82\062\uff82\001\002" +
    "\000\006\064\147\066\102\001\002\000\036\004\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\051\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\001" +
    "\002\000\066\003\uffed\004\uffed\005\uffed\010\uffed\012\uffed" +
    "\013\uffed\014\uffed\015\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\041\uffed\042\uffed\043\uffed" +
    "\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\054\uffed\055" +
    "\uffed\062\uffed\001\002\000\042\005\uff86\012\uff86\013\uff86" +
    "\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86\041" +
    "\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\062\uff86" +
    "\001\002\000\056\005\uff96\012\uff96\013\uff96\017\uff96\020" +
    "\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96\040\uff96" +
    "\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047" +
    "\uff96\050\uff96\062\uff96\064\uff96\066\uff96\001\002\000\056" +
    "\005\uff95\012\uff95\013\uff95\017\uff95\020\uff95\021\uff95\022" +
    "\uff95\023\uff95\024\uff95\025\uff95\040\uff95\041\uff95\042\uff95" +
    "\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\062" +
    "\uff95\064\uff95\066\uff95\001\002\000\042\005\uff83\012\uff83" +
    "\013\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024" +
    "\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83" +
    "\062\uff83\001\002\000\114\003\ufff0\004\ufff0\005\ufff0\010" +
    "\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046" +
    "\ufff0\047\ufff0\050\ufff0\054\ufff0\055\ufff0\062\ufff0\064\ufff0" +
    "\066\ufff0\001\002\000\042\005\uff84\012\uff84\013\uff84\017" +
    "\uff84\020\uff84\021\uff84\022\uff84\023\uff84\024\uff84\041\uff84" +
    "\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84\062\uff84\001" +
    "\002\000\020\025\077\026\121\027\142\064\147\065\104" +
    "\066\102\067\116\001\002\000\020\025\077\026\121\027" +
    "\142\064\147\065\104\066\102\067\116\001\002\000\066" +
    "\011\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044" +
    "\uffde\045\uffde\046\uffde\064\uffde\065\uffde\066\uffde\067\uffde" +
    "\001\002\000\066\011\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\064\uffdf\065\uffdf" +
    "\066\uffdf\067\uffdf\001\002\000\030\012\uffe7\013\uffe7\017" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7" +
    "\047\uffe7\050\uffe7\001\002\000\066\003\ufff3\004\ufff3\005" +
    "\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\041" +
    "\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3" +
    "\050\ufff3\054\ufff3\055\ufff3\062\ufff3\001\002\000\030\012" +
    "\uffe9\013\uffe9\017\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9" +
    "\045\uffe9\046\uffe9\047\uffe9\050\uffe9\001\002\000\042\005" +
    "\uffeb\012\uffeb\013\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\046\uffeb\062\uffeb\001\002\000\042\005\uffec\012\uffec" +
    "\013\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec" +
    "\062\uffec\001\002\000\006\064\147\066\102\001\002\000" +
    "\046\005\uff8f\012\uff8f\013\uff8f\017\uff8f\020\uff8f\021\uff8f" +
    "\022\uff8f\023\uff8f\024\uff8f\041\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\062\uff8f\001\002" +
    "\000\046\005\uff8a\012\uff8a\013\uff8a\017\uff8a\020\uff8a\021" +
    "\uff8a\022\uff8a\023\uff8a\024\uff8a\041\uff8a\042\uff8a\043\uff8a" +
    "\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\062\uff8a\001" +
    "\002\000\004\025\077\001\002\000\046\005\uff8e\012\uff8e" +
    "\013\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024" +
    "\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e" +
    "\047\uff8e\050\uff8e\062\uff8e\001\002\000\006\064\147\066" +
    "\102\001\002\000\062\005\uff88\012\uff88\013\uff88\017\uff88" +
    "\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\030\117\031" +
    "\106\032\144\033\145\034\124\035\132\041\uff88\042\uff88" +
    "\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88\062" +
    "\uff88\001\002\000\006\064\147\066\102\001\002\000\046" +
    "\005\uff87\012\uff87\013\uff87\017\uff87\020\uff87\021\uff87\022" +
    "\uff87\023\uff87\024\uff87\041\uff87\042\uff87\043\uff87\044\uff87" +
    "\045\uff87\046\uff87\047\uff87\050\uff87\062\uff87\001\002\000" +
    "\042\005\uff80\012\uff80\013\uff80\017\uff80\020\uff80\021\uff80" +
    "\022\uff80\023\uff80\024\uff80\041\uff80\042\uff80\043\uff80\044" +
    "\uff80\045\uff80\046\uff80\062\uff80\001\002\000\056\005\uff90" +
    "\012\uff90\013\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023" +
    "\uff90\024\uff90\025\uff90\040\uff90\041\uff90\042\uff90\043\uff90" +
    "\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\062\uff90\064" +
    "\uff90\066\uff90\001\002\000\066\011\130\020\012\021\016" +
    "\022\022\023\023\024\013\025\077\026\121\027\142\030" +
    "\117\031\106\032\144\033\145\034\124\035\132\040\110" +
    "\041\126\042\141\043\131\044\135\045\115\046\105\064" +
    "\147\065\104\066\102\067\116\001\002\000\004\012\201" +
    "\001\002\000\040\005\uff85\012\uff85\017\uff85\020\uff85\021" +
    "\uff85\022\uff85\023\uff85\024\uff85\041\uff85\042\uff85\043\uff85" +
    "\044\uff85\045\uff85\046\uff85\062\uff85\001\002\000\016\041" +
    "\126\042\141\043\131\044\135\045\115\046\105\001\002" +
    "\000\042\005\uff7e\012\uff7e\013\uff7e\017\uff7e\020\uff7e\021" +
    "\uff7e\022\uff7e\023\uff7e\024\uff7e\041\uff7e\042\uff7e\043\uff7e" +
    "\044\uff7e\045\uff7e\046\uff7e\062\uff7e\001\002\000\042\003" +
    "\uffd5\004\uffd5\005\uffd5\010\uffd5\014\uffd5\015\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\054" +
    "\uffd5\055\uffd5\062\uffd5\001\002\000\030\012\uffe8\013\uffe8" +
    "\017\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046" +
    "\uffe8\047\uffe8\050\uffe8\001\002\000\042\003\uffd9\004\uffd9" +
    "\005\uffd9\010\uffd9\014\uffd9\015\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\054\uffd9\055\uffd9" +
    "\062\uffd9\001\002\000\042\003\uffd8\004\uffd8\005\uffd8\010" +
    "\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\054\uffd8\055\uffd8\062\uffd8\001" +
    "\002\000\006\064\147\066\102\001\002\000\046\005\uff8d" +
    "\012\uff8d\013\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023" +
    "\uff8d\024\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d" +
    "\046\uff8d\047\uff8d\050\uff8d\062\uff8d\001\002\000\056\005" +
    "\uff91\012\uff91\013\uff91\017\uff91\020\uff91\021\uff91\022\uff91" +
    "\023\uff91\024\uff91\025\uff91\040\uff91\041\uff91\042\uff91\043" +
    "\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\062\uff91" +
    "\064\147\066\102\001\002\000\056\005\uff92\012\uff92\013" +
    "\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92" +
    "\025\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045" +
    "\uff92\046\uff92\047\uff92\050\uff92\062\uff92\064\uff92\066\uff92" +
    "\001\002\000\046\005\uff89\012\uff89\013\uff89\017\uff89\020" +
    "\uff89\021\uff89\022\uff89\023\uff89\024\uff89\041\uff89\042\uff89" +
    "\043\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\062" +
    "\uff89\001\002\000\042\005\uffea\012\uffea\013\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\041\uffea\042" +
    "\uffea\043\uffea\044\uffea\045\uffea\046\uffea\062\uffea\001\002" +
    "\000\006\064\147\066\102\001\002\000\046\005\uff8b\012" +
    "\uff8b\013\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b" +
    "\024\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046" +
    "\uff8b\047\uff8b\050\uff8b\062\uff8b\001\002\000\042\003\uffda" +
    "\004\uffda\005\uffda\010\uffda\014\uffda\015\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\054\uffda" +
    "\055\uffda\062\uffda\001\002\000\016\026\121\027\142\064" +
    "\147\065\104\066\102\067\116\001\002\000\004\017\221" +
    "\001\002\000\066\011\130\020\012\021\016\022\022\023" +
    "\023\024\013\025\077\026\121\027\142\030\117\031\106" +
    "\032\144\033\145\034\124\035\132\040\110\041\126\042" +
    "\141\043\131\044\135\045\115\046\105\064\147\065\104" +
    "\066\102\067\116\001\002\000\004\017\223\001\002\000" +
    "\012\025\077\040\110\064\147\066\102\001\002\000\006" +
    "\036\163\037\166\001\002\000\004\012\227\001\002\000" +
    "\006\036\163\037\166\001\002\000\004\004\230\001\002" +
    "\000\006\054\042\055\067\001\002\000\004\005\232\001" +
    "\002\000\040\003\uff79\004\uff79\005\uff79\010\uff79\014\uff79" +
    "\015\uff79\020\uff79\021\uff79\022\uff79\023\uff79\024\uff79\025" +
    "\uff79\054\uff79\055\uff79\062\uff79\001\002\000\026\003\uffe6" +
    "\010\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046" +
    "\uffe6\047\uffe6\050\uffe6\001\002\000\016\020\012\021\016" +
    "\022\022\023\023\024\013\051\123\001\002\000\004\017" +
    "\237\001\002\000\006\047\154\050\153\001\002\000\012" +
    "\025\077\040\110\064\147\066\102\001\002\000\004\012" +
    "\241\001\002\000\004\004\242\001\002\000\034\003\061" +
    "\004\043\010\065\014\060\015\036\020\012\021\016\022" +
    "\022\023\023\024\013\025\064\054\042\055\067\001\002" +
    "\000\036\003\061\004\043\005\245\010\065\014\060\015" +
    "\036\020\012\021\016\022\022\023\023\024\013\025\064" +
    "\054\042\055\067\001\002\000\040\003\uffd3\004\uffd3\005" +
    "\uffd3\010\uffd3\014\uffd3\015\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\054\uffd3\055\uffd3\062\uffd3\001" +
    "\002\000\040\003\uff78\004\uff78\005\uff78\010\uff78\014\uff78" +
    "\015\uff78\020\uff78\021\uff78\022\uff78\023\uff78\024\uff78\025" +
    "\uff78\054\uff78\055\uff78\062\uff78\001\002\000\004\013\247" +
    "\001\002\000\004\003\250\001\002\000\042\003\uffd6\004" +
    "\uffd6\005\uffd6\010\uffd6\014\uffd6\015\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\054\uffd6\055" +
    "\uffd6\062\uffd6\001\002\000\004\025\uffb2\001\002\000\004" +
    "\025\253\001\002\000\004\007\254\001\002\000\020\010" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\001\002\000\040\011\263\020\012\021\016\022\022\023" +
    "\023\024\013\025\077\026\uffa8\027\uffa8\040\110\051\123" +
    "\064\147\065\uffa8\066\102\067\uffa8\001\002\000\026\012" +
    "\uff9e\013\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e" +
    "\046\uff9e\047\154\050\153\001\002\000\016\026\121\027" +
    "\142\064\147\065\104\066\102\067\116\001\002\000\036" +
    "\030\117\031\106\032\144\033\145\034\124\035\132\036" +
    "\163\037\166\041\126\042\141\043\131\044\135\045\115" +
    "\046\105\001\002\000\026\012\uff9f\013\uff9f\041\uff9f\042" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\001\002\000\026\012\uffa0\013\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\001\002" +
    "\000\030\011\263\020\012\021\016\022\022\023\023\024" +
    "\013\025\077\040\110\051\123\064\147\066\102\001\002" +
    "\000\036\012\uffa1\013\uffa1\025\077\040\110\041\126\042" +
    "\141\043\131\044\135\045\115\046\105\047\uffa1\050\uffa1" +
    "\064\147\066\102\001\002\000\020\013\270\041\126\042" +
    "\141\043\131\044\135\045\115\046\105\001\002\000\036" +
    "\030\117\031\106\032\144\033\145\034\124\035\132\036" +
    "\163\037\166\041\126\042\141\043\131\044\135\045\115" +
    "\046\105\001\002\000\006\064\147\066\102\001\002\000" +
    "\040\003\uffa6\004\uffa6\005\uffa6\010\uffa6\014\uffa6\015\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\054" +
    "\uffa6\055\uffa6\062\uffa6\001\002\000\006\047\154\050\153" +
    "\001\002\000\006\026\121\027\142\001\002\000\026\012" +
    "\uff99\013\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99" +
    "\046\uff99\047\uff99\050\uff99\001\002\000\016\020\012\021" +
    "\016\022\022\023\023\024\013\051\123\001\002\000\026" +
    "\012\uff9a\013\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\046\uff9a\047\uff9a\050\uff9a\001\002\000\026\012\uff9c" +
    "\013\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046" +
    "\uff9c\047\uff9c\050\uff9c\001\002\000\020\012\300\041\126" +
    "\042\141\043\131\044\135\045\115\046\105\001\002\000" +
    "\026\012\uff9d\013\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d" +
    "\045\uff9d\046\uff9d\047\uff9d\050\uff9d\001\002\000\040\003" +
    "\uffa7\004\uffa7\005\uffa7\010\uffa7\014\uffa7\015\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\054\uffa7\055" +
    "\uffa7\062\uffa7\001\002\000\016\026\121\027\142\064\147" +
    "\065\104\066\102\067\116\001\002\000\026\012\uff9b\013" +
    "\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b" +
    "\047\uff9b\050\uff9b\001\002\000\020\025\077\026\121\027" +
    "\142\064\147\065\104\066\102\067\116\001\002\000\004" +
    "\012\307\001\002\000\040\003\uff6d\004\uff6d\005\uff6d\010" +
    "\uff6d\014\uff6d\015\uff6d\020\uff6d\021\uff6d\022\uff6d\023\uff6d" +
    "\024\uff6d\025\uff6d\054\uff6d\055\uff6d\062\uff6d\001\002\000" +
    "\004\003\310\001\002\000\040\003\uff6c\004\uff6c\005\uff6c" +
    "\010\uff6c\014\uff6c\015\uff6c\020\uff6c\021\uff6c\022\uff6c\023" +
    "\uff6c\024\uff6c\025\uff6c\054\uff6c\055\uff6c\062\uff6c\001\002" +
    "\000\006\003\315\012\316\001\002\000\004\012\313\001" +
    "\002\000\004\013\314\001\002\000\040\003\uff70\004\uff70" +
    "\005\uff70\010\uff70\014\uff70\015\uff70\020\uff70\021\uff70\022" +
    "\uff70\023\uff70\024\uff70\025\uff70\054\uff70\055\uff70\062\uff70" +
    "\001\002\000\040\003\uff6e\004\uff6e\005\uff6e\010\uff6e\014" +
    "\uff6e\015\uff6e\020\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e" +
    "\025\uff6e\054\uff6e\055\uff6e\062\uff6e\001\002\000\004\013" +
    "\317\001\002\000\040\003\uff6f\004\uff6f\005\uff6f\010\uff6f" +
    "\014\uff6f\015\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f\024" +
    "\uff6f\025\uff6f\054\uff6f\055\uff6f\062\uff6f\001\002\000\026" +
    "\003\uffe6\006\uffb4\010\uffe6\013\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\001\002\000\004\006\322" +
    "\001\002\000\004\025\323\001\002\000\004\007\324\001" +
    "\002\000\020\010\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\046\uffb3\001\002\000\004\004\043\001\002\000" +
    "\004\004\043\001\002\000\006\004\043\013\330\001\002" +
    "\000\040\003\uffb7\004\uffb7\005\uffb7\010\uffb7\014\uffb7\015" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\054\uffb7\055\uffb7\062\uffb7\001\002\000\024\004\uffaf\010" +
    "\uffaf\013\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\001\002\000\006\004\043\013\333\001\002\000" +
    "\040\003\uffb8\004\uffb8\005\uffb8\010\uffb8\014\uffb8\015\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\054" +
    "\uffb8\055\uffb8\062\uffb8\001\002\000\006\064\337\067\341" +
    "\001\002\000\006\064\uffa5\067\uffa5\001\002\000\006\064" +
    "\337\067\341\001\002\000\010\005\ufff8\013\ufff8\017\ufff8" +
    "\001\002\000\004\013\342\001\002\000\010\005\ufff7\013" +
    "\ufff7\017\ufff7\001\002\000\040\003\uffa4\004\uffa4\005\uffa4" +
    "\010\uffa4\014\uffa4\015\uffa4\020\uffa4\021\uffa4\022\uffa4\023" +
    "\uffa4\024\uffa4\025\uffa4\054\uffa4\055\uffa4\062\uffa4\001\002" +
    "\000\004\013\344\001\002\000\040\003\uffa3\004\uffa3\005" +
    "\uffa3\010\uffa3\014\uffa3\015\uffa3\020\uffa3\021\uffa3\022\uffa3" +
    "\023\uffa3\024\uffa3\025\uffa3\054\uffa3\055\uffa3\062\uffa3\001" +
    "\002\000\004\004\043\001\002\000\004\004\043\001\002" +
    "\000\006\004\043\013\350\001\002\000\040\003\uffb6\004" +
    "\uffb6\005\uffb6\010\uffb6\014\uffb6\015\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\025\uffb6\054\uffb6\055\uffb6\062" +
    "\uffb6\001\002\000\006\004\043\013\352\001\002\000\040" +
    "\003\uffb5\004\uffb5\005\uffb5\010\uffb5\014\uffb5\015\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\054\uffb5" +
    "\055\uffb5\062\uffb5\001\002\000\006\005\357\017\356\001" +
    "\002\000\024\004\uffad\010\uffad\013\uffad\041\uffad\042\uffad" +
    "\043\uffad\044\uffad\045\uffad\046\uffad\001\002\000\006\005" +
    "\uffab\017\uffab\001\002\000\006\064\uffaa\067\uffaa\001\002" +
    "\000\024\004\uffac\010\uffac\013\uffac\041\uffac\042\uffac\043" +
    "\uffac\044\uffac\045\uffac\046\uffac\001\002\000\006\064\337" +
    "\067\341\001\002\000\006\005\uffa9\017\uffa9\001\002\000" +
    "\030\011\263\020\012\021\016\022\022\023\023\024\013" +
    "\025\077\040\110\051\123\064\147\066\102\001\002\000" +
    "\024\012\364\041\126\042\141\043\131\044\135\045\115" +
    "\046\105\047\154\050\153\001\002\000\004\004\u010e\001" +
    "\002\000\066\011\130\020\012\021\016\022\022\023\023" +
    "\024\013\025\077\026\121\027\142\030\117\031\106\032" +
    "\144\033\145\034\124\035\132\040\110\041\126\042\141" +
    "\043\131\044\135\045\115\046\105\064\147\065\104\066" +
    "\102\067\116\001\002\000\032\012\367\020\012\021\016" +
    "\022\022\023\023\024\013\041\126\042\141\043\131\044" +
    "\135\045\115\046\105\001\002\000\004\004\u010a\001\002" +
    "\000\004\012\371\001\002\000\004\004\372\001\002\000" +
    "\104\003\061\004\043\010\065\011\130\014\060\015\036" +
    "\020\012\021\016\022\022\023\023\024\013\025\064\026" +
    "\121\027\142\030\117\031\106\032\144\033\145\034\124" +
    "\035\132\040\110\041\126\042\141\043\131\044\135\045" +
    "\115\046\105\054\042\055\067\064\147\065\104\066\102" +
    "\067\116\001\002\000\004\062\u0100\001\002\000\040\010" +
    "\u0106\030\117\031\106\032\144\033\145\034\124\035\132" +
    "\036\163\037\166\041\126\042\141\043\131\044\135\045" +
    "\115\046\105\001\002\000\024\003\100\010\101\013\u0105" +
    "\041\126\042\141\043\131\044\135\045\115\046\105\001" +
    "\002\000\004\062\u0100\001\002\000\004\005\u0104\001\002" +
    "\000\010\013\u0101\064\147\066\102\001\002\000\004\005" +
    "\uff72\001\002\000\004\013\u0103\001\002\000\004\005\uff73" +
    "\001\002\000\040\003\uff75\004\uff75\005\uff75\010\uff75\014" +
    "\uff75\015\uff75\020\uff75\021\uff75\022\uff75\023\uff75\024\uff75" +
    "\025\uff75\054\uff75\055\uff75\062\uff75\001\002\000\040\003" +
    "\uffdc\004\uffdc\005\uffdc\010\uffdc\014\uffdc\015\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\054\uffdc\055" +
    "\uffdc\062\uffdc\001\002\000\040\011\263\020\012\021\016" +
    "\022\022\023\023\024\013\025\077\026\uffa8\027\uffa8\040" +
    "\110\051\123\064\147\065\uffa8\066\102\067\uffa8\001\002" +
    "\000\040\030\117\031\106\032\144\033\145\034\124\035" +
    "\132\036\163\037\166\041\126\042\141\043\131\044\135" +
    "\045\115\046\105\062\uff80\001\002\000\004\005\u0109\001" +
    "\002\000\040\003\uff76\004\uff76\005\uff76\010\uff76\014\uff76" +
    "\015\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025" +
    "\uff76\054\uff76\055\uff76\062\uff76\001\002\000\066\011\130" +
    "\020\012\021\016\022\022\023\023\024\013\025\077\026" +
    "\121\027\142\030\117\031\106\032\144\033\145\034\124" +
    "\035\132\040\110\041\126\042\141\043\131\044\135\045" +
    "\115\046\105\064\147\065\104\066\102\067\116\001\002" +
    "\000\004\062\u0100\001\002\000\004\005\u010d\001\002\000" +
    "\040\003\uff74\004\uff74\005\uff74\010\uff74\014\uff74\015\uff74" +
    "\020\uff74\021\uff74\022\uff74\023\uff74\024\uff74\025\uff74\054" +
    "\uff74\055\uff74\062\uff74\001\002\000\066\011\130\020\012" +
    "\021\016\022\022\023\023\024\013\025\077\026\121\027" +
    "\142\030\117\031\106\032\144\033\145\034\124\035\132" +
    "\040\110\041\126\042\141\043\131\044\135\045\115\046" +
    "\105\064\147\065\104\066\102\067\116\001\002\000\004" +
    "\005\u0110\001\002\000\040\003\uff77\004\uff77\005\uff77\010" +
    "\uff77\014\uff77\015\uff77\020\uff77\021\uff77\022\uff77\023\uff77" +
    "\024\uff77\025\uff77\054\uff77\055\uff77\062\uff77\001\002\000" +
    "\020\025\077\026\121\027\142\064\147\065\104\066\102" +
    "\067\116\001\002\000\004\005\u0115\001\002\000\004\003" +
    "\u0114\001\002\000\022\002\uffc2\003\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\001\002\000\022\002" +
    "\uffc4\003\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\001\002\000\004\013\u0119\001\002\000\004\013" +
    "\u0118\001\002\000\004\005\uffc1\001\002\000\004\005\uffc0" +
    "\001\002\000\012\012\u011d\025\077\064\147\066\102\001" +
    "\002\000\004\012\u0121\001\002\000\004\012\u011f\001\002" +
    "\000\004\003\u011e\001\002\000\040\003\uff69\004\uff69\005" +
    "\uff69\010\uff69\014\uff69\015\uff69\020\uff69\021\uff69\022\uff69" +
    "\023\uff69\024\uff69\025\uff69\054\uff69\055\uff69\062\uff69\001" +
    "\002\000\004\013\u0120\001\002\000\040\003\uff6b\004\uff6b" +
    "\005\uff6b\010\uff6b\014\uff6b\015\uff6b\020\uff6b\021\uff6b\022" +
    "\uff6b\023\uff6b\024\uff6b\025\uff6b\054\uff6b\055\uff6b\062\uff6b" +
    "\001\002\000\004\013\u0122\001\002\000\040\003\uff6a\004" +
    "\uff6a\005\uff6a\010\uff6a\014\uff6a\015\uff6a\020\uff6a\021\uff6a" +
    "\022\uff6a\023\uff6a\024\uff6a\025\uff6a\054\uff6a\055\uff6a\062" +
    "\uff6a\001\002\000\014\020\012\021\016\022\022\023\023" +
    "\024\013\001\002\000\004\012\u0125\001\002\000\004\004" +
    "\uffbe\001\002\000\006\012\u012a\017\u0129\001\002\000\004" +
    "\025\u0128\001\002\000\006\012\uffba\017\uffba\001\002\000" +
    "\014\020\012\021\016\022\022\023\023\024\013\001\002" +
    "\000\004\004\uffbc\001\002\000\004\025\u012c\001\002\000" +
    "\006\012\uffb9\017\uffb9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\004\002\005\001\001\000\002\001\001\000" +
    "\004\070\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\014\017\017\020\013\055\010\001\001\000" +
    "\004\071\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\014\020\024\055\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\031\001\001\000\006\072\u0123\073\u0122\001\001\000" +
    "\002\001\001\000\004\021\033\001\001\000\050\003\047" +
    "\005\037\013\054\014\053\015\040\016\050\025\045\026" +
    "\044\027\043\030\046\032\052\033\065\034\061\044\055" +
    "\046\056\053\036\054\062\057\034\062\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\003\047\005\037\013" +
    "\054\014\053\016\243\025\045\026\044\027\043\030\046" +
    "\032\052\033\065\034\061\044\055\046\056\053\036\054" +
    "\062\057\034\060\u0111\062\051\001\001\000\002\001\001" +
    "\000\006\031\352\061\354\001\001\000\010\006\344\030" +
    "\330\032\052\001\001\000\004\006\333\001\001\000\004" +
    "\006\324\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\245\010\102\064\155\066\111\067\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\073\005\075\014\072\034\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\003\073\004\142\005\135\006\110\007\126\010\102\012" +
    "\124\034\133\035\137\036\145\040\136\041\117\042\106" +
    "\056\121\064\112\066\111\067\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\213\001" +
    "\001\000\014\007\212\010\102\064\155\066\111\067\132" +
    "\001\001\000\002\001\001\000\010\006\205\035\207\037" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\202\010\102\064\155\066\111\067\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\102\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\166\035\161\037\163\001\001\000\002" +
    "\001\001\000\006\006\150\011\151\001\001\000\002\001" +
    "\001\000\010\064\147\066\111\067\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\007\160\010\102\034\157\064" +
    "\155\066\111\067\132\001\001\000\016\007\156\010\102" +
    "\034\154\064\155\066\111\067\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\064\173\066\111\067\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\172\001\001\000\002\001" +
    "\001\000\010\064\167\066\111\067\132\001\001\000\004" +
    "\035\170\001\001\000\010\064\171\066\111\067\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\073\004\142\005\177\006\110\007\176\010" +
    "\102\034\133\035\137\036\145\040\136\041\117\042\175" +
    "\064\112\066\111\067\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\064\211\066\111\067\132\001\001" +
    "\000\002\001\001\000\010\064\210\066\111\067\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\064\214\066\111\067\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\217\010\102\064\155" +
    "\066\111\067\132\001\001\000\002\001\001\000\040\003" +
    "\073\004\142\005\177\006\110\007\176\010\102\034\133" +
    "\035\137\036\145\040\136\041\117\042\221\064\112\066" +
    "\111\067\132\001\001\000\002\001\001\000\014\034\223" +
    "\040\224\064\225\066\111\067\132\001\001\000\004\037" +
    "\163\001\001\000\002\001\001\000\004\037\206\001\001" +
    "\000\002\001\001\000\010\044\230\046\056\057\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\073\005\235\012\124\056\234\001\001\000" +
    "\002\001\001\000\004\011\151\001\001\000\014\034\223" +
    "\040\237\064\225\066\111\067\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\003\047\005\037\013\054" +
    "\014\053\015\242\016\050\025\045\026\044\027\043\030" +
    "\046\032\052\033\065\034\061\044\055\046\056\053\036" +
    "\054\062\057\034\062\051\001\001\000\046\003\047\005" +
    "\037\013\054\014\053\016\243\025\045\026\044\027\043" +
    "\030\046\032\052\033\065\034\061\044\055\046\056\053" +
    "\036\054\062\057\034\062\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\075\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\073\005" +
    "\235\012\124\034\265\036\263\040\261\041\260\056\255" +
    "\064\257\065\264\066\111\067\132\077\256\001\001\000" +
    "\004\011\301\001\001\000\014\007\300\010\102\064\155" +
    "\066\111\067\132\001\001\000\010\006\205\035\207\037" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\073\005\235\012\124\034\265\036\263\040\261\041" +
    "\260\056\255\064\257\065\276\066\111\067\132\001\001" +
    "\000\016\006\273\034\223\040\274\064\225\066\111\067" +
    "\132\001\001\000\004\006\266\001\001\000\010\006\166" +
    "\035\161\037\163\001\001\000\010\064\270\066\111\067" +
    "\132\001\001\000\002\001\001\000\004\011\271\001\001" +
    "\000\004\010\272\001\001\000\002\001\001\000\012\003" +
    "\073\005\235\012\124\056\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\302\010\102\064\155" +
    "\066\111\067\132\001\001\000\002\001\001\000\016\007" +
    "\311\010\102\034\310\064\155\066\111\067\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\074\320\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\331\030\046\032\052\001\001\000\010" +
    "\027\326\030\046\032\052\001\001\000\006\030\330\032" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\330\032\052\001\001\000\002\001\001\000\004\061" +
    "\342\001\001\000\004\100\335\001\001\000\004\061\337" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\350\030\046\032\052\001\001\000\010\027" +
    "\346\030\046\032\052\001\001\000\006\030\330\032\052" +
    "\001\001\000\002\001\001\000\006\030\330\032\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\076\357\001\001\000\002\001" +
    "\001\000\004\061\360\001\001\000\002\001\001\000\032" +
    "\003\073\005\235\012\124\034\265\036\263\040\261\041" +
    "\260\056\255\064\257\065\362\066\111\067\132\001\001" +
    "\000\006\006\266\011\364\001\001\000\002\001\001\000" +
    "\040\003\073\004\142\005\177\006\110\007\176\010\102" +
    "\034\133\035\137\036\145\040\136\041\117\042\365\064" +
    "\112\066\111\067\132\001\001\000\012\003\073\004\367" +
    "\005\177\006\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\076\003\047\004\142\005\374" +
    "\006\110\007\176\010\102\013\054\014\053\016\375\025" +
    "\045\026\044\027\043\030\046\032\052\033\065\034\373" +
    "\035\137\036\145\040\136\041\117\042\372\044\055\046" +
    "\056\053\036\054\062\057\034\062\051\064\112\066\111" +
    "\067\132\001\001\000\004\022\u0107\001\001\000\010\006" +
    "\166\035\161\037\163\001\001\000\004\006\150\001\001" +
    "\000\004\022\376\001\001\000\002\001\001\000\010\064" +
    "\u0101\066\111\067\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\073\005\235\012\124\034\u0106\036\263" +
    "\040\261\041\260\056\255\064\257\065\264\066\111\067" +
    "\132\077\256\001\001\000\010\006\166\035\161\037\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\073\004\142\005\177\006\110\007\176\010\102\034\133" +
    "\035\137\036\145\040\136\041\117\042\u010a\064\112\066" +
    "\111\067\132\001\001\000\004\022\u010b\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\073\004\142\005" +
    "\177\006\110\007\176\010\102\034\133\035\137\036\145" +
    "\040\136\041\117\042\u010e\064\112\066\111\067\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\007\u0116" +
    "\010\102\034\u0115\064\155\066\111\067\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\034\u011a\064\u011b\066\111" +
    "\067\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\u0126\023\u0125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u012a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    BasicLexerCupV lex;

    private int errorCount = 0;

    private Arbol arbol;

    @Override
    public void syntax_error(Symbol s) {
        errorCount++;
        System.err.println("Error sintáctico en línea " + (s.left + 1) +
                           ", columna " + (s.right + 1) + ". Token inesperado: " + s.value);
    }

    // Método para verificar si hubo errores
    public boolean hasErrors() {
        return errorCount > 0;
    }

    @SuppressWarnings("deprecation")
    public parser(BasicLexerCupV lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
        this.currentHash = null;
        this.arbol = new Arbol();
    }

    // Tabla de símbolos
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<>();
    String currentHash;

    public void imprimirTablaSimbolos() {
        for (String key : listaTablasSimbolos.keySet()) {
            System.out.println("\nTabla de símbolos: " + key);
            System.out.println("+--------+---------+----------------------+------------+");
            System.out.println("| Línea  | Columna | Lexema              | Tipo       |");
            System.out.println("+--------+---------+----------------------+------------+");
            for (String simbolo : listaTablasSimbolos.get(key)) {
                System.out.println(simbolo);
            }
            System.out.println("+--------+---------+----------------------+------------+\n");
        }
    }

    public void agregarTablaSimbolos(String tipoTabla, String nombre) {
        System.out.println("/+++Nueva tabla símbolos función o main+++/ " + nombre);
        ArrayList<String> nuevaTabla = new ArrayList<>();
        currentHash = nombre;
        listaTablasSimbolos.put(currentHash, nuevaTabla);
    }

    public void agregarVariable(int linea, int columna, String lexema, String tipo) {
        System.out.println("PARSER: identificador (agregar o verificar) " + lexema);
        if (currentHash == null) {
            System.err.println("Error: No hay una tabla de símbolos activa");
            return;
        }
        ArrayList<String> tabla = listaTablasSimbolos.get(currentHash);
        if (tabla == null) {
            System.err.println("Error: La tabla de símbolos '" + currentHash + "' no existe");
            return;
        }
        String entrada = String.format("| %-6d | %-7d | %-20s | %-10s |",
                linea + 1, columna + 1, lexema, tipo);
        tabla.add(entrada);
    }

    public Arbol getArbol() {
        return arbol;
    }

    private Nodo crearNodo(String dato) {
        return new Nodo(dato);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

 
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        parser.agregarTablaSimbolos("main", "_verano_");
        Nodo mainNode = new Nodo("_verano_");
        parser.getArbol().setRaiz(mainNode);
        RESULT = mainNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= MAIN NT$0 funciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;
		
             System.err.println("Error en la estructura inicial.");
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos ::= INTEGER 
            {
              Object RESULT =null;
		RESULT="rodolfo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipos ::= STRING 
            {
              Object RESULT =null;
		RESULT="cometa";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipos ::= CHAR 
            {
              Object RESULT =null;
		RESULT="cupido";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipos ::= FLOAT 
            {
              Object RESULT =null;
		RESULT="bromista";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipos ::= BOOL 
            {
              Object RESULT =null;
		RESULT="trueno";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tiposArr ::= L_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Symbol symbol = (Symbol) CUP$parser$stack.peek();
                              parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "rodolfo");
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiposArr",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tiposArr ::= L_CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Symbol symbol = (Symbol) CUP$parser$stack.peek();
                            parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cupido");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiposArr",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literales ::= L_STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cometa");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literales ::= L_CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cupido");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literales ::= bool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literales ::= numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // numerosLiterales ::= numeroEntero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerosLiterales",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // numerosLiterales ::= numeroFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerosLiterales",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // numeroEntero ::= L_INTEGER 
            {
              Object RESULT =null;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "rodolfo");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeroEntero",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // numeroFloat ::= L_FLOAT 
            {
              Object RESULT =null;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "bromista");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeroFloat",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bool ::= TRUE 
            {
              Object RESULT =null;
		RESULT="true";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bool ::= FALSE 
            {
              Object RESULT =null;
		RESULT="false";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresionRelacional ::= asignarTipo operadorRelacional literales 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión relacional: " + op + " " + l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresionRelacional ::= asignarTipo operadorRelacional variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresionRelacional ::= operadorRelacional literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresionLogica ::= asignarTipo operadorLogico literales 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión lógica: " + op + " " + l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresionLogica ::= negacion literales 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión lógica con negación: !" + n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresionLogica ::= asignarTipo operadorLogico variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignarTipo ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (t == null || idVar == null) {
            System.err.println("Error: Tipo o identificador no definido.");
            parser.agregarVariable(0, 0, "undefined", "undefined");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, idVar.toString(), t.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarTipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operadorRelacional ::= MENOR 
            {
              Object RESULT =null;
		RESULT="snowball";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operadorRelacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="evergreen";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operadorRelacional ::= MAYOR 
            {
              Object RESULT =null;
		RESULT="minstix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operadorRelacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="upatree";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operadorRelacional ::= IGUAL 
            {
              Object RESULT =null;
		RESULT="mary";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operadorRelacional ::= DIFERENTE 
            {
              Object RESULT =null;
		RESULT="openslae";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operadorLogico ::= CONJUNCION 
            {
              Object RESULT =null;
		RESULT="melchor";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operadorLogico ::= DISYUNCION 
            {
              Object RESULT =null;
		RESULT="gaspar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // negacion ::= NEGACION 
            {
              Object RESULT =null;
		RESULT="baltazar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // creacion ::= asignarTipo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // creacion ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Asignación inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // creacionAsignacion ::= asignarTipo ASIGNA expresiones FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // creacionAsignacion ::= asignarTipo ASIGNA expresionLogica FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // creacionAsignacion ::= asignarTipo ASIGNA IDENTIFICADOR FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // creacionAsignacion ::= asignarTipo error 
            {
              Object RESULT =null;
		 System.err.println("Error: Expresión inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // creacionAsignacion ::= ASIGNA literales FIN_EXPRESION error 
            {
              Object RESULT =null;
		 System.err.println("Error: Falta la asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // creacionAsignacion ::= asignarTipo ASIGNA literales error 
            {
              Object RESULT =null;
		 System.err.println("Error: Falta el fin de expresión"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia ::= expresionArr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia ::= sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia ::= asignaVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia ::= print 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencia ::= read 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 parser.agregarTablaSimbolos("funcion", e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // funcion ::= encabezadoFuncion NT$1 parametros bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // encabezadoFuncion ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), t.toString());
        RESULT = id.toString();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // encabezadoFuncion ::= IDENTIFICADOR error 
            {
              Object RESULT =null;
		 System.err.println("Error: Al encabezado de la función le falta el tipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // encabezadoFuncion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bloque ::= corcheteIzquierdo sentencias return_funcion corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloque ::= corcheteIzquierdo corcheteDerecho error 
            {
              Object RESULT =null;
		 System.err.println("Error: bloque vacio"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque ::= corcheteIzquierdo sentencias corcheteDerecho error 
            {
              Object RESULT =null;
		 System.err.println("Error: A la función le falta el retorno"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // return_funcion ::= RETURN literales FIN_EXPRESION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if (t == null) {
            System.err.println("Error: El tipo de retorno es nulo.");
            parser.agregarVariable(0, 0, "return", "undefined");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "return", t.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_funcion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // return_funcion ::= RETURN variable FIN_EXPRESION 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if (v == null) {
            System.err.println("Error: El valor de retorno es nulo.");
            parser.agregarVariable(0, 0, "return", "undefined");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "return", v.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_funcion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$2 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametros ::= PARENTESISAPERTURA NT$2 PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$3 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametros ::= PARENTESISAPERTURA NT$3 parametroAux PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametros ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Parametros mal definidos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametroAux ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (t == null || id == null) {
            System.err.println("Error: Parámetro inválido (tipo o identificador nulo).");
            parser.agregarVariable(0, 0, "parametro: undefined", "undefined");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "parametro: " + id.toString(), t.toString());
            System.out.println("Parámetro agregado: " + id.toString() + " de tipo " + t.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametroAux ::= parametroAux COMA tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (t == null || id == null) {
            System.err.println("Error: Parámetro adicional inválido (tipo o identificador nulo).");
            parser.agregarVariable(0, 0, "parametro: undefined", "undefined");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "parametro: " + id.toString(), t.toString());
            System.out.println("Parámetro adicional agregado: " + id.toString() + " de tipo " + t.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresionArr ::= crearArreglos operadorRelacional arreglos FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionArr",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresionArr ::= crearArreglos ASIGNA arreglos FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionArr",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresionArr ::= arreglos ASIGNA arreglos FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionArr",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresionArr ::= arreglos operadorRelacional arreglos FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionArr",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$4 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Symbol symbol = (Symbol) CUP$parser$stack.peek();
                parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), t.toString() + "[]");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // crearArreglos ::= tipos IDENTIFICADOR NT$4 CORCHETEAPERTURA IDENTIFICADOR CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idVarArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idVarArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idVarArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearArreglos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$5 ::= 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = "abreempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // modificarArreglos ::= IDENTIFICADOR CORCHETEAPERTURA NT$5 IDENTIFICADOR CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "cierraempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modificarArreglos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // arreglos ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arreglos ::= arreglos arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arreglo ::= parametrosArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametrosArreglo ::= corcheteIzquierdo corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametrosArreglo ::= corcheteIzquierdo parametrosArregloAux corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametrosArregloAux ::= tiposArr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArregloAux",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$6 ::= 
            {
              Object RESULT =null;
 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parametrosArregloAux ::= parametrosArregloAux COMA NT$6 tiposArr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArregloAux",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$7 ::= 
            {
              Object RESULT =null;
RESULT="entrega";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // asignaVariable ::= variable ASIGNA NT$7 literales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // asignaVariable ::= variable ASIGNA expresionCompleja FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$8 ::= 
            {
              Object RESULT =null;
RESULT="entrega";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // asignaVariable ::= modificarArreglos ASIGNA NT$8 tiposArr FIN_EXPRESION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // asignaVariable ::= modificarArreglos operadorRelacional tiposArr FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // variable ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Variable: " + idVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresionCompleja ::= expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresionCompleja ::= expresionUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresionCompleja ::= expresionRelacionalMat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresionCompleja ::= expresionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresionCompleja ::= PARENTESISAPERTURA expresionCompleja PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresionCompleja ::= expresionBinaria operadorRelacional expresionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresionCompleja ::= expresionLogica operadorLogico literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresionCompleja ::= expresionBinaria expresionUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresionCompleja ::= expresionCompleja operadorRelacional numerosLiterales operadorLogico bool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operandoBinaria ::= SUMA 
            {
              Object RESULT =null;
		RESULT="navidad";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operandoBinaria ::= RESTA 
            {
              Object RESULT =null;
		RESULT="intercambio";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operandoBinaria ::= DIVISION 
            {
              Object RESULT =null;
		RESULT="reyes";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operandoBinaria ::= MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT="nochebuena";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operandoBinaria ::= MODULO 
            {
              Object RESULT =null;
		RESULT="magos";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operandoBinaria ::= POTENCIA 
            {
              Object RESULT =null;
		RESULT="adviento";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresionBinaria ::= numerosLiterales operandoBinaria numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresionBinaria ::= numerosLiterales operandoBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresionBinaria ::= variable operandoBinaria numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operandoUnario ::= INCREMENTO 
            {
              Object RESULT =null;
		RESULT="quien";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operandoUnario ::= DECREMENTO 
            {
              Object RESULT =null;
		RESULT="grinch";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresionUnario ::= numerosLiterales operandoUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$9 ::= 
            {
              Object RESULT =null;
RESULT="-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresionUnario ::= NEGATIVO NT$9 numerosLiterales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresionUnario ::= variable operandoUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresionRelacionalMat ::= numerosLiterales operadorRelacional numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacionalMat",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresionRelacionalMat ::= variable operadorRelacional numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacionalMat",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expresionRelacionalMat ::= variable operadorRelacional numerosLiterales operandoBinaria numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacionalMat",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expresiones ::= expresionRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresiones ::= literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresiones ::= operandoBinaria numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresiones ::= expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresiones ::= expresionUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresiones ::= expresionRelacionalMat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expresiones ::= variable ASIGNA variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$10 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expresiones ::= PARENTESISAPERTURA NT$10 expresiones PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentencia_lista ::= sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_lista",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sentencia_lista ::= sentencia_lista sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_lista",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sentenciaEstructura ::= for_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentenciaEstructura ::= while_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // for_estructura ::= FOR PARENTESISAPERTURA variable ASIGNA literales COMA expresiones COMA expresionUnario PARENTESISCIERRE corcheteIzquierdo sentenciaEstructura corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_estructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // for_estructura ::= FOR PARENTESISAPERTURA creacionAsignacion COMA expresionLogica COMA expresionUnario PARENTESISCIERRE corcheteIzquierdo sentencias corcheteDerecho 
            {
              Object RESULT =null;
		
        System.out.println("Estructura for reconocida.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_estructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // while_estructura ::= WHILE PARENTESISAPERTURA expresionCompleja PARENTESISCIERRE corcheteIzquierdo expresiones corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_estructura",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // while_estructura ::= WHILE PARENTESISAPERTURA expresionCompleja operadorLogico expresiones expresionRelacional PARENTESISCIERRE corcheteIzquierdo expresiones return_estructura corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_estructura",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // while_estructura ::= WHILE PARENTESISAPERTURA expresionCompleja operadorLogico expresiones expresionRelacional PARENTESISCIERRE corcheteIzquierdo sentencia return_estructura corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_estructura",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // while_estructura ::= WHILE PARENTESISAPERTURA expresionCompleja operadorLogico expresiones PARENTESISCIERRE corcheteIzquierdo expresiones return_estructura corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_estructura",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // return_estructura ::= RETURN numerosLiterales FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // return_estructura ::= RETURN FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // break_estructura ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_estructura",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // print ::= PRINT PARENTESISAPERTURA literales PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // print ::= PRINT PARENTESISAPERTURA variable PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // print ::= PRINT PARENTESISAPERTURA variable error 
            {
              Object RESULT =null;
		 System.err.println("Error: No se cerró el print"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // print ::= PRINT error 
            {
              Object RESULT =null;
		 System.err.println("Error: Print mal formado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // print ::= PRINT variable PARENTESISCIERRE error 
            {
              Object RESULT =null;
		 System.err.println("Print mal formado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // read ::= READ PARENTESISAPERTURA numerosLiterales PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // read ::= READ PARENTESISAPERTURA variable PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // read ::= READ PARENTESISAPERTURA PARENTESISCIERRE error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
