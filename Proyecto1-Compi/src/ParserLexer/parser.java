
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\063\002\000\002\002" +
    "\005\000\002\002\003\000\002\002\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\003\000\002\010\003\000\002\004\005\000\002\004\003" +
    "\000\002\061\005\000\002\061\004\000\002\061\003\000" +
    "\002\005\004\000\002\005\004\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\003\000\002\013\004\000\002\014\006\000" +
    "\002\015\003\000\002\015\004\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\017\003\000\002\017\004\000\002\064\002\000" +
    "\002\020\005\000\002\060\005\000\002\021\005\000\002" +
    "\024\004\000\002\024\005\000\002\023\003\000\002\023" +
    "\005\000\002\004\005\000\002\061\005\000\002\025\005" +
    "\000\002\025\005\000\002\065\002\000\002\026\010\000" +
    "\002\027\006\000\002\030\003\000\002\030\004\000\002" +
    "\031\003\000\002\033\004\000\002\033\005\000\002\032" +
    "\003\000\002\032\005\000\002\004\005\000\002\061\005" +
    "\000\002\066\002\000\002\034\006\000\002\034\005\000" +
    "\002\035\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\037\005\000\002\040\003\000\002\040\003" +
    "\000\002\041\004\000\002\067\002\000\002\041\005\000" +
    "\002\042\005\000\002\043\003\000\002\043\003\000\002" +
    "\043\004\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\005\000\002\044\003\000\002\044\003" +
    "\000\002\045\003\000\002\045\004\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\004\000\002\047" +
    "\007\000\002\047\011\000\002\050\011\000\002\062\007" +
    "\000\002\051\005\000\002\051\006\000\002\070\002\000" +
    "\002\052\012\000\002\053\003\000\002\053\004\000\002" +
    "\054\006\000\002\054\005\000\002\022\005\000\002\022" +
    "\004\000\002\055\004\000\002\056\006\000\002\056\006" +
    "\000\002\057\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\020\003\014\016\011\020\005\021\013\022" +
    "\017\023\016\024\006\001\002\000\004\004\uffd2\001\002" +
    "\000\006\003\ufffc\070\ufffc\001\002\000\006\003\ufff8\070" +
    "\ufff8\001\002\000\016\002\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\001\002\000\004\070\312\001\002\000" +
    "\030\014\000\015\000\020\000\021\000\022\000\023\000" +
    "\024\000\055\000\060\000\061\000\070\000\001\002\000" +
    "\004\002\021\001\002\000\006\003\ufffb\070\ufffb\001\002" +
    "\000\004\002\ufffd\001\002\000\016\002\ufffe\020\005\021" +
    "\013\022\017\023\016\024\006\001\002\000\006\003\ufff9" +
    "\070\ufff9\001\002\000\006\003\ufffa\070\ufffa\001\002\000" +
    "\016\002\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\001\002\000\004\002\001\001\002\000\030\014\042\015" +
    "\024\020\005\021\013\022\017\023\016\024\006\055\032" +
    "\060\041\061\031\070\045\001\002\000\076\002\uffd5\003" +
    "\uffd5\005\uffd5\011\uffd5\014\uffd5\015\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\037\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\064" +
    "\uffd5\067\uffd5\070\uffd5\001\002\000\004\011\307\001\002" +
    "\000\076\002\uffd6\003\uffd6\005\uffd6\011\uffd6\014\uffd6\015" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\037\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\064\uffd6\067\uffd6\070\uffd6\001\002\000" +
    "\006\010\304\013\303\001\002\000\076\002\uffd9\003\uffd9" +
    "\005\uffd9\011\uffd9\014\uffd9\015\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\037\uffd9\051\uffd9\052\uffd9\053\uffd9\054" +
    "\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\064\uffd9" +
    "\067\uffd9\070\uffd9\001\002\000\032\002\uffff\014\042\015" +
    "\024\020\005\021\013\022\017\023\016\024\006\055\032" +
    "\060\041\061\031\070\045\001\002\000\010\013\277\020" +
    "\112\023\113\001\002\000\004\011\077\001\002\000\004" +
    "\010\075\001\002\000\006\003\073\070\074\001\002\000" +
    "\076\002\uffda\003\uffda\005\uffda\011\uffda\014\uffda\015\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\037\uffda\051\uffda" +
    "\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060" +
    "\uffda\061\uffda\064\uffda\067\uffda\070\uffda\001\002\000\034" +
    "\002\uffde\005\uffde\014\uffde\015\uffde\020\uffde\021\uffde\022" +
    "\uffde\023\uffde\024\uffde\055\uffde\060\uffde\061\uffde\070\uffde" +
    "\001\002\000\076\002\uffdb\003\uffdb\005\uffdb\011\uffdb\014" +
    "\uffdb\015\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\037" +
    "\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb" +
    "\057\uffdb\060\uffdb\061\uffdb\064\uffdb\067\uffdb\070\uffdb\001" +
    "\002\000\076\002\uffd7\003\uffd7\005\uffd7\011\uffd7\014\uffd7" +
    "\015\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\037\uffd7" +
    "\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057" +
    "\uffd7\060\uffd7\061\uffd7\064\uffd7\067\uffd7\070\uffd7\001\002" +
    "\000\004\013\072\001\002\000\004\011\064\001\002\000" +
    "\004\010\052\001\002\000\076\002\uffd8\003\uffd8\005\uffd8" +
    "\011\uffd8\014\uffd8\015\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\037\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055" +
    "\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\064\uffd8\067\uffd8" +
    "\070\uffd8\001\002\000\006\006\047\010\uffb7\001\002\000" +
    "\076\002\uffdc\003\uffdc\005\uffdc\011\uffdc\014\uffdc\015\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\037\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060" +
    "\uffdc\061\uffdc\064\uffdc\067\uffdc\070\uffdc\001\002\000\004" +
    "\070\050\001\002\000\004\007\051\001\002\000\004\010" +
    "\uffc4\001\002\000\016\025\uffba\026\uffba\064\uffba\065\uffba" +
    "\066\uffba\067\uffba\001\002\000\016\025\057\026\060\064" +
    "\055\065\054\066\062\067\063\001\002\000\102\002\ufff6" +
    "\003\ufff6\005\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\027\ufff6" +
    "\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\037\ufff6\051" +
    "\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6" +
    "\060\ufff6\061\ufff6\064\ufff6\067\ufff6\070\ufff6\001\002\000" +
    "\102\002\ufff7\003\ufff7\005\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\037\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056" +
    "\ufff7\057\ufff7\060\ufff7\061\ufff7\064\ufff7\067\ufff7\070\ufff7" +
    "\001\002\000\102\002\ufff3\003\ufff3\005\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\037\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\064\ufff3\067" +
    "\ufff3\070\ufff3\001\002\000\102\002\ufff2\003\ufff2\005\ufff2" +
    "\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\032\ufff2\033\ufff2\034\ufff2\037\ufff2\051\ufff2\052\ufff2\053" +
    "\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2" +
    "\064\ufff2\067\ufff2\070\ufff2\001\002\000\102\002\ufff1\003" +
    "\ufff1\005\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\027\ufff1\030" +
    "\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\037\ufff1\051\ufff1" +
    "\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060" +
    "\ufff1\061\ufff1\064\ufff1\067\ufff1\070\ufff1\001\002\000\076" +
    "\002\uffb9\003\uffb9\005\uffb9\011\uffb9\014\uffb9\015\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\032\uffb9\033\uffb9\034\uffb9\037\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\064\uffb9\067\uffb9\070\uffb9\001\002\000\102\002" +
    "\ufff5\003\ufff5\005\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\027" +
    "\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\037\ufff5" +
    "\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057" +
    "\ufff5\060\ufff5\061\ufff5\064\ufff5\067\ufff5\070\ufff5\001\002" +
    "\000\102\002\ufff4\003\ufff4\005\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\015\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4" +
    "\024\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\037\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4" +
    "\056\ufff4\057\ufff4\060\ufff4\061\ufff4\064\ufff4\067\ufff4\070" +
    "\ufff4\001\002\000\020\025\057\026\060\064\055\065\054" +
    "\066\062\067\063\070\067\001\002\000\004\012\071\001" +
    "\002\000\004\012\070\001\002\000\006\012\uffb7\013\uffb7" +
    "\001\002\000\076\002\uff88\003\uff88\005\uff88\011\uff88\014" +
    "\uff88\015\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88" +
    "\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\037" +
    "\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056\uff88" +
    "\057\uff88\060\uff88\061\uff88\064\uff88\067\uff88\070\uff88\001" +
    "\002\000\076\002\uff87\003\uff87\005\uff87\011\uff87\014\uff87" +
    "\015\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87\027" +
    "\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87\037\uff87" +
    "\051\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057" +
    "\uff87\060\uff87\061\uff87\064\uff87\067\uff87\070\uff87\001\002" +
    "\000\076\002\uff89\003\uff89\005\uff89\011\uff89\014\uff89\015" +
    "\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89\027\uff89" +
    "\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\037\uff89\051" +
    "\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\057\uff89" +
    "\060\uff89\061\uff89\064\uff89\067\uff89\070\uff89\001\002\000" +
    "\034\005\uffea\010\uffea\012\uffea\013\uffea\017\uffea\040\uffea" +
    "\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047" +
    "\uffea\001\002\000\034\005\uffeb\010\uffeb\012\uffeb\013\uffeb" +
    "\017\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\001\002\000\016\025\057\026\060" +
    "\064\055\065\054\066\062\067\063\001\002\000\076\002" +
    "\uffb8\003\uffb8\005\uffb8\011\uffb8\014\uffb8\015\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\037\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\064\uffb8\067\uffb8\070\uffb8\001\002\000\004\070\067" +
    "\001\002\000\004\012\101\001\002\000\004\004\uff91\001" +
    "\002\000\004\004\103\001\002\000\006\056\105\057\104" +
    "\001\002\000\004\062\275\001\002\000\006\020\112\023" +
    "\113\001\002\000\010\005\uff8f\056\uff8f\057\uff8f\001\002" +
    "\000\010\005\110\056\105\057\104\001\002\000\076\002" +
    "\uff90\003\uff90\005\uff90\011\uff90\014\uff90\015\uff90\020\uff90" +
    "\021\uff90\022\uff90\023\uff90\024\uff90\027\uff90\030\uff90\031" +
    "\uff90\032\uff90\033\uff90\034\uff90\037\uff90\051\uff90\052\uff90" +
    "\053\uff90\054\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061" +
    "\uff90\064\uff90\067\uff90\070\uff90\001\002\000\010\005\uff8e" +
    "\056\uff8e\057\uff8e\001\002\000\012\012\uffa2\013\uffa2\062" +
    "\uffa2\063\uffa2\001\002\000\012\012\uffa1\013\uffa1\062\uffa1" +
    "\063\uffa1\001\002\000\004\062\115\001\002\000\056\003" +
    "\133\011\142\020\120\021\013\022\017\023\147\024\006" +
    "\027\127\030\117\031\153\032\157\033\135\034\143\037" +
    "\124\051\130\053\144\054\123\055\032\060\041\061\031" +
    "\064\155\067\125\001\002\000\066\003\uff99\005\uff99\011" +
    "\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\027\uff99" +
    "\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\037\uff99\051" +
    "\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99" +
    "\060\uff99\061\uff99\064\uff99\067\uff99\001\002\000\006\020" +
    "\uffb5\023\uffb5\001\002\000\046\003\ufffc\012\uffa2\013\uffa2" +
    "\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035" +
    "\uffa2\036\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2" +
    "\045\uffa2\070\ufffc\001\002\000\004\013\274\001\002\000" +
    "\066\003\uff9b\005\uff9b\011\uff9b\020\uff9b\021\uff9b\022\uff9b" +
    "\023\uff9b\024\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033" +
    "\uff9b\034\uff9b\037\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b" +
    "\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\064\uff9b\067" +
    "\uff9b\001\002\000\004\011\262\001\002\000\006\020\uffac" +
    "\023\uffac\001\002\000\004\006\256\001\002\000\066\003" +
    "\uff9a\005\uff9a\011\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a" +
    "\024\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034" +
    "\uff9a\037\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a" +
    "\056\uff9a\057\uff9a\060\uff9a\061\uff9a\064\uff9a\067\uff9a\001" +
    "\002\000\006\020\uffb6\023\uffb6\001\002\000\004\011\250" +
    "\001\002\000\006\012\uffa4\013\uffa4\001\002\000\066\003" +
    "\uff9e\005\uff9e\011\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e" +
    "\024\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034" +
    "\uff9e\037\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\061\uff9e\064\uff9e\067\uff9e\001" +
    "\002\000\006\012\uffef\013\uffef\001\002\000\016\040\166" +
    "\041\167\042\170\043\171\044\164\045\165\001\002\000" +
    "\006\020\uffb2\023\uffb2\001\002\000\064\003\133\005\uff8d" +
    "\011\142\020\120\021\013\022\017\023\147\024\006\027" +
    "\127\030\117\031\153\032\157\033\135\034\143\037\124" +
    "\051\130\053\144\054\123\055\032\056\uff8d\057\uff8d\060" +
    "\041\061\031\064\155\067\125\001\002\000\042\012\uffa8" +
    "\013\uffa8\027\127\030\117\031\153\032\157\033\135\034" +
    "\143\035\241\036\242\040\166\041\167\042\170\043\171" +
    "\044\164\045\165\001\002\000\066\003\uff9d\005\uff9d\011" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\027\uff9d" +
    "\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\037\uff9d\051" +
    "\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d" +
    "\060\uff9d\061\uff9d\064\uff9d\067\uff9d\001\002\000\066\003" +
    "\uff9c\005\uff9c\011\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c" +
    "\024\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034" +
    "\uff9c\037\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c" +
    "\056\uff9c\057\uff9c\060\uff9c\061\uff9c\064\uff9c\067\uff9c\001" +
    "\002\000\042\003\133\011\142\020\120\021\013\022\017" +
    "\023\147\024\006\027\127\030\117\031\153\032\157\033" +
    "\135\034\143\037\124\064\155\067\125\001\002\000\006" +
    "\020\uffb1\023\uffb1\001\002\000\004\011\201\001\002\000" +
    "\004\070\174\001\002\000\016\040\166\041\167\042\170" +
    "\043\171\044\164\045\165\001\002\000\046\003\ufff9\012" +
    "\uffa1\013\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\036\uffa1\040\uffa1\041\uffa1\042\uffa1\043" +
    "\uffa1\044\uffa1\045\uffa1\070\ufff9\001\002\000\006\012\uffa5" +
    "\013\uffa5\001\002\000\006\020\112\023\113\001\002\000" +
    "\006\012\uffa9\013\uffa9\001\002\000\006\020\uffb4\023\uffb4" +
    "\001\002\000\064\003\uffa0\005\uffa0\011\uffa0\020\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\024\uffa0\027\uffa0\030\uffa0\031\uffa0" +
    "\032\uffa0\033\uffa0\034\uffa0\037\uffa0\051\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\064\uffa0" +
    "\067\uffa0\001\002\000\004\006\160\001\002\000\006\012" +
    "\uffa6\013\uffa6\001\002\000\006\020\uffb3\023\uffb3\001\002" +
    "\000\004\007\161\001\002\000\004\070\uffc7\001\002\000" +
    "\006\012\uffa7\013\uffa7\001\002\000\020\025\057\026\060" +
    "\064\055\065\054\066\062\067\063\070\067\001\002\000" +
    "\026\004\uffe5\020\uffe5\023\uffe5\025\uffe5\026\uffe5\064\uffe5" +
    "\065\uffe5\066\uffe5\067\uffe5\070\uffe5\001\002\000\026\004" +
    "\uffe4\020\uffe4\023\uffe4\025\uffe4\026\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\067\uffe4\070\uffe4\001\002\000\026\004\uffe9\020" +
    "\uffe9\023\uffe9\025\uffe9\026\uffe9\064\uffe9\065\uffe9\066\uffe9" +
    "\067\uffe9\070\uffe9\001\002\000\026\004\uffe8\020\uffe8\023" +
    "\uffe8\025\uffe8\026\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8" +
    "\070\uffe8\001\002\000\026\004\uffe7\020\uffe7\023\uffe7\025" +
    "\uffe7\026\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7" +
    "\001\002\000\026\004\uffe6\020\uffe6\023\uffe6\025\uffe6\026" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\001\002" +
    "\000\006\012\uffbc\013\uffbc\001\002\000\006\012\ufff0\013" +
    "\ufff0\001\002\000\004\006\uffc6\001\002\000\004\006\176" +
    "\001\002\000\004\070\177\001\002\000\004\007\200\001" +
    "\002\000\022\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\001\002\000\024\003\204\020" +
    "\005\021\013\022\017\023\016\024\006\050\207\064\155" +
    "\067\125\001\002\000\004\012\232\001\002\000\006\046" +
    "\210\047\211\001\002\000\004\012\uffec\001\002\000\016" +
    "\025\057\026\060\064\055\065\054\066\062\067\063\001" +
    "\002\000\006\046\210\047\211\001\002\000\016\025\uffe1" +
    "\026\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\001\002\000" +
    "\024\004\uffe3\012\uffe3\025\uffe3\026\uffe3\064\uffe3\065\uffe3" +
    "\066\uffe3\067\uffe3\070\uffe3\001\002\000\024\004\uffe2\012" +
    "\uffe2\025\uffe2\026\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2" +
    "\070\uffe2\001\002\000\004\004\214\001\002\000\010\004" +
    "\uffc1\012\uffc1\013\uffc1\001\002\000\016\005\222\020\005" +
    "\021\013\022\017\023\016\024\006\001\002\000\006\004" +
    "\214\012\uffc9\001\002\000\010\004\uffc3\012\uffc3\013\uffc3" +
    "\001\002\000\010\004\uffc2\012\uffc2\013\uffc2\001\002\000" +
    "\006\005\uffbe\017\uffbe\001\002\000\006\005\224\017\223" +
    "\001\002\000\010\004\uffc0\012\uffc0\013\uffc0\001\002\000" +
    "\014\020\005\021\013\022\017\023\016\024\006\001\002" +
    "\000\010\004\uffbf\012\uffbf\013\uffbf\001\002\000\006\005" +
    "\uffbd\017\uffbd\001\002\000\004\012\uffed\001\002\000\020" +
    "\025\057\026\060\064\055\065\054\066\062\067\063\070" +
    "\067\001\002\000\004\012\uffbb\001\002\000\004\012\uffee" +
    "\001\002\000\056\003\133\011\142\020\120\021\013\022" +
    "\017\023\147\024\006\027\127\030\117\031\153\032\157" +
    "\033\135\034\143\037\124\051\130\053\144\054\123\055" +
    "\032\060\041\061\031\064\155\067\125\001\002\000\066" +
    "\003\uff94\005\uff94\011\uff94\020\uff94\021\uff94\022\uff94\023" +
    "\uff94\024\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94" +
    "\034\uff94\037\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055" +
    "\uff94\056\uff94\057\uff94\060\uff94\061\uff94\064\uff94\067\uff94" +
    "\001\002\000\004\012\235\001\002\000\006\012\uffa3\013" +
    "\uffa3\001\002\000\006\020\112\023\113\001\002\000\006" +
    "\012\uffad\013\uffad\001\002\000\006\020\112\023\113\001" +
    "\002\000\006\012\uffaf\013\uffaf\001\002\000\006\012\uffae" +
    "\013\uffae\001\002\000\006\012\uffb0\013\uffb0\001\002\000" +
    "\006\012\uffaa\013\uffaa\001\002\000\064\003\uff9f\005\uff9f" +
    "\011\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\027" +
    "\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\037\uff9f" +
    "\051\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060" +
    "\uff9f\061\uff9f\064\uff9f\067\uff9f\001\002\000\004\004\214" +
    "\001\002\000\010\004\214\012\uffca\013\uffca\001\002\000" +
    "\006\046\210\047\211\001\002\000\004\012\252\001\002" +
    "\000\056\003\133\011\142\020\120\021\013\022\017\023" +
    "\147\024\006\027\127\030\117\031\153\032\157\033\135" +
    "\034\143\037\124\051\130\053\144\054\123\055\032\060" +
    "\041\061\031\064\155\067\125\001\002\000\066\003\uff97" +
    "\005\uff97\011\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024" +
    "\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97" +
    "\037\uff97\051\uff97\052\254\053\uff97\054\uff97\055\uff97\056" +
    "\uff97\057\uff97\060\uff97\061\uff97\064\uff97\067\uff97\001\002" +
    "\000\056\003\133\011\142\020\120\021\013\022\017\023" +
    "\147\024\006\027\127\030\117\031\153\032\157\033\135" +
    "\034\143\037\124\051\130\053\144\054\123\055\032\060" +
    "\041\061\031\064\155\067\125\001\002\000\066\003\uff96" +
    "\005\uff96\011\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024" +
    "\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96" +
    "\037\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056" +
    "\uff96\057\uff96\060\uff96\061\uff96\064\uff96\067\uff96\001\002" +
    "\000\004\007\257\001\002\000\004\070\uffc8\001\002\000" +
    "\006\020\112\023\113\001\002\000\006\012\uffab\013\uffab" +
    "\001\002\000\004\070\263\001\002\000\004\062\264\001" +
    "\002\000\006\020\112\023\113\001\002\000\004\012\272" +
    "\001\002\000\004\063\267\001\002\000\006\020\112\023" +
    "\113\001\002\000\006\012\uff93\063\271\001\002\000\004" +
    "\012\uff92\001\002\000\030\014\042\015\024\020\005\021" +
    "\013\022\017\023\016\024\006\055\032\060\041\061\031" +
    "\070\045\001\002\000\066\003\uff95\005\uff95\011\uff95\020" +
    "\uff95\021\uff95\022\uff95\023\uff95\024\uff95\027\uff95\030\uff95" +
    "\031\uff95\032\uff95\033\uff95\034\uff95\037\uff95\051\uff95\052" +
    "\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060\uff95" +
    "\061\uff95\064\uff95\067\uff95\001\002\000\066\003\uff98\005" +
    "\uff98\011\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98" +
    "\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\037" +
    "\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98" +
    "\057\uff98\060\uff98\061\uff98\064\uff98\067\uff98\001\002\000" +
    "\056\003\133\011\142\020\120\021\013\022\017\023\147" +
    "\024\006\027\127\030\117\031\153\032\157\033\135\034" +
    "\143\037\124\051\130\053\144\054\123\055\032\060\041" +
    "\061\031\064\155\067\125\001\002\000\064\003\133\005" +
    "\uff8c\011\142\020\120\021\013\022\017\023\147\024\006" +
    "\027\127\030\117\031\153\032\157\033\135\034\143\037" +
    "\124\051\130\053\144\054\123\055\032\056\uff8c\057\uff8c" +
    "\060\041\061\031\064\155\067\125\001\002\000\076\002" +
    "\uff8a\003\uff8a\005\uff8a\011\uff8a\014\uff8a\015\uff8a\020\uff8a" +
    "\021\uff8a\022\uff8a\023\uff8a\024\uff8a\027\uff8a\030\uff8a\031" +
    "\uff8a\032\uff8a\033\uff8a\034\uff8a\037\uff8a\051\uff8a\052\uff8a" +
    "\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\061" +
    "\uff8a\064\uff8a\067\uff8a\070\uff8a\001\002\000\004\013\301" +
    "\001\002\000\076\002\uff8b\003\uff8b\005\uff8b\011\uff8b\014" +
    "\uff8b\015\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b" +
    "\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\037" +
    "\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b" +
    "\057\uff8b\060\uff8b\061\uff8b\064\uff8b\067\uff8b\070\uff8b\001" +
    "\002\000\034\002\uffdd\005\uffdd\014\uffdd\015\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\024\uffdd\055\uffdd\060\uffdd\061" +
    "\uffdd\070\uffdd\001\002\000\076\002\uffe0\003\uffe0\005\uffe0" +
    "\011\uffe0\014\uffe0\015\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\037\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055" +
    "\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\064\uffe0\067\uffe0" +
    "\070\uffe0\001\002\000\016\025\057\026\060\064\055\065" +
    "\054\066\062\067\063\001\002\000\004\013\306\001\002" +
    "\000\076\002\uffdf\003\uffdf\005\uffdf\011\uffdf\014\uffdf\015" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\037\uffdf\051" +
    "\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\060\uffdf\061\uffdf\064\uffdf\067\uffdf\070\uffdf\001\002\000" +
    "\006\020\112\023\113\001\002\000\004\012\311\001\002" +
    "\000\076\002\uff86\003\uff86\005\uff86\011\uff86\014\uff86\015" +
    "\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86\027\uff86" +
    "\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86\037\uff86\051" +
    "\uff86\052\uff86\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86" +
    "\060\uff86\061\uff86\064\uff86\067\uff86\070\uff86\001\002\000" +
    "\004\011\313\001\002\000\016\012\315\020\005\021\013" +
    "\022\017\023\016\024\006\001\002\000\004\004\uffd0\001" +
    "\002\000\004\004\uffce\001\002\000\006\012\uffcc\017\uffcc" +
    "\001\002\000\006\012\321\017\320\001\002\000\014\020" +
    "\005\021\013\022\017\023\016\024\006\001\002\000\004" +
    "\004\uffcd\001\002\000\006\012\uffcb\017\uffcb\001\002\000" +
    "\004\004\324\001\002\000\030\014\042\015\024\020\005" +
    "\021\013\022\017\023\016\024\006\055\032\060\041\061" +
    "\031\070\045\001\002\000\016\002\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\001\002\000\032\005\327\014" +
    "\042\015\024\020\005\021\013\022\017\023\016\024\006" +
    "\055\032\060\041\061\031\070\045\001\002\000\016\002" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\014\002\011\003\007\017\014\020\006\060" +
    "\003\001\001\000\004\064\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\007\020\017\060\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\033\005\025\013\036\014" +
    "\034\015\027\016\035\022\024\027\032\034\045\035\042" +
    "\052\022\055\037\056\026\057\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\033\005\025\013\036\014" +
    "\034\016\301\022\024\027\032\034\045\035\042\052\022" +
    "\055\037\056\026\057\043\001\001\000\004\044\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\052\001\001\000\006\007\060\010\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\065\010\055" +
    "\035\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\075\010\055\001\001\000\002\001\001\000\004\035\077" +
    "\001\001\000\002\001\001\000\004\070\101\001\001\000" +
    "\002\001\001\000\006\053\106\054\105\001\001\000\002" +
    "\001\001\000\004\044\113\001\001\000\002\001\001\000" +
    "\004\054\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\003\033\004\151\005\145\022\125\025\144\026\133" +
    "\036\150\037\155\041\147\042\130\043\120\044\136\045" +
    "\135\046\153\047\131\050\137\052\121\055\115\062\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\067\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\245\001" +
    "\001\000\002\001\001\000\046\003\033\004\151\005\145" +
    "\022\125\025\144\026\133\036\150\037\155\041\147\042" +
    "\130\043\120\044\136\046\244\047\131\050\137\052\121" +
    "\055\115\062\140\001\001\000\010\006\235\036\237\040" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\033\004\151\005\145\025\144\026\133\036\150\037" +
    "\155\041\147\042\130\043\233\044\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\172\010\055\035\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\174\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\033\005\202\012\204\025\144\026\205\061" +
    "\201\001\001\000\002\001\001\000\004\011\226\001\001" +
    "\000\002\001\001\000\006\007\225\010\055\001\001\000" +
    "\004\011\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\214\031\215\033\212\001" +
    "\001\000\002\001\001\000\010\003\033\005\217\032\220" +
    "\001\001\000\006\031\216\033\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\033\005\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\230\010\055\035\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\033\004\151\005\145\022\125" +
    "\025\144\026\133\036\150\037\155\041\147\042\130\043" +
    "\120\044\136\046\232\047\131\050\137\052\121\055\115" +
    "\062\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\243\001\001\000\002\001\001" +
    "\000\004\044\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\246\031\215\033\212\001\001\000\006\031" +
    "\216\033\212\001\001\000\004\011\250\001\001\000\002" +
    "\001\001\000\046\003\033\004\151\005\145\022\125\025" +
    "\144\026\133\036\150\037\155\041\147\042\130\043\120" +
    "\044\136\046\252\047\131\050\137\052\121\055\115\062" +
    "\140\001\001\000\002\001\001\000\046\003\033\004\151" +
    "\005\145\022\125\025\144\026\133\036\150\037\155\041" +
    "\147\042\130\043\120\044\136\046\254\047\131\050\137" +
    "\052\121\055\115\062\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\265\051\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\267\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\033\005\025\013\036\014\034" +
    "\016\272\022\024\027\032\034\045\035\042\052\022\055" +
    "\037\056\026\057\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\003\033\004\151\005\145\022\125\025" +
    "\144\026\133\036\150\037\155\041\147\042\130\043\120" +
    "\044\136\045\275\046\153\047\131\050\137\052\121\055" +
    "\115\062\140\001\001\000\046\003\033\004\151\005\145" +
    "\022\125\025\144\026\133\036\150\037\155\041\147\042" +
    "\130\043\120\044\136\046\244\047\131\050\137\052\121" +
    "\055\115\062\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\304\010\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\313\001\001\000\010\003" +
    "\033\005\315\023\316\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\033\005\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\324\001\001\000\036\003\033\005\025\013" +
    "\036\014\034\015\325\016\035\022\024\027\032\034\045" +
    "\035\042\052\022\055\037\056\026\057\043\001\001\000" +
    "\002\001\001\000\034\003\033\005\025\013\036\014\034" +
    "\016\301\022\024\027\032\034\045\035\042\052\022\055" +
    "\037\056\026\057\043\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    BasicLexerCupV lex;

    @SuppressWarnings("deprecation")
    public parser(BasicLexerCupV lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
        this.currentHash = null;
    }

        HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<String, ArrayList<String>>();
        String currentHash;
        public void imprimirTablaSimbolos() {
            for (String key : listaTablasSimbolos.keySet()) {
                System.out.println("Tabla de símbolo: " + key);
                System.out.println("Valores: ");
                for (String item : listaTablasSimbolos.get(key)) {
                    System.out.println(item);
                }
                System.out.println("");
            }
        }
        // Método para agregar una nueva tabla de símbolos (función o main)
        public void agregarTablaSimbolos(String tipoTabla, String nombre) {
            System.out.println("/+++Nueva tabla símbolos función o main+++/ " + nombre);
            String tipo;
            if (tipoTabla.equals("main")) {
                tipo = "tipo:main";
            } else {
                tipo = "tipo:funcion:" + nombre;
            }
            ArrayList<String> nuevaTabla = new ArrayList<>();
            nuevaTabla.add(tipo);
            currentHash = nombre;
            listaTablasSimbolos.put(currentHash, nuevaTabla);
        }

        public void agregarVariable(String nombre, String tipo) {
            System.out.println("PARSER: identificador (agregar o verificar) " + nombre);
            if (currentHash == null) {
                System.err.println("Error: No hay una tabla de símbolos activa");
                return;
            }
            ArrayList<String> tabla = listaTablasSimbolos.get(currentHash);
            if (tabla == null) {
                System.err.println("Error: La tabla de símbolos '" + currentHash + "' no existe");
                return;
            }
            tabla.add(nombre + ":" + tipo);
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

 
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.agregarTablaSimbolos("main", "_verano_"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= MAIN NT$0 sentencias 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.imprimirTablaSimbolos(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error en la estructura inicial."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipos ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="rodolfo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipos ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="cometa";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipos ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="cupido";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipos ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="bromista";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipos ::= BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="trueno";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literales ::= L_INTEGER 
            {
              Object RESULT =null;
		int iVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer iVar = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Tipo: " + iVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literales ::= L_STRING 
            {
              Object RESULT =null;
		int sVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sVar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Tipo: " + sVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literales ::= L_FLOAT 
            {
              Object RESULT =null;
		int fVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float fVar = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Tipo: " + fVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literales ::= L_CHAR 
            {
              Object RESULT =null;
		int cVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character cVar = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Tipo: " + cVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literales ::= bool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bool ::= TRUE 
            {
              Object RESULT =null;
		RESULT="true";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bool ::= FALSE 
            {
              Object RESULT =null;
		RESULT="false";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresionRelacional ::= asignarTipo operadorRelacional literales 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión relacional: " + op + " " + l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresionRelacional ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Expresión relacional inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresionLogica ::= asignarTipo operadorLogico literales 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión lógica: " + op + " " + l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresionLogica ::= negacion literales 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión lógica con negación: !" + n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresionLogica ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Expresión lógica inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignarTipo ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idVar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        parser.agregarVariable(idVar.toString(), t.toString());
        System.out.println("Asignación: " + idVar.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarTipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asignarTipo ::= tipos error 
            {
              Object RESULT =null;
		 System.err.println("Error: Falta identificador después del tipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarTipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operadorRelacional ::= MENOR 
            {
              Object RESULT =null;
		RESULT="snowball";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operadorRelacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="evergreen";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operadorRelacional ::= MAYOR 
            {
              Object RESULT =null;
		RESULT="minstix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operadorRelacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="upatree";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operadorRelacional ::= IGUAL 
            {
              Object RESULT =null;
		RESULT="mary";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operadorRelacional ::= DIFERENTE 
            {
              Object RESULT =null;
		RESULT="openslae";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operadorLogico ::= CONJUNCION 
            {
              Object RESULT =null;
		RESULT="melchor";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operadorLogico ::= DISYUNCION 
            {
              Object RESULT =null;
		RESULT="gaspar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // negacion ::= NEGACION 
            {
              Object RESULT =null;
		RESULT="baltazar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // creacion ::= asignarTipo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // creacionAsignacion ::= asignarTipo ASIGNA literales FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= asignaVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= print 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= read 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia ::= break_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia ::= return_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia ::= switch_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 parser.agregarTablaSimbolos("funcion", e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // funcion ::= encabezadoFuncion NT$1 bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // encabezadoFuncion ::= tipos IDENTIFICADOR parametros 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = id.toString();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bloque ::= corcheteIzquierdo sentencias corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros ::= PARENTESISAPERTURA PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametros ::= PARENTESISAPERTURA parametroAux PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametroAux ::= asignarTipo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametroAux ::= parametroAux COMA asignarTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresionRelacional ::= crearArreglos operadorRelacional arreglos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresionLogica ::= crearArreglos operadorLogico arreglos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipoArreglo ::= L_CHAR CORCHETEAPERTURA CORCHETECIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipoArreglo ::= L_INTEGER CORCHETEAPERTURA CORCHETECIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$2 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        parser.agregarVariable(id.toString(), t.toString() + "[]");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // crearArreglos ::= tipoArreglo IDENTIFICADOR NT$2 CORCHETEAPERTURA IDENTIFICADOR CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearArreglos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // modificarArreglos ::= IDENTIFICADOR CORCHETEAPERTURA IDENTIFICADOR CORCHETECIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modificarArreglos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arreglos ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arreglos ::= arreglos arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arreglo ::= parametrosArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametrosArreglo ::= corcheteIzquierdo corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametrosArreglo ::= corcheteIzquierdo parametrosArregloAux corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametrosArregloAux ::= asignarTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArregloAux",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametrosArregloAux ::= parametrosArregloAux COMA asignarTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArregloAux",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresionRelacional ::= asignarTipo operadorRelacional variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresionLogica ::= asignarTipo operadorLogico variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$3 ::= 
            {
              Object RESULT =null;
RESULT="entrega";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asignaVariable ::= variable ASIGNA NT$3 literales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // asignaVariable ::= modificarArreglos ASIGNA literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // variable ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idVar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Variable: " + idVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operandoBinaria ::= SUMA 
            {
              Object RESULT =null;
		RESULT="navidad";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operandoBinaria ::= RESTA 
            {
              Object RESULT =null;
		RESULT="intercambio";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operandoBinaria ::= DIVISION 
            {
              Object RESULT =null;
		RESULT="reyes";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operandoBinaria ::= MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT="nochebuena";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operandoBinaria ::= MODULO 
            {
              Object RESULT =null;
		RESULT="magos";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operandoBinaria ::= POTENCIA 
            {
              Object RESULT =null;
		RESULT="adviento";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresionBinaria ::= expresion operandoBinaria expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operandoUnario ::= INCREMENTO 
            {
              Object RESULT =null;
		RESULT="quien";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operandoUnario ::= DECREMENTO 
            {
              Object RESULT =null;
		RESULT="grinch";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresionUnario ::= expresion operandoUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$4 ::= 
            {
              Object RESULT =null;
RESULT="-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresionUnario ::= NEGATIVO NT$4 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresionRelacionalMat ::= expresion operadorRelacional expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacionalMat",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresiones ::= expresionRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresiones ::= operandoBinaria expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresiones ::= expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresiones ::= expresionUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresiones ::= expresionRelacionalMat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresiones ::= PARENTESISAPERTURA expresiones PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= INTEGER 
            {
              Object RESULT =null;
		RESULT="rodolfo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= FLOAT 
            {
              Object RESULT =null;
		RESULT="bromista";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencia_lista ::= sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_lista",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentencia_lista ::= sentencia_lista sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_lista",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentenciaEstructura ::= if_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentenciaEstructura ::= for_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentenciaEstructura ::= while_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentenciaEstructura ::= switch_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentenciaEstructura ::= return_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentenciaEstructura ::= break_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentenciaEstructura ::= expresiones FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // if_estructura ::= IF PARENTESISAPERTURA operadorLogico PARENTESISCIERRE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // if_estructura ::= IF PARENTESISAPERTURA operadorLogico PARENTESISCIERRE sentenciaEstructura ELSE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // for_estructura ::= FOR PARENTESISAPERTURA IDENTIFICADOR DOS_PUNTOS rango PARENTESISCIERRE sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_estructura",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // while_estructura ::= WHILE PARENTESISAPERTURA expresionLogica PARENTESISCIERRE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_estructura",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // rango ::= expresion PUNTOS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rango",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // rango ::= expresion PUNTOS expresion PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rango",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$5 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        parser.agregarVariable("switch_" + v.toString(), "switch");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // switch_estructura ::= SWITCH PARENTESISAPERTURA variable PARENTESISCIERRE NT$5 corcheteIzquierdo casos_switch corcheteDerecho 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_estructura",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // casos_switch ::= caso_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // casos_switch ::= casos_switch caso_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // caso_switch ::= CASE expresion DOS_PUNTOS sentencia_lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_switch",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // caso_switch ::= DEFAULT DOS_PUNTOS sentencia_lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_switch",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // return_estructura ::= RETURN expresion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // return_estructura ::= RETURN FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // break_estructura ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_estructura",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // print ::= PRINT PARENTESISAPERTURA literales PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // print ::= PRINT PARENTESISAPERTURA variable PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // read ::= READ PARENTESISAPERTURA expresion PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
