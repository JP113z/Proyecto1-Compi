
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import Tree.Arbol;
import Tree.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\241\000\002\002\004\000\002\070\002\000\002\002" +
    "\005\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\061\003\000\002\061\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\064" +
    "\003\000\002\064\003\000\002\066\003\000\002\067\003" +
    "\000\002\010\003\000\002\010\003\000\002\004\005\000" +
    "\002\004\005\000\002\056\005\000\002\056\004\000\002" +
    "\056\005\000\002\005\004\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\011\003\000\002\011\003\000" +
    "\002\012\003\000\002\013\004\000\002\013\003\000\002" +
    "\014\006\000\002\014\006\000\002\014\006\000\002\014" +
    "\004\000\002\014\006\000\002\014\006\000\002\015\003" +
    "\000\002\015\004\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\003\000\002\017\004\000\002\071" +
    "\002\000\002\020\006\000\002\055\004\000\002\055\004" +
    "\000\002\055\003\000\002\021\006\000\002\021\006\000" +
    "\002\021\005\000\002\021\006\000\002\021\006\000\002" +
    "\060\005\000\002\060\005\000\002\072\002\000\002\024" +
    "\005\000\002\073\002\000\002\024\006\000\002\024\003" +
    "\000\002\023\004\000\002\023\006\000\002\062\006\000" +
    "\002\062\006\000\002\062\006\000\002\062\006\000\002" +
    "\074\002\000\002\025\010\000\002\075\002\000\002\026" +
    "\007\000\002\027\003\000\002\027\004\000\002\030\003" +
    "\000\002\032\004\000\002\032\005\000\002\031\003\000" +
    "\002\076\002\000\002\031\006\000\002\077\002\000\002" +
    "\033\006\000\002\033\006\000\002\100\002\000\002\033" +
    "\007\000\002\033\006\000\002\034\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\005\000\002\065\005\000\002\065\005\000\002" +
    "\065\004\000\002\065\007\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\036\005\000\002\036\004\000" +
    "\002\036\005\000\002\037\003\000\002\037\003\000\002" +
    "\040\004\000\002\101\002\000\002\040\005\000\002\040" +
    "\004\000\002\041\005\000\002\041\005\000\002\042\003" +
    "\000\002\042\003\000\002\042\004\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\005\000\002" +
    "\102\002\000\002\042\006\000\002\043\003\000\002\043" +
    "\004\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\004\000\002\045\007\000\002\045\011\000\002" +
    "\046\015\000\002\057\007\000\002\047\011\000\002\050" +
    "\003\000\002\050\004\000\002\050\003\000\002\051\007" +
    "\000\002\063\006\000\002\022\005\000\002\022\004\000" +
    "\002\052\004\000\002\053\007\000\002\053\007\000\002" +
    "\053\006\000\002\053\004\000\002\053\006\000\002\054" +
    "\007\000\002\054\007\000\002\054\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0131\000\006\003\004\016\005\001\002\000\004\002" +
    "\ufffe\001\002\000\020\003\000\020\000\021\000\022\000" +
    "\023\000\024\000\025\000\001\002\000\004\002\007\001" +
    "\002\000\004\002\001\001\002\000\020\003\017\020\012" +
    "\021\016\022\022\023\023\024\013\025\021\001\002\000" +
    "\006\003\uffcb\011\uffcb\001\002\000\004\025\ufffd\001\002" +
    "\000\004\025\ufff9\001\002\000\022\002\uffcd\003\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\001\002" +
    "\000\004\025\026\001\002\000\004\025\ufffc\001\002\000" +
    "\006\003\uffc7\011\uffc7\001\002\000\022\002\uffff\003\017" +
    "\020\012\021\016\022\022\023\023\024\013\025\021\001" +
    "\002\000\004\003\024\001\002\000\004\025\ufffb\001\002" +
    "\000\004\025\ufffa\001\002\000\006\003\uffc8\011\uffc8\001" +
    "\002\000\022\002\uffcc\003\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\001\002\000\006\003\uffc9\011" +
    "\uffc9\001\002\000\006\003\032\011\030\001\002\000\016" +
    "\012\uffbf\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\001" +
    "\002\000\004\004\033\001\002\000\004\004\uffbb\001\002" +
    "\000\102\003\071\004\102\005\064\010\057\011\101\014" +
    "\125\015\110\020\012\021\016\022\022\023\023\024\013" +
    "\025\051\026\070\027\120\030\061\031\041\032\122\033" +
    "\130\034\074\035\104\040\045\052\062\054\111\055\046" +
    "\056\103\061\077\062\066\064\126\065\037\066\035\067" +
    "\052\001\002\000\022\002\uffca\003\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\001\002\000\112\003" +
    "\uffef\004\uffef\005\uffef\010\uffef\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043" +
    "\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef\062\uffef" +
    "\063\uffef\064\uffef\066\uffef\001\002\000\062\003\ufff4\004" +
    "\ufff4\005\ufff4\010\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4" +
    "\047\ufff4\050\ufff4\062\ufff4\001\002\000\062\003\ufff6\004" +
    "\ufff6\005\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025" +
    "\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\050\ufff6\062\ufff6\001\002\000\074\005\uff77\011" +
    "\uff77\013\uff77\020\uff77\021\uff77\022\uff77\023\uff77\024\uff77" +
    "\025\uff77\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77\033" +
    "\uff77\034\uff77\035\uff77\040\uff77\052\uff77\053\uff77\054\uff77" +
    "\055\uff77\056\uff77\061\uff77\062\uff77\064\uff77\065\uff77\066" +
    "\uff77\067\uff77\001\002\000\032\012\uff97\013\uff97\025\uff97" +
    "\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046" +
    "\uff97\064\uff97\066\uff97\001\002\000\004\013\u0129\001\002" +
    "\000\074\005\uff79\011\uff79\013\uff79\020\uff79\021\uff79\022" +
    "\uff79\023\uff79\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79" +
    "\031\uff79\032\uff79\033\uff79\034\uff79\035\uff79\040\uff79\052" +
    "\uff79\053\uff79\054\uff79\055\uff79\056\uff79\061\uff79\062\uff79" +
    "\064\uff79\065\uff79\066\uff79\067\uff79\001\002\000\020\010" +
    "\u0123\041\170\042\177\043\173\044\172\045\174\046\176" +
    "\001\002\000\006\064\uff8c\066\uff8c\001\002\000\004\011" +
    "\u0115\001\002\000\112\003\ufff2\004\ufff2\005\ufff2\010\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\015\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\030\ufff2\031\ufff2" +
    "\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\062\ufff2\063\ufff2\064\ufff2\066\ufff2\001" +
    "\002\000\044\003\ufff3\012\ufff3\013\ufff3\030\061\031\041" +
    "\032\122\033\130\034\074\035\104\036\221\037\224\041" +
    "\170\042\177\043\173\044\172\045\174\046\176\001\002" +
    "\000\042\006\u0111\010\uffa2\030\uffa2\031\uffa2\032\uffa2\033" +
    "\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\041\uffa2\042\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\046\uffa2\001\002\000\062\003" +
    "\ufff5\004\ufff5\005\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5" +
    "\046\ufff5\047\ufff5\050\ufff5\062\ufff5\001\002\000\034\003" +
    "\uffd2\004\uffd2\005\uffd2\010\uffd2\014\uffd2\015\uffd2\020\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\062\uffd2\001" +
    "\002\000\024\004\uffae\010\uffae\013\uffae\041\uffae\042\uffae" +
    "\043\uffae\044\uffae\045\uffae\046\uffae\001\002\000\074\005" +
    "\uff78\011\uff78\013\uff78\020\uff78\021\uff78\022\uff78\023\uff78" +
    "\024\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032" +
    "\uff78\033\uff78\034\uff78\035\uff78\040\uff78\052\uff78\053\uff78" +
    "\054\uff78\055\uff78\056\uff78\061\uff78\062\uff78\064\uff78\065" +
    "\uff78\066\uff78\067\uff78\001\002\000\034\003\uffce\004\uffce" +
    "\005\uffce\010\uffce\014\uffce\015\uffce\020\uffce\021\uffce\022" +
    "\uffce\023\uffce\024\uffce\025\uffce\062\uffce\001\002\000\016" +
    "\026\070\027\120\064\126\065\037\066\035\067\052\001" +
    "\002\000\022\004\102\010\u0109\041\170\042\177\043\173" +
    "\044\172\045\174\046\176\001\002\000\032\012\uff98\013" +
    "\uff98\025\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98" +
    "\045\uff98\046\uff98\064\uff98\066\uff98\001\002\000\004\011" +
    "\u0102\001\002\000\034\003\071\004\102\005\376\010\057" +
    "\014\125\015\110\020\012\021\016\022\022\023\023\024" +
    "\013\025\051\062\150\001\002\000\004\003\371\001\002" +
    "\000\006\012\uff82\013\uff82\001\002\000\010\013\366\064" +
    "\126\066\035\001\002\000\074\005\uff7c\011\uff7c\013\uff7c" +
    "\020\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\026" +
    "\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c" +
    "\035\uff7c\040\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056" +
    "\uff7c\061\uff7c\062\uff7c\064\uff7c\065\uff7c\066\uff7c\067\uff7c" +
    "\001\002\000\062\003\uffee\004\uffee\005\uffee\010\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\041\uffee\042\uffee\043" +
    "\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\062\uffee" +
    "\001\002\000\034\003\uffdc\004\uffdc\005\uffdc\010\uffdc\014" +
    "\uffdc\015\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\062\uffdc\001\002\000\020\010\360\041\170\042" +
    "\177\043\173\044\172\045\174\046\176\001\002\000\034" +
    "\003\uffd0\004\uffd0\005\uffd0\010\uffd0\014\uffd0\015\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\062\uffd0" +
    "\001\002\000\032\012\uff94\013\uff94\025\uff94\040\uff94\041" +
    "\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\064\uff94" +
    "\066\uff94\001\002\000\006\012\uff86\013\uff86\001\002\000" +
    "\074\005\uff7b\011\uff7b\013\uff7b\020\uff7b\021\uff7b\022\uff7b" +
    "\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031" +
    "\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\040\uff7b\052\uff7b" +
    "\053\uff7b\054\uff7b\055\uff7b\056\uff7b\061\uff7b\062\uff7b\064" +
    "\uff7b\065\uff7b\066\uff7b\067\uff7b\001\002\000\004\013\356" +
    "\001\002\000\074\005\uff7a\011\uff7a\013\uff7a\020\uff7a\021" +
    "\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a" +
    "\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\040" +
    "\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a\061\uff7a" +
    "\062\uff7a\064\uff7a\065\uff7a\066\uff7a\067\uff7a\001\002\000" +
    "\052\011\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80" +
    "\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033" +
    "\uff80\034\uff80\035\uff80\040\uff80\064\uff80\065\uff80\066\uff80" +
    "\067\uff80\001\002\000\010\005\344\064\342\067\346\001" +
    "\002\000\004\011\316\001\002\000\032\012\uff93\013\uff93" +
    "\025\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045" +
    "\uff93\046\uff93\064\uff93\066\uff93\001\002\000\034\003\uffd1" +
    "\004\uffd1\005\uffd1\010\uffd1\014\uffd1\015\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\062\uffd1\001\002" +
    "\000\112\003\ufff1\004\ufff1\005\ufff1\010\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\030\ufff1\031\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1" +
    "\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\062\ufff1\063\ufff1\064\ufff1\066\ufff1\001\002\000\040" +
    "\010\257\030\061\031\041\032\122\033\130\034\074\035" +
    "\104\036\221\037\224\041\170\042\177\043\173\044\172" +
    "\045\174\046\176\001\002\000\004\011\246\001\002\000" +
    "\004\011\240\001\002\000\024\003\175\010\200\013\167" +
    "\041\170\042\177\043\173\044\172\045\174\046\176\001" +
    "\002\000\034\003\uffd5\004\uffd5\005\uffd5\010\uffd5\014\uffd5" +
    "\015\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\062\uffd5\001\002\000\006\012\uff83\013\uff83\001\002" +
    "\000\034\003\uffcf\004\uffcf\005\uffcf\010\uffcf\014\uffcf\015" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\062\uffcf\001\002\000\034\003\uffd3\004\uffd3\005\uffd3\010" +
    "\uffd3\014\uffd3\015\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\062\uffd3\001\002\000\006\064\126\066" +
    "\035\001\002\000\062\003\uffed\004\uffed\005\uffed\010\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\017\uffed\020\uffed\021" +
    "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\041\uffed\042\uffed" +
    "\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\062" +
    "\uffed\001\002\000\006\012\uff87\013\uff87\001\002\000\032" +
    "\012\uff96\013\uff96\025\uff96\040\uff96\041\uff96\042\uff96\043" +
    "\uff96\044\uff96\045\uff96\046\uff96\064\uff96\066\uff96\001\002" +
    "\000\004\025\161\001\002\000\006\005\152\062\150\001" +
    "\002\000\010\003\134\011\132\025\135\001\002\000\112" +
    "\003\ufff0\004\ufff0\005\ufff0\010\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\062" +
    "\ufff0\063\ufff0\064\ufff0\066\ufff0\001\002\000\006\012\uff84" +
    "\013\uff84\001\002\000\032\012\uff95\013\uff95\025\uff95\040" +
    "\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95" +
    "\064\uff95\066\uff95\001\002\000\024\004\uffb0\010\uffb0\013" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\001\002\000\020\025\135\026\070\027\120\064\126\065" +
    "\037\066\035\067\052\001\002\000\004\012\136\001\002" +
    "\000\034\003\uff65\004\uff65\005\uff65\010\uff65\014\uff65\015" +
    "\uff65\020\uff65\021\uff65\022\uff65\023\uff65\024\uff65\025\uff65" +
    "\062\uff65\001\002\000\054\003\uffa2\010\uffa2\012\uffa2\013" +
    "\uffa2\017\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\001\002\000\004" +
    "\003\137\001\002\000\034\003\uff64\004\uff64\005\uff64\010" +
    "\uff64\014\uff64\015\uff64\020\uff64\021\uff64\022\uff64\023\uff64" +
    "\024\uff64\025\uff64\062\uff64\001\002\000\006\003\145\012" +
    "\146\001\002\000\062\003\ufff3\004\ufff3\005\ufff3\010\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\041\ufff3\042\ufff3" +
    "\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\062" +
    "\ufff3\001\002\000\004\012\143\001\002\000\004\013\144" +
    "\001\002\000\034\003\uff68\004\uff68\005\uff68\010\uff68\014" +
    "\uff68\015\uff68\020\uff68\021\uff68\022\uff68\023\uff68\024\uff68" +
    "\025\uff68\062\uff68\001\002\000\034\003\uff66\004\uff66\005" +
    "\uff66\010\uff66\014\uff66\015\uff66\020\uff66\021\uff66\022\uff66" +
    "\023\uff66\024\uff66\025\uff66\062\uff66\001\002\000\004\013" +
    "\147\001\002\000\034\003\uff67\004\uff67\005\uff67\010\uff67" +
    "\014\uff67\015\uff67\020\uff67\021\uff67\022\uff67\023\uff67\024" +
    "\uff67\025\uff67\062\uff67\001\002\000\020\025\135\026\070" +
    "\027\120\064\126\065\037\066\035\067\052\001\002\000" +
    "\004\005\154\001\002\000\004\003\153\001\002\000\022" +
    "\002\uffc2\003\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\001\002\000\022\002\uffc5\003\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\001\002\000" +
    "\004\013\160\001\002\000\004\013\157\001\002\000\004" +
    "\005\uffc1\001\002\000\004\005\uffc0\001\002\000\026\003" +
    "\uffe7\006\uffb4\010\uffe7\013\uffe7\041\uffe7\042\uffe7\043\uffe7" +
    "\044\uffe7\045\uffe7\046\uffe7\001\002\000\004\006\163\001" +
    "\002\000\004\025\164\001\002\000\004\007\165\001\002" +
    "\000\020\010\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\001\002\000\006\012\uff85\013\uff85\001\002" +
    "\000\034\003\uffdd\004\uffdd\005\uffdd\010\uffdd\014\uffdd\015" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\062\uffdd\001\002\000\036\004\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\051\uffe6" +
    "\064\uffe6\065\uffe6\066\uffe6\067\uffe6\001\002\000\020\025" +
    "\135\026\070\027\120\064\126\065\037\066\035\067\052" +
    "\001\002\000\036\004\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\051\uffe3\064\uffe3" +
    "\065\uffe3\066\uffe3\067\uffe3\001\002\000\036\004\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\051\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\001" +
    "\002\000\036\004\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\051\uffe2\064\uffe2\065" +
    "\uffe2\066\uffe2\067\uffe2\001\002\000\036\003\uffd8\004\uffd8" +
    "\005\uffd8\010\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\062\uffd8\001\002" +
    "\000\036\004\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\051\uffe1\064\uffe1\065\uffe1" +
    "\066\uffe1\067\uffe1\001\002\000\036\004\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\051\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\001\002\000" +
    "\054\011\101\020\012\021\016\022\022\023\023\024\013" +
    "\025\202\026\070\027\120\030\061\031\041\032\122\033" +
    "\130\034\074\035\104\040\045\051\204\064\126\065\037" +
    "\066\035\067\052\001\002\000\004\013\235\001\002\000" +
    "\042\010\uffa2\013\234\030\uffa2\031\uffa2\032\uffa2\033\uffa2" +
    "\034\uffa2\035\uffa2\036\uffa2\037\uffa2\041\uffa2\042\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\046\uffa2\001\002\000\004\013\233" +
    "\001\002\000\016\026\uffde\027\uffde\064\uffde\065\uffde\066" +
    "\uffde\067\uffde\001\002\000\016\026\070\027\120\064\126" +
    "\065\037\066\035\067\052\001\002\000\006\003\231\013" +
    "\uff86\001\002\000\040\010\223\030\061\031\041\032\122" +
    "\033\130\034\074\035\104\036\221\037\224\041\170\042" +
    "\177\043\173\044\172\045\174\046\176\001\002\000\022" +
    "\041\170\042\177\043\173\044\172\045\174\046\176\047" +
    "\215\050\214\001\002\000\004\025\212\001\002\000\026" +
    "\003\uffe7\010\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\050\uffe7\001\002\000\020\025\135" +
    "\026\070\027\120\064\126\065\037\066\035\067\052\001" +
    "\002\000\020\025\uffdf\026\uffdf\027\uffdf\064\uffdf\065\uffdf" +
    "\066\uffdf\067\uffdf\001\002\000\020\025\uffe0\026\uffe0\027" +
    "\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\001\002\000\030" +
    "\012\uffe8\013\uffe8\017\uffe8\041\uffe8\042\uffe8\043\uffe8\044" +
    "\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\001\002\000\030" +
    "\012\uffea\013\uffea\017\uffea\041\uffea\042\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\047\uffea\050\uffea\001\002\000\006" +
    "\064\126\066\035\001\002\000\022\012\uff8f\013\uff8f\041" +
    "\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\001\002" +
    "\000\022\012\uff8a\013\uff8a\041\uff8a\042\uff8a\043\uff8a\044" +
    "\uff8a\045\uff8a\046\uff8a\001\002\000\004\025\135\001\002" +
    "\000\022\012\uff8e\013\uff8e\041\uff8e\042\uff8e\043\uff8e\044" +
    "\uff8e\045\uff8e\046\uff8e\001\002\000\006\064\126\066\035" +
    "\001\002\000\022\012\uff88\013\uff88\041\uff88\042\uff88\043" +
    "\uff88\044\uff88\045\uff88\046\uff88\001\002\000\006\012\uff81" +
    "\013\uff81\001\002\000\032\012\uff90\013\uff90\025\uff90\040" +
    "\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90" +
    "\064\uff90\066\uff90\001\002\000\036\003\uffd6\004\uffd6\005" +
    "\uffd6\010\uffd6\014\uffd6\015\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\062\uffd6\001\002\000" +
    "\030\012\uffe9\013\uffe9\017\uffe9\041\uffe9\042\uffe9\043\uffe9" +
    "\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\001\002\000" +
    "\036\003\uffda\004\uffda\005\uffda\010\uffda\014\uffda\015\uffda" +
    "\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025" +
    "\uffda\062\uffda\001\002\000\036\003\uffd9\004\uffd9\005\uffd9" +
    "\010\uffd9\014\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\062\uffd9\001\002\000\036" +
    "\003\uffdb\004\uffdb\005\uffdb\010\uffdb\014\uffdb\015\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\062\uffdb\001\002\000\006\012\uffeb\013\uffeb\001\002\000" +
    "\006\012\uffec\013\uffec\001\002\000\016\020\012\021\016" +
    "\022\022\023\023\024\013\051\204\001\002\000\004\012" +
    "\243\001\002\000\006\047\215\050\214\001\002\000\066" +
    "\011\101\020\012\021\016\022\022\023\023\024\013\025" +
    "\135\026\070\027\120\030\061\031\041\032\122\033\130" +
    "\034\074\035\104\040\045\052\062\054\111\055\046\056" +
    "\103\061\077\062\066\064\126\065\037\066\035\067\052" +
    "\001\002\000\016\041\170\042\177\043\173\044\172\045" +
    "\174\046\176\001\002\000\074\005\uff72\011\uff72\013\uff72" +
    "\020\uff72\021\uff72\022\uff72\023\uff72\024\uff72\025\uff72\026" +
    "\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033\uff72\034\uff72" +
    "\035\uff72\040\uff72\052\uff72\053\uff72\054\uff72\055\uff72\056" +
    "\uff72\061\uff72\062\uff72\064\uff72\065\uff72\066\uff72\067\uff72" +
    "\001\002\000\012\012\251\025\135\064\126\066\035\001" +
    "\002\000\004\012\255\001\002\000\004\012\253\001\002" +
    "\000\004\003\252\001\002\000\034\003\uff61\004\uff61\005" +
    "\uff61\010\uff61\014\uff61\015\uff61\020\uff61\021\uff61\022\uff61" +
    "\023\uff61\024\uff61\025\uff61\062\uff61\001\002\000\004\013" +
    "\254\001\002\000\034\003\uff63\004\uff63\005\uff63\010\uff63" +
    "\014\uff63\015\uff63\020\uff63\021\uff63\022\uff63\023\uff63\024" +
    "\uff63\025\uff63\062\uff63\001\002\000\004\013\256\001\002" +
    "\000\034\003\uff62\004\uff62\005\uff62\010\uff62\014\uff62\015" +
    "\uff62\020\uff62\021\uff62\022\uff62\023\uff62\024\uff62\025\uff62" +
    "\062\uff62\001\002\000\040\011\265\020\012\021\016\022" +
    "\022\023\023\024\013\025\135\026\uffa8\027\uffa8\040\045" +
    "\051\204\064\126\065\uffa8\066\035\067\uffa8\001\002\000" +
    "\026\012\uff9e\013\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e" +
    "\045\uff9e\046\uff9e\047\215\050\214\001\002\000\016\026" +
    "\070\027\120\064\126\065\037\066\035\067\052\001\002" +
    "\000\036\030\061\031\041\032\122\033\130\034\074\035" +
    "\104\036\221\037\224\041\170\042\177\043\173\044\172" +
    "\045\174\046\176\001\002\000\022\012\uff9f\013\uff9f\041" +
    "\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\001\002" +
    "\000\022\012\uffa0\013\uffa0\041\uffa0\042\uffa0\043\uffa0\044" +
    "\uffa0\045\uffa0\046\uffa0\001\002\000\030\011\265\020\012" +
    "\021\016\022\022\023\023\024\013\025\135\040\045\051" +
    "\204\064\126\066\035\001\002\000\032\012\uffa1\013\uffa1" +
    "\025\135\040\045\041\170\042\177\043\173\044\172\045" +
    "\174\046\176\064\126\066\035\001\002\000\020\013\272" +
    "\041\170\042\177\043\173\044\172\045\174\046\176\001" +
    "\002\000\040\013\uff81\030\061\031\041\032\122\033\130" +
    "\034\074\035\104\036\221\037\224\041\170\042\177\043" +
    "\173\044\172\045\174\046\176\001\002\000\006\064\126" +
    "\066\035\001\002\000\034\003\uffa6\004\uffa6\005\uffa6\010" +
    "\uffa6\014\uffa6\015\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\062\uffa6\001\002\000\006\047\215\050" +
    "\214\001\002\000\006\026\070\027\120\001\002\000\022" +
    "\012\uff99\013\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045" +
    "\uff99\046\uff99\001\002\000\016\020\012\021\016\022\022" +
    "\023\023\024\013\051\204\001\002\000\006\036\221\037" +
    "\224\001\002\000\022\012\uff9a\013\uff9a\041\uff9a\042\uff9a" +
    "\043\uff9a\044\uff9a\045\uff9a\046\uff9a\001\002\000\006\036" +
    "\221\037\224\001\002\000\022\012\uff8d\013\uff8d\041\uff8d" +
    "\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\001\002\000" +
    "\022\012\uff9c\013\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\046\uff9c\001\002\000\020\012\306\041\170\042" +
    "\177\043\173\044\172\045\174\046\176\001\002\000\036" +
    "\030\061\031\041\032\122\033\130\034\074\035\104\036" +
    "\221\037\224\041\170\042\177\043\173\044\172\045\174" +
    "\046\176\001\002\000\022\012\uff9d\013\uff9d\041\uff9d\042" +
    "\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\001\002\000\006" +
    "\064\126\066\035\001\002\000\032\012\uff91\013\uff91\025" +
    "\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91" +
    "\046\uff91\064\126\066\035\001\002\000\032\012\uff92\013" +
    "\uff92\025\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92" +
    "\045\uff92\046\uff92\064\uff92\066\uff92\001\002\000\022\012" +
    "\uff89\013\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89" +
    "\046\uff89\001\002\000\034\003\uffa7\004\uffa7\005\uffa7\010" +
    "\uffa7\014\uffa7\015\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7" +
    "\024\uffa7\025\uffa7\062\uffa7\001\002\000\016\026\070\027" +
    "\120\064\126\065\037\066\035\067\052\001\002\000\022" +
    "\012\uff9b\013\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045" +
    "\uff9b\046\uff9b\001\002\000\004\025\135\001\002\000\004" +
    "\012\320\001\002\000\004\004\321\001\002\000\006\057" +
    "\324\060\322\001\002\000\004\063\337\001\002\000\006" +
    "\005\uff6e\057\uff6e\001\002\000\006\064\126\066\035\001" +
    "\002\000\006\005\uff70\057\uff70\001\002\000\006\005\327" +
    "\057\324\001\002\000\074\005\uff71\011\uff71\013\uff71\020" +
    "\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71\026\uff71" +
    "\027\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71\035" +
    "\uff71\040\uff71\052\uff71\053\uff71\054\uff71\055\uff71\056\uff71" +
    "\061\uff71\062\uff71\064\uff71\065\uff71\066\uff71\067\uff71\001" +
    "\002\000\006\005\uff6f\057\uff6f\001\002\000\004\063\332" +
    "\001\002\000\066\011\101\020\012\021\016\022\022\023" +
    "\023\024\013\025\135\026\070\027\120\030\061\031\041" +
    "\032\122\033\130\034\074\035\104\040\045\052\062\054" +
    "\111\055\046\056\103\061\077\062\066\064\126\065\037" +
    "\066\035\067\052\001\002\000\070\011\101\013\335\020" +
    "\012\021\016\022\022\023\023\024\013\025\135\026\070" +
    "\027\120\030\061\031\041\032\122\033\130\034\074\035" +
    "\104\040\045\052\062\054\111\055\046\056\103\061\077" +
    "\062\066\064\126\065\037\066\035\067\052\001\002\000" +
    "\070\011\uff7e\013\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e" +
    "\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032" +
    "\uff7e\033\uff7e\034\uff7e\035\uff7e\040\uff7e\052\uff7e\054\uff7e" +
    "\055\uff7e\056\uff7e\061\uff7e\062\uff7e\064\uff7e\065\uff7e\066" +
    "\uff7e\067\uff7e\001\002\000\006\005\uff6d\057\uff6d\001\002" +
    "\000\070\011\uff7d\013\uff7d\020\uff7d\021\uff7d\022\uff7d\023" +
    "\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d" +
    "\032\uff7d\033\uff7d\034\uff7d\035\uff7d\040\uff7d\052\uff7d\054" +
    "\uff7d\055\uff7d\056\uff7d\061\uff7d\062\uff7d\064\uff7d\065\uff7d" +
    "\066\uff7d\067\uff7d\001\002\000\066\011\101\020\012\021" +
    "\016\022\022\023\023\024\013\025\135\026\070\027\120" +
    "\030\061\031\041\032\122\033\130\034\074\035\104\040" +
    "\045\052\062\054\111\055\046\056\103\061\077\062\066" +
    "\064\126\065\037\066\035\067\052\001\002\000\070\011" +
    "\101\013\341\020\012\021\016\022\022\023\023\024\013" +
    "\025\135\026\070\027\120\030\061\031\041\032\122\033" +
    "\130\034\074\035\104\040\045\052\062\054\111\055\046" +
    "\056\103\061\077\062\066\064\126\065\037\066\035\067" +
    "\052\001\002\000\006\005\uff6c\057\uff6c\001\002\000\010" +
    "\005\ufff8\013\ufff8\017\ufff8\001\002\000\006\005\350\017" +
    "\347\001\002\000\024\004\uffad\010\uffad\013\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\001\002\000" +
    "\006\005\uffab\017\uffab\001\002\000\010\005\ufff7\013\ufff7" +
    "\017\ufff7\001\002\000\006\064\uffaa\067\uffaa\001\002\000" +
    "\024\004\uffac\010\uffac\013\uffac\041\uffac\042\uffac\043\uffac" +
    "\044\uffac\045\uffac\046\uffac\001\002\000\006\064\342\067" +
    "\346\001\002\000\006\005\uffa9\017\uffa9\001\002\000\052" +
    "\011\101\020\012\021\016\022\022\023\023\024\013\025" +
    "\135\026\070\027\120\030\061\031\041\032\122\033\130" +
    "\034\074\035\104\040\045\064\126\065\037\066\035\067" +
    "\052\001\002\000\004\012\355\001\002\000\006\012\uff7f" +
    "\013\uff7f\001\002\000\074\005\uff69\011\uff69\013\uff69\020" +
    "\uff69\021\uff69\022\uff69\023\uff69\024\uff69\025\uff69\026\uff69" +
    "\027\uff69\030\uff69\031\uff69\032\uff69\033\uff69\034\uff69\035" +
    "\uff69\040\uff69\052\uff69\053\uff69\054\uff69\055\uff69\056\uff69" +
    "\061\uff69\062\uff69\064\uff69\065\uff69\066\uff69\067\uff69\001" +
    "\002\000\004\004\102\001\002\000\004\004\102\001\002" +
    "\000\006\004\102\013\362\001\002\000\034\003\uffb7\004" +
    "\uffb7\005\uffb7\010\uffb7\014\uffb7\015\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\062\uffb7\001\002\000" +
    "\024\004\uffaf\010\uffaf\013\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\001\002\000\006\004\102\013" +
    "\365\001\002\000\034\003\uffb8\004\uffb8\005\uffb8\010\uffb8" +
    "\014\uffb8\015\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\062\uffb8\001\002\000\074\005\uff6a\011\uff6a" +
    "\013\uff6a\020\uff6a\021\uff6a\022\uff6a\023\uff6a\024\uff6a\025" +
    "\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a" +
    "\034\uff6a\035\uff6a\040\uff6a\052\uff6a\053\uff6a\054\uff6a\055" +
    "\uff6a\056\uff6a\061\uff6a\062\uff6a\064\uff6a\065\uff6a\066\uff6a" +
    "\067\uff6a\001\002\000\004\013\370\001\002\000\074\005" +
    "\uff6b\011\uff6b\013\uff6b\020\uff6b\021\uff6b\022\uff6b\023\uff6b" +
    "\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b\032" +
    "\uff6b\033\uff6b\034\uff6b\035\uff6b\040\uff6b\052\uff6b\053\uff6b" +
    "\054\uff6b\055\uff6b\056\uff6b\061\uff6b\062\uff6b\064\uff6b\065" +
    "\uff6b\066\uff6b\067\uff6b\001\002\000\022\002\uffc4\003\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\001" +
    "\002\000\010\003\175\010\200\013\167\001\002\000\004" +
    "\005\u0101\001\002\000\034\003\uffd4\004\uffd4\005\uffd4\010" +
    "\uffd4\014\uffd4\015\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\062\uffd4\001\002\000\004\010\u0100\001" +
    "\002\000\004\003\377\001\002\000\022\002\uffc3\003\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\001" +
    "\002\000\040\011\265\020\012\021\016\022\022\023\023" +
    "\024\013\025\135\026\uffa8\027\uffa8\040\045\051\204\064" +
    "\126\065\uffa8\066\035\067\uffa8\001\002\000\022\002\uffc6" +
    "\003\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\001\002\000\016\020\012\021\016\022\022\023\023" +
    "\024\013\051\204\001\002\000\004\012\u0104\001\002\000" +
    "\066\011\101\020\012\021\016\022\022\023\023\024\013" +
    "\025\135\026\070\027\120\030\061\031\041\032\122\033" +
    "\130\034\074\035\104\040\045\052\062\054\111\055\046" +
    "\056\103\061\077\062\066\064\126\065\037\066\035\067" +
    "\052\001\002\000\074\005\uff75\011\uff75\013\uff75\020\uff75" +
    "\021\uff75\022\uff75\023\uff75\024\uff75\025\uff75\026\uff75\027" +
    "\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034\uff75\035\uff75" +
    "\040\uff75\052\uff75\053\u0106\054\uff75\055\uff75\056\uff75\061" +
    "\uff75\062\uff75\064\uff75\065\uff75\066\uff75\067\uff75\001\002" +
    "\000\066\011\101\020\012\021\016\022\022\023\023\024" +
    "\013\025\135\026\070\027\120\030\061\031\041\032\122" +
    "\033\130\034\074\035\104\040\045\052\062\054\111\055" +
    "\046\056\103\061\077\062\066\064\126\065\037\066\035" +
    "\067\052\001\002\000\074\005\uff74\011\uff74\013\uff74\020" +
    "\uff74\021\uff74\022\uff74\023\uff74\024\uff74\025\uff74\026\uff74" +
    "\027\uff74\030\uff74\031\uff74\032\uff74\033\uff74\034\uff74\035" +
    "\uff74\040\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74" +
    "\061\uff74\062\uff74\064\uff74\065\uff74\066\uff74\067\uff74\001" +
    "\002\000\004\004\102\001\002\000\004\004\102\001\002" +
    "\000\006\004\102\013\u010b\001\002\000\034\003\uffb6\004" +
    "\uffb6\005\uffb6\010\uffb6\014\uffb6\015\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\025\uffb6\062\uffb6\001\002\000" +
    "\006\004\102\013\u010d\001\002\000\034\003\uffb5\004\uffb5" +
    "\005\uffb5\010\uffb5\014\uffb5\015\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\062\uffb5\001\002\000\004" +
    "\013\u010f\001\002\000\004\003\u0110\001\002\000\036\003" +
    "\uffd7\004\uffd7\005\uffd7\010\uffd7\014\uffd7\015\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\062" +
    "\uffd7\001\002\000\004\025\uffb2\001\002\000\004\025\u0113" +
    "\001\002\000\004\007\u0114\001\002\000\020\010\uffb1\041" +
    "\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\001\002" +
    "\000\016\010\057\020\012\021\016\022\022\023\023\024" +
    "\013\001\002\000\004\017\u0118\001\002\000\006\003\175" +
    "\010\200\001\002\000\016\020\012\021\016\022\022\023" +
    "\023\024\013\051\204\001\002\000\004\017\u011a\001\002" +
    "\000\012\025\135\040\045\064\126\066\035\001\002\000" +
    "\004\012\u011c\001\002\000\004\004\u011d\001\002\000\030" +
    "\003\071\004\102\010\057\014\125\015\110\020\012\021" +
    "\016\022\022\023\023\024\013\025\051\001\002\000\032" +
    "\003\071\004\102\005\u011f\010\057\014\125\015\110\020" +
    "\012\021\016\022\022\023\023\024\013\025\051\001\002" +
    "\000\074\005\uff73\011\uff73\013\uff73\020\uff73\021\uff73\022" +
    "\uff73\023\uff73\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73" +
    "\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\040\uff73\052" +
    "\uff73\053\uff73\054\uff73\055\uff73\056\uff73\061\uff73\062\uff73" +
    "\064\uff73\065\uff73\066\uff73\067\uff73\001\002\000\006\064" +
    "\126\066\035\001\002\000\022\012\uff8b\013\uff8b\041\uff8b" +
    "\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\001\002\000" +
    "\006\064\342\067\346\001\002\000\006\064\uffa5\067\uffa5" +
    "\001\002\000\006\064\342\067\346\001\002\000\004\013" +
    "\u0126\001\002\000\034\003\uffa4\004\uffa4\005\uffa4\010\uffa4" +
    "\014\uffa4\015\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024" +
    "\uffa4\025\uffa4\062\uffa4\001\002\000\004\013\u0128\001\002" +
    "\000\034\003\uffa3\004\uffa3\005\uffa3\010\uffa3\014\uffa3\015" +
    "\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3" +
    "\062\uffa3\001\002\000\074\005\uff76\011\uff76\013\uff76\020" +
    "\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025\uff76\026\uff76" +
    "\027\uff76\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035" +
    "\uff76\040\uff76\052\uff76\053\uff76\054\uff76\055\uff76\056\uff76" +
    "\061\uff76\062\uff76\064\uff76\065\uff76\066\uff76\067\uff76\001" +
    "\002\000\014\020\012\021\016\022\022\023\023\024\013" +
    "\001\002\000\004\012\u012c\001\002\000\004\004\uffbe\001" +
    "\002\000\006\012\u0131\017\u0130\001\002\000\004\025\u012f" +
    "\001\002\000\006\012\uffba\017\uffba\001\002\000\014\020" +
    "\012\021\016\022\022\023\023\024\013\001\002\000\004" +
    "\004\uffbc\001\002\000\004\025\u0133\001\002\000\006\012" +
    "\uffb9\017\uffb9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0131\000\004\002\005\001\001\000\002\001\001\000" +
    "\004\070\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\014\017\017\020\013\055\010\001\001\000" +
    "\004\071\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\014\020\024\055\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\030\001\001\000\006\072\u012a\073\u0129\001\001\000" +
    "\004\021\033\001\001\000\002\001\001\000\106\003\122" +
    "\004\120\005\111\007\074\010\035\013\104\014\072\015" +
    "\062\016\112\022\054\025\071\026\043\027\057\030\130" +
    "\032\053\033\052\034\106\035\116\036\126\040\113\041" +
    "\064\042\041\044\123\045\066\046\075\047\042\052\037" +
    "\053\114\054\055\057\077\062\115\064\047\066\046\067" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u0121" +
    "\001\001\000\004\101\u011f\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\306\035\307\037\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\u010d\010\035\064\140\066\046\067\105\001\001\000" +
    "\010\006\u0107\030\362\032\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\122\005\371\013\104\014" +
    "\072\016\373\025\071\026\043\027\057\030\130\032\053" +
    "\033\052\034\374\053\114\054\055\060\372\062\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\064\366" +
    "\066\046\067\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\356\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\102\352" +
    "\001\001\000\006\031\342\061\344\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\224\035\217\037\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\064\165\066\046\067\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\150\001\001\000\004\034\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\141\010\035\034\137\064\140" +
    "\066\046\067\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\007\155\010\035\034" +
    "\154\064\140\066\046\067\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\007" +
    "\236\010\035\034\235\064\140\066\046\067\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\210\004\120\005\207\007\205\010\035\012\204\034" +
    "\206\035\116\036\126\040\113\041\064\042\200\056\202" +
    "\064\047\066\046\067\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\231\010\035\064\140\066\046\067\105\001\001\000" +
    "\002\001\001\000\010\006\224\035\217\037\221\001\001" +
    "\000\006\006\170\011\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\216\010\035\034\215\064\140" +
    "\066\046\067\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\064\227" +
    "\066\046\067\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\226\001\001\000\002\001\001\000\010" +
    "\064\225\066\046\067\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\210" +
    "\005\241\012\204\056\240\001\001\000\002\001\001\000" +
    "\004\011\212\001\001\000\054\003\210\004\120\005\243" +
    "\007\074\010\035\022\054\034\206\035\116\036\126\040" +
    "\113\041\064\042\041\044\244\045\066\046\075\047\042" +
    "\052\037\057\077\064\047\066\046\067\105\001\001\000" +
    "\004\006\170\001\001\000\002\001\001\000\012\034\246" +
    "\064\247\066\046\067\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\210\005\241\012\204\034\267\036\265" +
    "\040\263\041\262\056\257\064\261\065\266\066\046\067" +
    "\105\077\260\001\001\000\004\011\313\001\001\000\014" +
    "\007\312\010\035\064\140\066\046\067\105\001\001\000" +
    "\010\006\306\035\307\037\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\210\005\241\012\204\034" +
    "\304\036\265\040\263\041\262\056\257\064\261\065\303" +
    "\066\046\067\105\001\001\000\016\006\275\034\276\040" +
    "\277\064\300\066\046\067\105\001\001\000\004\006\270" +
    "\001\001\000\010\006\224\035\217\037\221\001\001\000" +
    "\010\064\272\066\046\067\105\001\001\000\002\001\001" +
    "\000\004\011\273\001\001\000\004\010\274\001\001\000" +
    "\002\001\001\000\012\003\210\005\241\012\204\056\302" +
    "\001\001\000\004\037\221\001\001\000\002\001\001\000" +
    "\004\037\301\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\270\001\001\000\010\006\224\035\217\037" +
    "\221\001\001\000\002\001\001\000\010\064\311\066\046" +
    "\067\105\001\001\000\010\064\310\066\046\067\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\314\010\035\064\140\066\046\067\105\001" +
    "\001\000\002\001\001\000\004\034\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\050\325\051\324\063" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\064\330\066\046\067\105\001\001\000\002\001\001\000" +
    "\004\051\327\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\003\210\004\120\005\243\007" +
    "\074\010\035\022\054\034\206\035\116\036\126\040\113" +
    "\041\064\042\041\043\332\044\333\045\066\046\075\047" +
    "\042\052\037\057\077\064\047\066\046\067\105\001\001" +
    "\000\054\003\210\004\120\005\243\007\074\010\035\022" +
    "\054\034\206\035\116\036\126\040\113\041\064\042\041" +
    "\044\335\045\066\046\075\047\042\052\037\057\077\064" +
    "\047\066\046\067\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\003\210\004\120\005" +
    "\243\007\074\010\035\022\054\034\206\035\116\036\126" +
    "\040\113\041\064\042\041\043\337\044\333\045\066\046" +
    "\075\047\042\052\037\057\077\064\047\066\046\067\105" +
    "\001\001\000\054\003\210\004\120\005\243\007\074\010" +
    "\035\022\054\034\206\035\116\036\126\040\113\041\064" +
    "\042\041\044\335\045\066\046\075\047\042\052\037\057" +
    "\077\064\047\066\046\067\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\076\350\001\001" +
    "\000\002\001\001\000\004\061\351\001\001\000\002\001" +
    "\001\000\036\003\210\004\120\005\243\007\074\010\035" +
    "\034\206\035\116\036\126\040\113\041\064\042\353\064" +
    "\047\066\046\067\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\363\030\130\032" +
    "\053\001\001\000\010\027\360\030\130\032\053\001\001" +
    "\000\006\030\362\032\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\362\032\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\210\005\241\012\204\034\304" +
    "\036\265\040\263\041\262\056\257\064\261\065\266\066" +
    "\046\067\105\077\260\001\001\000\002\001\001\000\012" +
    "\003\210\005\241\012\204\056\u0102\001\001\000\002\001" +
    "\001\000\054\003\210\004\120\005\243\007\074\010\035" +
    "\022\054\034\206\035\116\036\126\040\113\041\064\042" +
    "\041\044\u0104\045\066\046\075\047\042\052\037\057\077" +
    "\064\047\066\046\067\105\001\001\000\002\001\001\000" +
    "\054\003\210\004\120\005\243\007\074\010\035\022\054" +
    "\034\206\035\116\036\126\040\113\041\064\042\041\044" +
    "\u0106\045\066\046\075\047\042\052\037\057\077\064\047" +
    "\066\046\067\105\001\001\000\002\001\001\000\010\027" +
    "\u010b\030\130\032\053\001\001\000\010\027\u0109\030\130" +
    "\032\053\001\001\000\006\030\362\032\053\001\001\000" +
    "\002\001\001\000\006\030\362\032\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\075\u0111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\210\005\u0116\014" +
    "\u0115\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\210\005\241\012\204\056\u0118\001\001\000\002\001" +
    "\001\000\014\034\276\040\u011a\064\300\066\046\067\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\122\005\371\013\104\014\072\015\u011d\016\112\025\071" +
    "\026\043\027\057\030\130\032\053\033\052\034\374\053" +
    "\114\054\055\062\115\001\001\000\040\003\122\005\371" +
    "\013\104\014\072\016\373\025\071\026\043\027\057\030" +
    "\130\032\053\033\052\034\374\053\114\054\055\062\115" +
    "\001\001\000\002\001\001\000\010\064\u0120\066\046\067" +
    "\105\001\001\000\002\001\001\000\004\061\u0126\001\001" +
    "\000\004\100\u0123\001\001\000\004\061\u0124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\u012d\023\u012c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u0131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    BasicLexerCupV lex;

    private int errorCount = 0;

    private Arbol arbol;

    @Override
    public void syntax_error(Symbol s) {
        errorCount++;
        System.err.println("Error sintáctico en línea " + (s.left + 1) +
                           ", columna " + (s.right + 1) + ". Token inesperado: " + s.value);
    }

    // Método para verificar si hubo errores
    public boolean hasErrors() {
        return errorCount > 0;
    }

    @SuppressWarnings("deprecation")
    public parser(BasicLexerCupV lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
        this.currentHash = null;
        this.arbol = new Arbol();
    }

    // Tabla de símbolos
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<>();
    String currentHash;

    public void imprimirTablaSimbolos() {
        for (String key : listaTablasSimbolos.keySet()) {
            System.out.println("\nTabla de símbolos: " + key);
            System.out.println("+--------+---------+----------------------+------------+");
            System.out.println("| Línea  | Columna | Lexema              | Tipo       |");
            System.out.println("+--------+---------+----------------------+------------+");
            for (String simbolo : listaTablasSimbolos.get(key)) {
                System.out.println(simbolo);
            }
            System.out.println("+--------+---------+----------------------+------------+\n");
        }
    }

    public void agregarTablaSimbolos(String tipoTabla, String nombre) {
        System.out.println("/+++Nueva tabla símbolos función o main+++/ " + nombre);
        ArrayList<String> nuevaTabla = new ArrayList<>();
        currentHash = nombre;
        listaTablasSimbolos.put(currentHash, nuevaTabla);
    }

    public void agregarVariable(int linea, int columna, String lexema, String tipo) {
        System.out.println("PARSER: identificador (agregar o verificar) " + lexema);
        if (currentHash == null) {
            System.err.println("Error: No hay una tabla de símbolos activa");
            return;
        }
        ArrayList<String> tabla = listaTablasSimbolos.get(currentHash);
        if (tabla == null) {
            System.err.println("Error: La tabla de símbolos '" + currentHash + "' no existe");
            return;
        }
        String entrada = String.format("| %-6d | %-7d | %-20s | %-10s |",
                linea + 1, columna + 1, lexema, tipo);
        tabla.add(entrada);
    }

    public Arbol getArbol() {
        return arbol;
    }

    private Nodo crearNodo(String dato) {
        return new Nodo(dato);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

 
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        parser.agregarTablaSimbolos("main", "_verano_");
        Nodo mainNode = new Nodo("_verano_");
        parser.getArbol().setRaiz(mainNode);
        RESULT = mainNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= MAIN NT$0 funciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;
		
             System.err.println("Error en la estructura inicial.");
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos ::= INTEGER 
            {
              Object RESULT =null;
		RESULT="rodolfo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipos ::= STRING 
            {
              Object RESULT =null;
		RESULT="cometa";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipos ::= CHAR 
            {
              Object RESULT =null;
		RESULT="cupido";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipos ::= FLOAT 
            {
              Object RESULT =null;
		RESULT="bromista";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipos ::= BOOL 
            {
              Object RESULT =null;
		RESULT="trueno";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tiposArr ::= L_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Symbol symbol = (Symbol) CUP$parser$stack.peek();
                              parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "rodolfo");
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiposArr",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tiposArr ::= L_CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Symbol symbol = (Symbol) CUP$parser$stack.peek();
                            parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cupido");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiposArr",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literales ::= L_STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cometa");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literales ::= L_CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cupido");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literales ::= bool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literales ::= numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // numerosLiterales ::= numeroEntero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerosLiterales",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // numerosLiterales ::= numeroFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerosLiterales",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // numeroEntero ::= L_INTEGER 
            {
              Object RESULT =null;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "rodolfo");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeroEntero",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // numeroFloat ::= L_FLOAT 
            {
              Object RESULT =null;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "bromista");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeroFloat",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bool ::= TRUE 
            {
              Object RESULT =null;
		RESULT="true";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bool ::= FALSE 
            {
              Object RESULT =null;
		RESULT="false";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresionRelacional ::= asignarTipo operadorRelacional literales 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión relacional: " + op + " " + l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresionRelacional ::= asignarTipo operadorRelacional variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresionLogica ::= asignarTipo operadorLogico literales 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión lógica: " + op + " " + l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresionLogica ::= negacion literales 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión lógica con negación: !" + n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresionLogica ::= asignarTipo operadorLogico variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignarTipo ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (t == null || idVar == null) {
            System.err.println("Error: Tipo o identificador no definido.");
            parser.agregarVariable(0, 0, "undefined", "undefined");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, idVar.toString(), t.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarTipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operadorRelacional ::= MENOR 
            {
              Object RESULT =null;
		RESULT="snowball";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operadorRelacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="evergreen";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operadorRelacional ::= MAYOR 
            {
              Object RESULT =null;
		RESULT="minstix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operadorRelacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="upatree";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operadorRelacional ::= IGUAL 
            {
              Object RESULT =null;
		RESULT="mary";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operadorRelacional ::= DIFERENTE 
            {
              Object RESULT =null;
		RESULT="openslae";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operadorLogico ::= CONJUNCION 
            {
              Object RESULT =null;
		RESULT="melchor";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operadorLogico ::= DISYUNCION 
            {
              Object RESULT =null;
		RESULT="gaspar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // negacion ::= NEGACION 
            {
              Object RESULT =null;
		RESULT="baltazar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // creacion ::= asignarTipo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // creacion ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Asignación inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // creacionAsignacion ::= asignarTipo ASIGNA expresiones FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // creacionAsignacion ::= asignarTipo ASIGNA expresionLogica FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // creacionAsignacion ::= asignarTipo ASIGNA IDENTIFICADOR FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // creacionAsignacion ::= asignarTipo error 
            {
              Object RESULT =null;
		 System.err.println("Error: Expresión inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // creacionAsignacion ::= ASIGNA literales FIN_EXPRESION error 
            {
              Object RESULT =null;
		 System.err.println("Error: Falta la asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // creacionAsignacion ::= asignarTipo ASIGNA literales error 
            {
              Object RESULT =null;
		 System.err.println("Error: Falta el fin de expresión"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia ::= expresionArr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia ::= asignaVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia ::= print 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia ::= read 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 parser.agregarTablaSimbolos("funcion", e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funcion ::= encabezadoFuncion NT$1 parametros bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // encabezadoFuncion ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), t.toString());
        RESULT = id.toString();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // encabezadoFuncion ::= IDENTIFICADOR error 
            {
              Object RESULT =null;
		 System.err.println("Error: Al encabezado de la función le falta el tipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // encabezadoFuncion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bloque ::= corcheteIzquierdo sentencias return_funcion corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloque ::= corcheteIzquierdo sentenciaEstructura return_funcion corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bloque ::= corcheteIzquierdo corcheteDerecho error 
            {
              Object RESULT =null;
		 System.err.println("Error: bloque vacio"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloque ::= corcheteIzquierdo sentencias corcheteDerecho error 
            {
              Object RESULT =null;
		 System.err.println("Error: A la función le falta el retorno"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque ::= corcheteIzquierdo sentenciaEstructura corcheteDerecho error 
            {
              Object RESULT =null;
		 System.err.println("Error: A la función le falta el retorno"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // return_funcion ::= RETURN literales FIN_EXPRESION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if (t == null) {
            System.err.println("Error: El tipo de retorno es nulo.");
            parser.agregarVariable(0, 0, "return", "undefined");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "return", t.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_funcion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // return_funcion ::= RETURN variable FIN_EXPRESION 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if (v == null) {
            System.err.println("Error: El valor de retorno es nulo.");
            parser.agregarVariable(0, 0, "return", "undefined");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "return", v.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_funcion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$2 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametros ::= PARENTESISAPERTURA NT$2 PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$3 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametros ::= PARENTESISAPERTURA NT$3 parametroAux PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametros ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Parametros mal definidos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametroAux ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (t == null || id == null) {
            System.err.println("Error: Parámetro inválido (tipo o identificador nulo).");
            parser.agregarVariable(0, 0, "parametro: undefined", "undefined");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "parametro: " + id.toString(), t.toString());
            System.out.println("Parámetro agregado: " + id.toString() + " de tipo " + t.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametroAux ::= parametroAux COMA tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (t == null || id == null) {
            System.err.println("Error: Parámetro adicional inválido (tipo o identificador nulo).");
            parser.agregarVariable(0, 0, "parametro: undefined", "undefined");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "parametro: " + id.toString(), t.toString());
            System.out.println("Parámetro adicional agregado: " + id.toString() + " de tipo " + t.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresionArr ::= crearArreglos operadorRelacional arreglos FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionArr",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresionArr ::= crearArreglos ASIGNA arreglos FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionArr",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresionArr ::= arreglos ASIGNA arreglos FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionArr",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresionArr ::= arreglos operadorRelacional arreglos FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionArr",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$4 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Symbol symbol = (Symbol) CUP$parser$stack.peek();
                parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), t.toString() + "[]");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // crearArreglos ::= tipos IDENTIFICADOR NT$4 CORCHETEAPERTURA IDENTIFICADOR CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idVarArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idVarArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idVarArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearArreglos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$5 ::= 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = "abreempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // modificarArreglos ::= IDENTIFICADOR CORCHETEAPERTURA NT$5 IDENTIFICADOR CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "cierraempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modificarArreglos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // arreglos ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arreglos ::= arreglos arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arreglo ::= parametrosArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametrosArreglo ::= corcheteIzquierdo corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametrosArreglo ::= corcheteIzquierdo parametrosArregloAux corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametrosArregloAux ::= tiposArr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArregloAux",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$6 ::= 
            {
              Object RESULT =null;
 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parametrosArregloAux ::= parametrosArregloAux COMA NT$6 tiposArr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArregloAux",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$7 ::= 
            {
              Object RESULT =null;
RESULT="entrega";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // asignaVariable ::= variable ASIGNA NT$7 literales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // asignaVariable ::= variable ASIGNA expresionCompleja FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$8 ::= 
            {
              Object RESULT =null;
RESULT="entrega";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // asignaVariable ::= modificarArreglos ASIGNA NT$8 tiposArr FIN_EXPRESION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // asignaVariable ::= modificarArreglos operadorRelacional tiposArr FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // variable ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Variable: " + idVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresionCompleja ::= expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresionCompleja ::= expresionUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresionCompleja ::= expresionRelacionalMat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresionCompleja ::= expresionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresionCompleja ::= PARENTESISAPERTURA expresionCompleja PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresionCompleja ::= expresionBinaria operadorRelacional expresionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresionCompleja ::= expresionLogica operadorLogico literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresionCompleja ::= expresionBinaria expresionUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresionCompleja ::= expresionCompleja operadorRelacional numerosLiterales operadorLogico bool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operandoBinaria ::= SUMA 
            {
              Object RESULT =null;
		RESULT="navidad";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operandoBinaria ::= RESTA 
            {
              Object RESULT =null;
		RESULT="intercambio";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operandoBinaria ::= DIVISION 
            {
              Object RESULT =null;
		RESULT="reyes";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operandoBinaria ::= MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT="nochebuena";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operandoBinaria ::= MODULO 
            {
              Object RESULT =null;
		RESULT="magos";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operandoBinaria ::= POTENCIA 
            {
              Object RESULT =null;
		RESULT="adviento";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresionBinaria ::= numerosLiterales operandoBinaria numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresionBinaria ::= numerosLiterales operandoBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresionBinaria ::= variable operandoBinaria numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operandoUnario ::= INCREMENTO 
            {
              Object RESULT =null;
		RESULT="quien";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operandoUnario ::= DECREMENTO 
            {
              Object RESULT =null;
		RESULT="grinch";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresionUnario ::= numerosLiterales operandoUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$9 ::= 
            {
              Object RESULT =null;
RESULT="-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresionUnario ::= NEGATIVO NT$9 numerosLiterales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresionUnario ::= variable operandoUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresionRelacionalMat ::= numerosLiterales operadorRelacional numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacionalMat",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresionRelacionalMat ::= variable operadorRelacional numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacionalMat",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expresiones ::= expresionRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expresiones ::= literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresiones ::= operandoBinaria numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresiones ::= expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresiones ::= expresionUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresiones ::= expresionRelacionalMat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresiones ::= variable ASIGNA variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$10 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expresiones ::= PARENTESISAPERTURA NT$10 expresiones PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentencia_lista ::= sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_lista",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentencia_lista ::= sentencia_lista sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_lista",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sentenciaEstructura ::= if_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sentenciaEstructura ::= for_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentenciaEstructura ::= while_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentenciaEstructura ::= switch_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // sentenciaEstructura ::= return_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // sentenciaEstructura ::= break_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sentenciaEstructura ::= expresiones FIN_EXPRESION 
            {
              Object RESULT =null;
		RESULT="finregalo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // if_estructura ::= IF PARENTESISAPERTURA expresionLogica PARENTESISCIERRE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // if_estructura ::= IF PARENTESISAPERTURA expresionLogica PARENTESISCIERRE sentenciaEstructura ELSE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // for_estructura ::= FOR PARENTESISAPERTURA creacionAsignacion COMA expresionLogica COMA expresionUnario PARENTESISCIERRE corcheteIzquierdo sentencias corcheteDerecho 
            {
              Object RESULT =null;
		
        System.out.println("Estructura for reconocida.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_estructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // while_estructura ::= WHILE PARENTESISAPERTURA expresionLogica PARENTESISCIERRE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_estructura",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // switch_estructura ::= SWITCH PARENTESISAPERTURA variable PARENTESISCIERRE corcheteIzquierdo casos_switch corcheteDerecho 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_estructura",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // casos_switch ::= caso_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // casos_switch ::= casos_switch caso_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // casos_switch ::= default_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // caso_switch ::= CASE numerosLiterales DOS_PUNTOS sentencia_lista FIN_EXPRESION 
            {
              Object RESULT =null;
		
        System.out.println("Caso switch reconocido.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_switch",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // default_case ::= DEFAULT DOS_PUNTOS sentencia_lista FIN_EXPRESION 
            {
              Object RESULT =null;
		
        System.out.println("Caso default reconocido.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_case",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // return_estructura ::= RETURN numerosLiterales FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // return_estructura ::= RETURN FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // break_estructura ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_estructura",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // print ::= PRINT PARENTESISAPERTURA literales PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // print ::= PRINT PARENTESISAPERTURA variable PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // print ::= PRINT PARENTESISAPERTURA variable error 
            {
              Object RESULT =null;
		 System.err.println("Error: No se cerró el print"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // print ::= PRINT error 
            {
              Object RESULT =null;
		 System.err.println("Error: Print mal formado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // print ::= PRINT variable PARENTESISCIERRE error 
            {
              Object RESULT =null;
		 System.err.println("Print mal formado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // read ::= READ PARENTESISAPERTURA numerosLiterales PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // read ::= READ PARENTESISAPERTURA variable PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // read ::= READ PARENTESISAPERTURA PARENTESISCIERRE error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
