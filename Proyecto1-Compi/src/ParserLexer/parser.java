
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\224\000\002\002\004\000\002\064\002\000\002\002" +
    "\005\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\004\005\000\002\004\003\000\002\061\005" +
    "\000\002\061\004\000\002\061\003\000\002\005\004\000" +
    "\002\005\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\003" +
    "\000\002\013\004\000\002\013\003\000\002\014\006\000" +
    "\002\014\004\000\002\014\006\000\002\014\006\000\002" +
    "\015\003\000\002\015\004\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\017\003\000\002\017\004\000\002\065\002\000" +
    "\002\020\006\000\002\060\004\000\002\060\004\000\002" +
    "\060\003\000\002\021\006\000\002\021\006\000\002\021" +
    "\005\000\002\021\006\000\002\021\006\000\002\063\005" +
    "\000\002\063\005\000\002\066\002\000\002\024\005\000" +
    "\002\067\002\000\002\024\006\000\002\024\003\000\002" +
    "\023\003\000\002\070\002\000\002\023\006\000\002\004" +
    "\005\000\002\061\005\000\002\071\002\000\002\025\006" +
    "\000\002\072\002\000\002\025\006\000\002\073\002\000" +
    "\002\026\010\000\002\026\003\000\002\074\002\000\002" +
    "\027\006\000\002\030\003\000\002\030\004\000\002\031" +
    "\003\000\002\031\003\000\002\033\004\000\002\033\005" +
    "\000\002\032\003\000\002\075\002\000\002\032\006\000" +
    "\002\004\005\000\002\061\005\000\002\076\002\000\002" +
    "\034\006\000\002\077\002\000\002\034\006\000\002\035" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\037\005\000\002\040\003\000\002\040\003\000\002" +
    "\041\004\000\002\100\002\000\002\041\005\000\002\042" +
    "\005\000\002\043\003\000\002\043\003\000\002\043\004" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\101\002\000\002\043\006\000\002\044\003\000\002" +
    "\044\003\000\002\045\003\000\002\045\004\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\004\000" +
    "\002\047\007\000\002\047\011\000\002\050\011\000\002" +
    "\062\007\000\002\051\005\000\002\051\006\000\002\102" +
    "\002\000\002\052\012\000\002\053\003\000\002\053\004" +
    "\000\002\054\006\000\002\054\005\000\002\022\005\000" +
    "\002\022\004\000\002\055\004\000\002\056\006\000\002" +
    "\056\006\000\002\056\006\000\002\056\004\000\002\056" +
    "\006\000\002\057\006\000\002\057\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\006\003\004\016\005\001\002\000\004\002" +
    "\ufffe\001\002\000\020\003\000\020\000\021\000\022\000" +
    "\023\000\024\000\025\000\001\002\000\004\002\007\001" +
    "\002\000\004\002\001\001\002\000\020\003\017\020\012" +
    "\021\016\022\022\023\023\024\013\025\021\001\002\000" +
    "\006\003\uffd2\011\uffd2\001\002\000\006\003\ufffd\025\ufffd" +
    "\001\002\000\006\003\ufff9\025\ufff9\001\002\000\022\002" +
    "\uffd4\003\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\001\002\000\004\025\026\001\002\000\006\003" +
    "\ufffc\025\ufffc\001\002\000\006\003\uffce\011\uffce\001\002" +
    "\000\022\002\uffff\003\017\020\012\021\016\022\022\023" +
    "\023\024\013\025\021\001\002\000\004\003\024\001\002" +
    "\000\006\003\ufffb\025\ufffb\001\002\000\006\003\ufffa\025" +
    "\ufffa\001\002\000\006\003\uffcf\011\uffcf\001\002\000\022" +
    "\002\uffd3\003\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\001\002\000\006\003\uffd0\011\uffd0\001\002" +
    "\000\006\003\032\011\030\001\002\000\016\012\uffc6\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\001\002\000\004" +
    "\004\033\001\002\000\004\004\uffc2\001\002\000\070\003" +
    "\062\005\056\010\053\011\072\014\114\015\076\020\037" +
    "\021\016\022\022\023\103\024\013\025\045\030\052\031" +
    "\036\032\111\033\117\034\065\035\074\040\044\052\054" +
    "\054\100\055\042\056\073\061\070\062\060\065\116\070" +
    "\046\001\002\000\022\002\uffd1\003\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\001\002\000\066\003" +
    "\uff85\005\uff85\011\uff85\020\uff85\021\uff85\022\uff85\023\uff85" +
    "\024\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035" +
    "\uff85\040\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85" +
    "\057\uff85\060\uff85\061\uff85\062\uff85\065\uff85\070\uff85\001" +
    "\002\000\006\020\uffa2\023\uffa2\001\002\000\046\003\ufffd" +
    "\012\uff8e\013\uff8e\025\ufffd\030\uff8e\031\uff8e\032\uff8e\033" +
    "\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\041\uff8e\042\uff8e" +
    "\043\uff8e\044\uff8e\045\uff8e\046\uff8e\001\002\000\004\013" +
    "\365\001\002\000\066\003\uff87\005\uff87\011\uff87\020\uff87" +
    "\021\uff87\022\uff87\023\uff87\024\uff87\030\uff87\031\uff87\032" +
    "\uff87\033\uff87\034\uff87\035\uff87\040\uff87\052\uff87\053\uff87" +
    "\054\uff87\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062" +
    "\uff87\065\uff87\070\uff87\001\002\000\004\011\353\001\002" +
    "\000\004\010\350\001\002\000\006\020\uff99\023\uff99\001" +
    "\002\000\006\006\343\010\uffa4\001\002\000\004\006\340" +
    "\001\002\000\076\003\uffd9\005\uffd9\010\uffd9\011\uffd9\014" +
    "\uffd9\015\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\040\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9" +
    "\057\uffd9\060\uffd9\061\uffd9\062\uffd9\065\uffd9\070\uffd9\001" +
    "\002\000\066\003\uff86\005\uff86\011\uff86\020\uff86\021\uff86" +
    "\022\uff86\023\uff86\024\uff86\030\uff86\031\uff86\032\uff86\033" +
    "\uff86\034\uff86\035\uff86\040\uff86\052\uff86\053\uff86\054\uff86" +
    "\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86\062\uff86\065" +
    "\uff86\070\uff86\001\002\000\076\003\uffd5\005\uffd5\010\uffd5" +
    "\011\uffd5\014\uffd5\015\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\040\uffd5\052\uffd5\053\uffd5\054\uffd5\055" +
    "\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\065\uffd5" +
    "\070\uffd5\001\002\000\006\020\uffa3\023\uffa3\001\002\000" +
    "\016\026\134\027\137\065\141\066\136\067\133\070\131" +
    "\001\002\000\004\011\327\001\002\000\032\003\323\005" +
    "\324\010\053\014\114\015\076\020\012\021\016\022\022" +
    "\023\023\024\013\025\045\062\147\001\002\000\004\003" +
    "\317\001\002\000\006\012\uff91\013\uff91\001\002\000\010" +
    "\013\314\020\157\023\160\001\002\000\066\003\uff8a\005" +
    "\uff8a\011\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a" +
    "\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\040" +
    "\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a" +
    "\060\uff8a\061\uff8a\062\uff8a\065\uff8a\070\uff8a\001\002\000" +
    "\050\003\uffe0\005\uffe0\010\uffe0\013\ufff0\014\uffe0\015\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\062\uffe0" +
    "\001\002\000\016\041\163\042\172\043\166\044\165\045" +
    "\167\046\171\001\002\000\076\003\uffd7\005\uffd7\010\uffd7" +
    "\011\uffd7\014\uffd7\015\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\040\uffd7\052\uffd7\053\uffd7\054\uffd7\055" +
    "\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\065\uffd7" +
    "\070\uffd7\001\002\000\006\020\uff9f\023\uff9f\001\002\000" +
    "\042\012\uff95\013\uff95\030\052\031\036\032\111\033\117" +
    "\034\065\035\074\036\306\037\307\041\163\042\172\043" +
    "\166\044\165\045\167\046\171\001\002\000\066\003\uff89" +
    "\005\uff89\011\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024" +
    "\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89" +
    "\040\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\057" +
    "\uff89\060\uff89\061\uff89\062\uff89\065\uff89\070\uff89\001\002" +
    "\000\004\013\302\001\002\000\066\003\uff88\005\uff88\011" +
    "\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\030\uff88" +
    "\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88\040\uff88\052" +
    "\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057\uff88\060\uff88" +
    "\061\uff88\062\uff88\065\uff88\070\uff88\001\002\000\042\003" +
    "\uff90\011\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90" +
    "\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90\040" +
    "\uff90\065\uff90\070\uff90\001\002\000\004\011\255\001\002" +
    "\000\006\020\uff9e\023\uff9e\001\002\000\076\003\uffd8\005" +
    "\uffd8\010\uffd8\011\uffd8\014\uffd8\015\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\040\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062" +
    "\uffd8\065\uffd8\070\uffd8\001\002\000\004\011\250\001\002" +
    "\000\004\010\245\001\002\000\004\011\206\001\002\000" +
    "\004\025\201\001\002\000\024\003\170\010\173\013\162" +
    "\041\163\042\172\043\166\044\165\045\167\046\171\001" +
    "\002\000\046\003\ufffa\012\uff8d\013\uff8d\025\ufffa\030\uff8d" +
    "\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037" +
    "\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d" +
    "\001\002\000\032\003\uffdb\005\uffdb\010\uffdb\014\uffdb\015" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\062\uffdb\001\002\000\006\012\uff92\013\uff92\001\002\000" +
    "\076\003\uffd6\005\uffd6\010\uffd6\011\uffd6\014\uffd6\015\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\040\uffd6" +
    "\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060" +
    "\uffd6\061\uffd6\062\uffd6\065\uffd6\070\uffd6\001\002\000\006" +
    "\020\157\023\160\001\002\000\006\012\uff96\013\uff96\001" +
    "\002\000\006\020\uffa1\023\uffa1\001\002\000\006\005\151" +
    "\062\147\001\002\000\006\003\145\025\146\001\002\000" +
    "\010\003\124\011\123\025\126\001\002\000\006\012\uff93" +
    "\013\uff93\001\002\000\004\006\120\001\002\000\006\020" +
    "\uffa0\023\uffa0\001\002\000\004\007\uffba\001\002\000\004" +
    "\007\122\001\002\000\004\025\uffb9\001\002\000\020\025" +
    "\126\026\134\027\137\065\141\066\136\067\133\070\131" +
    "\001\002\000\076\003\uff71\005\uff71\010\uff71\011\uff71\014" +
    "\uff71\015\uff71\020\uff71\021\uff71\022\uff71\023\uff71\024\uff71" +
    "\025\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71\035" +
    "\uff71\040\uff71\052\uff71\053\uff71\054\uff71\055\uff71\056\uff71" +
    "\057\uff71\060\uff71\061\uff71\062\uff71\065\uff71\070\uff71\001" +
    "\002\000\004\012\127\001\002\000\010\003\uffa4\012\uffa4" +
    "\013\uffa4\001\002\000\004\003\130\001\002\000\076\003" +
    "\uff70\005\uff70\010\uff70\011\uff70\014\uff70\015\uff70\020\uff70" +
    "\021\uff70\022\uff70\023\uff70\024\uff70\025\uff70\030\uff70\031" +
    "\uff70\032\uff70\033\uff70\034\uff70\035\uff70\040\uff70\052\uff70" +
    "\053\uff70\054\uff70\055\uff70\056\uff70\057\uff70\060\uff70\061" +
    "\uff70\062\uff70\065\uff70\070\uff70\001\002\000\102\003\ufff5" +
    "\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\040" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5" +
    "\060\ufff5\061\ufff5\062\ufff5\065\ufff5\070\ufff5\001\002\000" +
    "\102\003\ufff4\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\040\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056" +
    "\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\065\ufff4\070\ufff4" +
    "\001\002\000\102\003\ufff6\005\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\030\ufff6\031\ufff6\032\ufff6\033" +
    "\ufff6\034\ufff6\035\ufff6\040\ufff6\052\ufff6\053\ufff6\054\ufff6" +
    "\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\065" +
    "\ufff6\070\ufff6\001\002\000\102\003\ufff3\005\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\030\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\035\ufff3\040\ufff3\052\ufff3\053" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3" +
    "\062\ufff3\065\ufff3\070\ufff3\001\002\000\006\003\143\012" +
    "\144\001\002\000\102\003\ufff7\005\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\015\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\030\ufff7\031\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\040\ufff7\052\ufff7\053\ufff7\054" +
    "\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7" +
    "\065\ufff7\070\ufff7\001\002\000\102\003\ufff2\005\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\040\ufff2\052\ufff2" +
    "\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061" +
    "\ufff2\062\ufff2\065\ufff2\070\ufff2\001\002\000\004\012\142" +
    "\001\002\000\102\003\ufff8\005\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\030\ufff8\031\ufff8\032\ufff8\033" +
    "\ufff8\034\ufff8\035\ufff8\040\ufff8\052\ufff8\053\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\065" +
    "\ufff8\070\ufff8\001\002\000\076\003\uff74\005\uff74\010\uff74" +
    "\011\uff74\014\uff74\015\uff74\020\uff74\021\uff74\022\uff74\023" +
    "\uff74\024\uff74\025\uff74\030\uff74\031\uff74\032\uff74\033\uff74" +
    "\034\uff74\035\uff74\040\uff74\052\uff74\053\uff74\054\uff74\055" +
    "\uff74\056\uff74\057\uff74\060\uff74\061\uff74\062\uff74\065\uff74" +
    "\070\uff74\001\002\000\076\003\uff72\005\uff72\010\uff72\011" +
    "\uff72\014\uff72\015\uff72\020\uff72\021\uff72\022\uff72\023\uff72" +
    "\024\uff72\025\uff72\030\uff72\031\uff72\032\uff72\033\uff72\034" +
    "\uff72\035\uff72\040\uff72\052\uff72\053\uff72\054\uff72\055\uff72" +
    "\056\uff72\057\uff72\060\uff72\061\uff72\062\uff72\065\uff72\070" +
    "\uff72\001\002\000\076\003\uff73\005\uff73\010\uff73\011\uff73" +
    "\014\uff73\015\uff73\020\uff73\021\uff73\022\uff73\023\uff73\024" +
    "\uff73\025\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034\uff73" +
    "\035\uff73\040\uff73\052\uff73\053\uff73\054\uff73\055\uff73\056" +
    "\uff73\057\uff73\060\uff73\061\uff73\062\uff73\065\uff73\070\uff73" +
    "\001\002\000\036\003\uffeb\005\uffeb\010\uffeb\012\uffeb\013" +
    "\uffeb\017\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\001\002\000\036\003\uffec\005" +
    "\uffec\010\uffec\012\uffec\013\uffec\017\uffec\041\uffec\042\uffec" +
    "\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\001" +
    "\002\000\016\026\134\027\137\065\141\066\136\067\133" +
    "\070\131\001\002\000\004\005\153\001\002\000\004\003" +
    "\152\001\002\000\022\002\uffc9\003\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\001\002\000\022\002" +
    "\uffcc\003\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\001\002\000\006\003\155\013\156\001\002\000" +
    "\004\005\uffc7\001\002\000\004\005\uffc8\001\002\000\012" +
    "\012\uff8e\013\uff8e\063\uff8e\064\uff8e\001\002\000\012\012" +
    "\uff8d\013\uff8d\063\uff8d\064\uff8d\001\002\000\006\012\uff94" +
    "\013\uff94\001\002\000\076\003\uffe1\005\uffe1\010\uffe1\011" +
    "\uffe1\014\uffe1\015\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\040\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\065\uffe1\070" +
    "\uffe1\001\002\000\030\003\uffea\004\uffea\020\uffea\023\uffea" +
    "\025\uffea\026\uffea\027\uffea\065\uffea\066\uffea\067\uffea\070" +
    "\uffea\001\002\000\020\025\126\026\134\027\137\065\141" +
    "\066\136\067\133\070\131\001\002\000\030\003\uffe7\004" +
    "\uffe7\020\uffe7\023\uffe7\025\uffe7\026\uffe7\027\uffe7\065\uffe7" +
    "\066\uffe7\067\uffe7\070\uffe7\001\002\000\030\003\uffe8\004" +
    "\uffe8\020\uffe8\023\uffe8\025\uffe8\026\uffe8\027\uffe8\065\uffe8" +
    "\066\uffe8\067\uffe8\070\uffe8\001\002\000\030\003\uffe6\004" +
    "\uffe6\020\uffe6\023\uffe6\025\uffe6\026\uffe6\027\uffe6\065\uffe6" +
    "\066\uffe6\067\uffe6\070\uffe6\001\002\000\076\003\uffde\005" +
    "\uffde\010\uffde\011\uffde\014\uffde\015\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\040\uffde\052\uffde\053\uffde" +
    "\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062" +
    "\uffde\065\uffde\070\uffde\001\002\000\030\003\uffe5\004\uffe5" +
    "\020\uffe5\023\uffe5\025\uffe5\026\uffe5\027\uffe5\065\uffe5\066" +
    "\uffe5\067\uffe5\070\uffe5\001\002\000\030\003\uffe9\004\uffe9" +
    "\020\uffe9\023\uffe9\025\uffe9\026\uffe9\027\uffe9\065\uffe9\066" +
    "\uffe9\067\uffe9\070\uffe9\001\002\000\016\026\134\027\137" +
    "\065\141\066\136\067\133\070\131\001\002\000\006\003" +
    "\175\013\176\001\002\000\076\003\uffdc\005\uffdc\010\uffdc" +
    "\011\uffdc\014\uffdc\015\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\040\uffdc\052\uffdc\053\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\065\uffdc" +
    "\070\uffdc\001\002\000\076\003\uffdf\005\uffdf\010\uffdf\011" +
    "\uffdf\014\uffdf\015\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\040\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\065\uffdf\070" +
    "\uffdf\001\002\000\006\012\uffaa\013\uffaa\001\002\000\006" +
    "\012\ufff1\013\ufff1\001\002\000\004\006\uffb8\001\002\000" +
    "\004\006\203\001\002\000\004\025\204\001\002\000\004" +
    "\007\205\001\002\000\022\041\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\001\002\000\024" +
    "\003\211\020\012\021\016\022\022\023\023\024\013\051" +
    "\214\065\116\070\046\001\002\000\004\012\241\001\002" +
    "\000\006\047\215\050\217\001\002\000\010\012\uffed\047" +
    "\uffb6\050\uffb6\001\002\000\016\026\134\027\137\065\141" +
    "\066\136\067\133\070\131\001\002\000\006\047\215\050" +
    "\217\001\002\000\016\026\uffe2\027\uffe2\065\uffe2\066\uffe2" +
    "\067\uffe2\070\uffe2\001\002\000\026\003\uffe4\004\uffe4\012" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\065\uffe4\066\uffe4\067\uffe4" +
    "\070\uffe4\001\002\000\006\003\223\004\221\001\002\000" +
    "\026\003\uffe3\004\uffe3\012\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\065\uffe3\066\uffe3\067\uffe3\070\uffe3\001\002\000\012\003" +
    "\uffb1\004\uffb1\012\uffb1\013\uffb1\001\002\000\016\005\230" +
    "\020\012\021\016\022\022\023\023\024\013\001\002\000" +
    "\010\003\223\004\221\012\uffbd\001\002\000\012\003\uffb0" +
    "\004\uffb0\012\uffb0\013\uffb0\001\002\000\012\003\uffb3\004" +
    "\uffb3\012\uffb3\013\uffb3\001\002\000\012\003\uffb2\004\uffb2" +
    "\012\uffb2\013\uffb2\001\002\000\006\005\uffad\017\uffad\001" +
    "\002\000\006\005\232\017\231\001\002\000\012\003\uffaf" +
    "\004\uffaf\012\uffaf\013\uffaf\001\002\000\014\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\001\002\000\012\003\uffae" +
    "\004\uffae\012\uffae\013\uffae\001\002\000\014\020\012\021" +
    "\016\022\022\023\023\024\013\001\002\000\006\005\uffab" +
    "\017\uffab\001\002\000\004\012\uffee\001\002\000\020\025" +
    "\126\026\134\027\137\065\141\066\136\067\133\070\131" +
    "\001\002\000\004\012\uffa9\001\002\000\004\012\uffef\001" +
    "\002\000\056\003\242\011\072\020\037\021\016\022\022" +
    "\023\103\024\013\030\052\031\036\032\111\033\117\034" +
    "\065\035\074\040\044\052\054\054\100\055\042\056\073" +
    "\061\070\062\060\065\116\070\046\001\002\000\022\012" +
    "\ufff0\013\ufff0\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\001\002\000\016\041\163\042\172\043\166\044" +
    "\165\045\167\046\171\001\002\000\066\003\uff80\005\uff80" +
    "\011\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\030" +
    "\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80\040\uff80" +
    "\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80\060" +
    "\uff80\061\uff80\062\uff80\065\uff80\070\uff80\001\002\000\016" +
    "\026\uffa8\027\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\001" +
    "\002\000\016\026\134\027\137\065\141\066\136\067\133" +
    "\070\131\001\002\000\076\003\uffa7\005\uffa7\010\uffa7\011" +
    "\uffa7\014\uffa7\015\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7" +
    "\024\uffa7\025\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\040\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7" +
    "\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\065\uffa7\070" +
    "\uffa7\001\002\000\010\012\251\020\157\023\160\001\002" +
    "\000\004\003\254\001\002\000\004\012\253\001\002\000" +
    "\076\003\uff6f\005\uff6f\010\uff6f\011\uff6f\014\uff6f\015\uff6f" +
    "\020\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\030" +
    "\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\040\uff6f" +
    "\052\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057\uff6f\060" +
    "\uff6f\061\uff6f\062\uff6f\065\uff6f\070\uff6f\001\002\000\076" +
    "\003\uff6e\005\uff6e\010\uff6e\011\uff6e\014\uff6e\015\uff6e\020" +
    "\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e\030\uff6e" +
    "\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\040\uff6e\052" +
    "\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e\057\uff6e\060\uff6e" +
    "\061\uff6e\062\uff6e\065\uff6e\070\uff6e\001\002\000\004\025" +
    "\126\001\002\000\004\012\257\001\002\000\004\004\uff7d" +
    "\001\002\000\004\004\261\001\002\000\006\057\263\060" +
    "\262\001\002\000\004\063\275\001\002\000\006\020\157" +
    "\023\160\001\002\000\010\005\uff7b\057\uff7b\060\uff7b\001" +
    "\002\000\010\005\266\057\263\060\262\001\002\000\066" +
    "\003\uff7c\005\uff7c\011\uff7c\020\uff7c\021\uff7c\022\uff7c\023" +
    "\uff7c\024\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c" +
    "\035\uff7c\040\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056" +
    "\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c\065\uff7c\070\uff7c" +
    "\001\002\000\010\005\uff7a\057\uff7a\060\uff7a\001\002\000" +
    "\004\063\271\001\002\000\056\003\242\011\072\020\037" +
    "\021\016\022\022\023\103\024\013\030\052\031\036\032" +
    "\111\033\117\034\065\035\074\040\044\052\054\054\100" +
    "\055\042\056\073\061\070\062\060\065\116\070\046\001" +
    "\002\000\064\003\242\005\uff79\011\072\020\037\021\016" +
    "\022\022\023\103\024\013\030\052\031\036\032\111\033" +
    "\117\034\065\035\074\040\044\052\054\054\100\055\042" +
    "\056\073\057\uff79\060\uff79\061\070\062\060\065\116\070" +
    "\046\001\002\000\064\003\uff8c\005\uff8c\011\uff8c\020\uff8c" +
    "\021\uff8c\022\uff8c\023\uff8c\024\uff8c\030\uff8c\031\uff8c\032" +
    "\uff8c\033\uff8c\034\uff8c\035\uff8c\040\uff8c\052\uff8c\054\uff8c" +
    "\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\065" +
    "\uff8c\070\uff8c\001\002\000\064\003\uff8b\005\uff8b\011\uff8b" +
    "\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\030\uff8b\031" +
    "\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\040\uff8b\052\uff8b" +
    "\054\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062" +
    "\uff8b\065\uff8b\070\uff8b\001\002\000\056\003\242\011\072" +
    "\020\037\021\016\022\022\023\103\024\013\030\052\031" +
    "\036\032\111\033\117\034\065\035\074\040\044\052\054" +
    "\054\100\055\042\056\073\061\070\062\060\065\116\070" +
    "\046\001\002\000\064\003\242\005\uff78\011\072\020\037" +
    "\021\016\022\022\023\103\024\013\030\052\031\036\032" +
    "\111\033\117\034\065\035\074\040\044\052\054\054\100" +
    "\055\042\056\073\057\uff78\060\uff78\061\070\062\060\065" +
    "\116\070\046\001\002\000\042\003\242\011\072\020\037" +
    "\021\016\022\022\023\103\024\013\030\052\031\036\032" +
    "\111\033\117\034\065\035\074\040\044\065\116\070\046" +
    "\001\002\000\004\012\301\001\002\000\006\012\uff8f\013" +
    "\uff8f\001\002\000\066\003\uff75\005\uff75\011\uff75\020\uff75" +
    "\021\uff75\022\uff75\023\uff75\024\uff75\030\uff75\031\uff75\032" +
    "\uff75\033\uff75\034\uff75\035\uff75\040\uff75\052\uff75\053\uff75" +
    "\054\uff75\055\uff75\056\uff75\057\uff75\060\uff75\061\uff75\062" +
    "\uff75\065\uff75\070\uff75\001\002\000\006\020\157\023\160" +
    "\001\002\000\006\012\uff9a\013\uff9a\001\002\000\006\020" +
    "\157\023\160\001\002\000\006\012\uff9c\013\uff9c\001\002" +
    "\000\006\012\uff9b\013\uff9b\001\002\000\006\012\uff9d\013" +
    "\uff9d\001\002\000\006\012\uff97\013\uff97\001\002\000\006" +
    "\003\223\004\221\001\002\000\012\003\223\004\221\012" +
    "\uffbe\013\uffbe\001\002\000\066\003\uff76\005\uff76\011\uff76" +
    "\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76\030\uff76\031" +
    "\uff76\032\uff76\033\uff76\034\uff76\035\uff76\040\uff76\052\uff76" +
    "\053\uff76\054\uff76\055\uff76\056\uff76\057\uff76\060\uff76\061" +
    "\uff76\062\uff76\065\uff76\070\uff76\001\002\000\004\013\316" +
    "\001\002\000\066\003\uff77\005\uff77\011\uff77\020\uff77\021" +
    "\uff77\022\uff77\023\uff77\024\uff77\030\uff77\031\uff77\032\uff77" +
    "\033\uff77\034\uff77\035\uff77\040\uff77\052\uff77\053\uff77\054" +
    "\uff77\055\uff77\056\uff77\057\uff77\060\uff77\061\uff77\062\uff77" +
    "\065\uff77\070\uff77\001\002\000\022\002\uffcb\003\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\001\002" +
    "\000\010\003\170\010\173\013\162\001\002\000\004\005" +
    "\326\001\002\000\032\003\uffda\005\uffda\010\uffda\014\uffda" +
    "\015\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025" +
    "\uffda\062\uffda\001\002\000\076\003\uffe0\005\uffe0\010\uffe0" +
    "\011\uffe0\014\uffe0\015\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\040\uffe0\052\uffe0\053\uffe0\054\uffe0\055" +
    "\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\065\uffe0" +
    "\070\uffe0\001\002\000\004\003\325\001\002\000\022\002" +
    "\uffca\003\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\001\002\000\022\002\uffcd\003\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\001\002\000\006" +
    "\047\215\050\217\001\002\000\004\012\331\001\002\000" +
    "\056\003\242\011\072\020\037\021\016\022\022\023\103" +
    "\024\013\030\052\031\036\032\111\033\117\034\065\035" +
    "\074\040\044\052\054\054\100\055\042\056\073\061\070" +
    "\062\060\065\116\070\046\001\002\000\066\003\uff83\005" +
    "\uff83\011\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83" +
    "\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83\040" +
    "\uff83\052\uff83\053\333\054\uff83\055\uff83\056\uff83\057\uff83" +
    "\060\uff83\061\uff83\062\uff83\065\uff83\070\uff83\001\002\000" +
    "\056\003\242\011\072\020\037\021\016\022\022\023\103" +
    "\024\013\030\052\031\036\032\111\033\117\034\065\035" +
    "\074\040\044\052\054\054\100\055\042\056\073\061\070" +
    "\062\060\065\116\070\046\001\002\000\066\003\uff82\005" +
    "\uff82\011\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82" +
    "\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82\040" +
    "\uff82\052\uff82\053\uff82\054\uff82\055\uff82\056\uff82\057\uff82" +
    "\060\uff82\061\uff82\062\uff82\065\uff82\070\uff82\001\002\000" +
    "\004\013\336\001\002\000\004\003\337\001\002\000\076" +
    "\003\uffdd\005\uffdd\010\uffdd\011\uffdd\014\uffdd\015\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\040\uffdd\052" +
    "\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd" +
    "\061\uffdd\062\uffdd\065\uffdd\070\uffdd\001\002\000\004\007" +
    "\uffbc\001\002\000\004\007\342\001\002\000\004\025\uffbb" +
    "\001\002\000\004\007\uffb5\001\002\000\004\007\345\001" +
    "\002\000\004\010\uffb4\001\002\000\006\020\157\023\160" +
    "\001\002\000\006\012\uff98\013\uff98\001\002\000\016\026" +
    "\uffa6\027\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\001\002" +
    "\000\016\026\134\027\137\065\141\066\136\067\133\070" +
    "\131\001\002\000\076\003\uffa5\005\uffa5\010\uffa5\011\uffa5" +
    "\014\uffa5\015\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\025\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5" +
    "\035\uffa5\040\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056" +
    "\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\065\uffa5\070\uffa5" +
    "\001\002\000\004\025\354\001\002\000\004\063\355\001" +
    "\002\000\006\020\157\023\160\001\002\000\004\012\363" +
    "\001\002\000\004\064\360\001\002\000\006\020\157\023" +
    "\160\001\002\000\006\012\uff7f\064\362\001\002\000\004" +
    "\012\uff7e\001\002\000\026\003\323\010\053\014\114\015" +
    "\076\020\012\021\016\022\022\023\023\024\013\025\045" +
    "\001\002\000\066\003\uff81\005\uff81\011\uff81\020\uff81\021" +
    "\uff81\022\uff81\023\uff81\024\uff81\030\uff81\031\uff81\032\uff81" +
    "\033\uff81\034\uff81\035\uff81\040\uff81\052\uff81\053\uff81\054" +
    "\uff81\055\uff81\056\uff81\057\uff81\060\uff81\061\uff81\062\uff81" +
    "\065\uff81\070\uff81\001\002\000\066\003\uff84\005\uff84\011" +
    "\uff84\020\uff84\021\uff84\022\uff84\023\uff84\024\uff84\030\uff84" +
    "\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\040\uff84\052" +
    "\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84\060\uff84" +
    "\061\uff84\062\uff84\065\uff84\070\uff84\001\002\000\014\020" +
    "\012\021\016\022\022\023\023\024\013\001\002\000\004" +
    "\012\370\001\002\000\004\004\uffc5\001\002\000\006\012" +
    "\374\017\373\001\002\000\006\012\uffc1\017\uffc1\001\002" +
    "\000\014\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\001" +
    "\002\000\004\004\uffc3\001\002\000\014\020\012\021\016" +
    "\022\022\023\023\024\013\001\002\000\006\012\uffbf\017" +
    "\uffbf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\004\002\005\001\001\000\002\001\001\000" +
    "\004\064\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\014\017\017\020\013\060\010\001\001\000" +
    "\004\065\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\014\020\024\060\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\030\001\001\000\006\066\366\067\365\001\001\000" +
    "\004\021\033\001\001\000\002\001\001\000\070\003\112" +
    "\004\107\005\101\013\074\014\063\015\054\016\103\022" +
    "\047\025\100\026\062\027\042\034\046\035\076\036\106" +
    "\037\114\041\104\042\056\043\037\044\065\046\111\047" +
    "\060\050\066\052\040\055\034\056\105\057\050\062\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\100\345\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\334\010\131\001\001\000\002\001\001\000\030" +
    "\003\112\005\317\013\074\014\063\016\321\027\042\034" +
    "\046\035\076\056\105\057\050\063\320\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\314\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\302\036" +
    "\304\040\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\101\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\147" +
    "\001\001\000\002\001\001\000\004\035\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\137\010\131\035\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\153\010\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\177\010\131\035\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\173\010\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\112\005\207\012\211\025" +
    "\100\026\212\061\206\001\001\000\002\001\001\000\004" +
    "\011\235\001\001\000\002\001\001\000\006\007\234\010" +
    "\131\001\001\000\004\011\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\221\031\223\033\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\112" +
    "\005\225\032\226\001\001\000\006\031\224\033\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\075\232\001\001\000\002\001\001\000\006\003\112" +
    "\005\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\237\010\131\035\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\003\112\004\107\005\242\022" +
    "\047\025\100\026\062\036\106\037\114\041\104\042\056" +
    "\043\037\044\065\046\243\047\060\050\066\052\040\055" +
    "\034\062\070\001\001\000\002\001\001\000\004\006\163" +
    "\001\001\000\002\001\001\000\004\076\245\001\001\000" +
    "\006\007\246\010\131\001\001\000\002\001\001\000\004" +
    "\044\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\255\001\001" +
    "\000\002\001\001\000\004\102\257\001\001\000\002\001" +
    "\001\000\006\053\264\054\263\001\001\000\002\001\001" +
    "\000\004\044\267\001\001\000\002\001\001\000\004\054" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\003\112\004\107\005\242\022\047\025" +
    "\100\026\062\036\106\037\114\041\104\042\056\043\037" +
    "\044\065\045\271\046\272\047\060\050\066\052\040\055" +
    "\034\062\070\001\001\000\046\003\112\004\107\005\242" +
    "\022\047\025\100\026\062\036\106\037\114\041\104\042" +
    "\056\043\037\044\065\046\273\047\060\050\066\052\040" +
    "\055\034\062\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\003\112\004\107\005\242\022\047\025\100" +
    "\026\062\036\106\037\114\041\104\042\056\043\037\044" +
    "\065\045\275\046\272\047\060\050\066\052\040\055\034" +
    "\062\070\001\001\000\046\003\112\004\107\005\242\022" +
    "\047\025\100\026\062\036\106\037\114\041\104\042\056" +
    "\043\037\044\065\046\273\047\060\050\066\052\040\055" +
    "\034\062\070\001\001\000\030\003\112\004\107\005\242" +
    "\025\100\026\062\036\106\037\114\041\104\042\056\043" +
    "\277\044\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\310\001\001\000\002\001" +
    "\001\000\004\044\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\312\031\223\033\217\001\001\000\006\031\224\033\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\327\001\001" +
    "\000\002\001\001\000\046\003\112\004\107\005\242\022" +
    "\047\025\100\026\062\036\106\037\114\041\104\042\056" +
    "\043\037\044\065\046\331\047\060\050\066\052\040\055" +
    "\034\062\070\001\001\000\002\001\001\000\046\003\112" +
    "\004\107\005\242\022\047\025\100\026\062\036\106\037" +
    "\114\041\104\042\056\043\037\044\065\046\333\047\060" +
    "\050\066\052\040\055\034\062\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\340\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\074\343\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\346\001\001\000\002\001\001\000" +
    "\004\077\350\001\001\000\006\007\351\010\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\356\051\355\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\360\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\112\005\317\013\074\014\063" +
    "\016\363\027\042\034\046\035\076\056\105\057\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\112" +
    "\005\371\023\370\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\374" +
    "\001\001\000\002\001\001\000\006\003\112\005\375\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    BasicLexerCupV lex;

    @Override
    public void syntax_error(Symbol s) {
        System.err.println("Error sintáctico en línea " + (s.left + 1) +
                           ", columna " + (s.right + 1) + ". Token inesperado: " + s.value);

        // Intentar avanzar al siguiente token sin detener el análisis
        try {
            // Avanzar al siguiente token
            s = lex.next_token();
        } catch (Exception e) {
            System.err.println("Error al intentar avanzar al siguiente token.");
        }
    }



    @SuppressWarnings("deprecation")
    public parser(BasicLexerCupV lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
        this.currentHash = null;
    }

    // Tabla de símbolos
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<>();
    String currentHash;

    public void imprimirTablaSimbolos() {
        for (String key : listaTablasSimbolos.keySet()) {
            System.out.println("\nTabla de símbolos: " + key);
            System.out.println("+--------+---------+----------------------+------------+");
            System.out.println("| Línea  | Columna | Lexema              | Tipo       |");
            System.out.println("+--------+---------+----------------------+------------+");
            for (String simbolo : listaTablasSimbolos.get(key)) {
                System.out.println(simbolo);
            }
            System.out.println("+--------+---------+----------------------+------------+\n");
        }
    }

    public void agregarTablaSimbolos(String tipoTabla, String nombre) {
        System.out.println("/+++Nueva tabla símbolos función o main+++/ " + nombre);
        ArrayList<String> nuevaTabla = new ArrayList<>();
        currentHash = nombre;
        listaTablasSimbolos.put(currentHash, nuevaTabla);
    }

    public void agregarVariable(int linea, int columna, String lexema, String tipo) {
        System.out.println("PARSER: identificador (agregar o verificar) " + lexema);
        if (currentHash == null) {
            System.err.println("Error: No hay una tabla de símbolos activa");
            return;
        }
        ArrayList<String> tabla = listaTablasSimbolos.get(currentHash);
        if (tabla == null) {
            System.err.println("Error: La tabla de símbolos '" + currentHash + "' no existe");
            return;
        }
        String entrada = String.format("| %-6d | %-7d | %-20s | %-10s |",
                linea + 1, columna + 1, lexema, tipo);
        tabla.add(entrada);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

 
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

       parser.agregarTablaSimbolos("main", "_verano_");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= MAIN NT$0 funciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;
		
             System.err.println("Error en la estructura inicial.");
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos ::= INTEGER 
            {
              Object RESULT =null;
		RESULT="rodolfo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipos ::= STRING 
            {
              Object RESULT =null;
		RESULT="cometa";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipos ::= CHAR 
            {
              Object RESULT =null;
		RESULT="cupido";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipos ::= FLOAT 
            {
              Object RESULT =null;
		RESULT="bromista";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipos ::= BOOL 
            {
              Object RESULT =null;
		RESULT="trueno";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literales ::= L_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "rodolfo");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literales ::= L_STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cometa");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literales ::= L_FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "bromista");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literales ::= L_CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cupido");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literales ::= bool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bool ::= TRUE 
            {
              Object RESULT =null;
		RESULT="true";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bool ::= FALSE 
            {
              Object RESULT =null;
		RESULT="false";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresionRelacional ::= asignarTipo operadorRelacional literales 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión relacional: " + op + " " + l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresionRelacional ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Expresión relacional inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresionLogica ::= asignarTipo operadorLogico literales 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión lógica: " + op + " " + l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresionLogica ::= negacion literales 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión lógica con negación: !" + n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresionLogica ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Expresión lógica inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asignarTipo ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), t.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarTipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignarTipo ::= tipos error 
            {
              Object RESULT =null;
		 System.err.println("Error: Falta identificador después del tipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarTipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operadorRelacional ::= MENOR 
            {
              Object RESULT =null;
		RESULT="snowball";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operadorRelacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="evergreen";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operadorRelacional ::= MAYOR 
            {
              Object RESULT =null;
		RESULT="minstix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operadorRelacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="upatree";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operadorRelacional ::= IGUAL 
            {
              Object RESULT =null;
		RESULT="mary";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operadorRelacional ::= DIFERENTE 
            {
              Object RESULT =null;
		RESULT="openslae";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operadorLogico ::= CONJUNCION 
            {
              Object RESULT =null;
		RESULT="melchor";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operadorLogico ::= DISYUNCION 
            {
              Object RESULT =null;
		RESULT="gaspar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // negacion ::= NEGACION 
            {
              Object RESULT =null;
		RESULT="baltazar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // creacion ::= asignarTipo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // creacion ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Asignación inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // creacionAsignacion ::= asignarTipo ASIGNA literales FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // creacionAsignacion ::= asignarTipo error 
            {
              Object RESULT =null;
		 System.err.println("Error: Expresión inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // creacionAsignacion ::= ASIGNA literales FIN_EXPRESION error 
            {
              Object RESULT =null;
		 System.err.println("Error: Falta la asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // creacionAsignacion ::= asignarTipo ASIGNA literales error 
            {
              Object RESULT =null;
		 System.err.println("Error: Falta el fin de expresión"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= asignaVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia ::= print 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia ::= read 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 parser.agregarTablaSimbolos("funcion", e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // funcion ::= encabezadoFuncion NT$1 parametros bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // encabezadoFuncion ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), t.toString());
        RESULT = id.toString();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // encabezadoFuncion ::= IDENTIFICADOR error 
            {
              Object RESULT =null;
		 System.err.println("Error: Al encabezado de la función le falta el tipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // encabezadoFuncion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloque ::= corcheteIzquierdo sentencias return_funcion corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bloque ::= corcheteIzquierdo sentenciaEstructura return_funcion corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bloque ::= corcheteIzquierdo corcheteDerecho error 
            {
              Object RESULT =null;
		 System.err.println("Error: bloque vacio"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bloque ::= corcheteIzquierdo sentencias corcheteDerecho error 
            {
              Object RESULT =null;
		 System.err.println("Error: A la función le falta el retorno"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bloque ::= corcheteIzquierdo sentenciaEstructura corcheteDerecho error 
            {
              Object RESULT =null;
		 System.err.println("Error: A la función le falta el retorno"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // return_funcion ::= RETURN literales FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_funcion",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // return_funcion ::= RETURN literales error 
            {
              Object RESULT =null;
		 System.err.println("Error: Al retorno le falta el fin de expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_funcion",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$2 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametros ::= PARENTESISAPERTURA NT$2 PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$3 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parametros ::= PARENTESISAPERTURA NT$3 parametroAux PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parametros ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Parametros mal definidos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametroAux ::= asignarTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$4 ::= 
            {
              Object RESULT =null;
 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametroAux ::= parametroAux COMA NT$4 asignarTipo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresionRelacional ::= crearArreglos operadorRelacional arreglos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresionLogica ::= crearArreglos operadorLogico arreglos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$5 ::= 
            {
              Object RESULT =null;
		int cVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Character cVar = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = "abreempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipoArreglo ::= L_CHAR CORCHETEAPERTURA NT$5 CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Character cVar = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = "cierraempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$6 ::= 
            {
              Object RESULT =null;
		int iVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer iVar = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = "abreempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipoArreglo ::= L_INTEGER CORCHETEAPERTURA NT$6 CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer iVar = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = "cierraempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$7 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), t.toString() + "[]");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // crearArreglos ::= tipoArreglo IDENTIFICADOR NT$7 CORCHETEAPERTURA IDENTIFICADOR CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearArreglos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // crearArreglos ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error en la estructura de crear arreglos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearArreglos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$8 ::= 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = "abreempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // modificarArreglos ::= IDENTIFICADOR CORCHETEAPERTURA NT$8 CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = "cierraempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modificarArreglos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arreglos ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // arreglos ::= arreglos arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // arreglo ::= parametrosArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // arreglo ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Arreglo mal formado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parametrosArreglo ::= corcheteIzquierdo corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametrosArreglo ::= corcheteIzquierdo parametrosArregloAux corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametrosArregloAux ::= asignarTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArregloAux",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$9 ::= 
            {
              Object RESULT =null;
 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametrosArregloAux ::= parametrosArregloAux COMA NT$9 asignarTipo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArregloAux",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresionRelacional ::= asignarTipo operadorRelacional variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresionLogica ::= asignarTipo operadorLogico variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$10 ::= 
            {
              Object RESULT =null;
RESULT="entrega";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // asignaVariable ::= variable ASIGNA NT$10 literales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$11 ::= 
            {
              Object RESULT =null;
RESULT="entrega";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // asignaVariable ::= modificarArreglos ASIGNA NT$11 literales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // variable ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Variable: " + idVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operandoBinaria ::= SUMA 
            {
              Object RESULT =null;
		RESULT="navidad";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operandoBinaria ::= RESTA 
            {
              Object RESULT =null;
		RESULT="intercambio";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operandoBinaria ::= DIVISION 
            {
              Object RESULT =null;
		RESULT="reyes";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operandoBinaria ::= MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT="nochebuena";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operandoBinaria ::= MODULO 
            {
              Object RESULT =null;
		RESULT="magos";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operandoBinaria ::= POTENCIA 
            {
              Object RESULT =null;
		RESULT="adviento";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresionBinaria ::= expresion operandoBinaria expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operandoUnario ::= INCREMENTO 
            {
              Object RESULT =null;
		RESULT="quien";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operandoUnario ::= DECREMENTO 
            {
              Object RESULT =null;
		RESULT="grinch";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresionUnario ::= expresion operandoUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$12 ::= 
            {
              Object RESULT =null;
RESULT="-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresionUnario ::= NEGATIVO NT$12 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresionRelacionalMat ::= expresion operadorRelacional expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacionalMat",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresiones ::= expresionRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresiones ::= operandoBinaria expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresiones ::= expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresiones ::= expresionUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresiones ::= expresionRelacionalMat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$13 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresiones ::= PARENTESISAPERTURA NT$13 expresiones PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresion ::= INTEGER 
            {
              Object RESULT =null;
		RESULT="rodolfo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresion ::= FLOAT 
            {
              Object RESULT =null;
		RESULT="bromista";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentencia_lista ::= sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_lista",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencia_lista ::= sentencia_lista sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_lista",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentenciaEstructura ::= if_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentenciaEstructura ::= for_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentenciaEstructura ::= while_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentenciaEstructura ::= switch_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentenciaEstructura ::= return_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentenciaEstructura ::= break_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentenciaEstructura ::= expresiones FIN_EXPRESION 
            {
              Object RESULT =null;
		RESULT="finregalo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // if_estructura ::= IF PARENTESISAPERTURA operadorLogico PARENTESISCIERRE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // if_estructura ::= IF PARENTESISAPERTURA operadorLogico PARENTESISCIERRE sentenciaEstructura ELSE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // for_estructura ::= FOR PARENTESISAPERTURA IDENTIFICADOR DOS_PUNTOS rango PARENTESISCIERRE sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_estructura",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // while_estructura ::= WHILE PARENTESISAPERTURA expresionLogica PARENTESISCIERRE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_estructura",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // rango ::= expresion PUNTOS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rango",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // rango ::= expresion PUNTOS expresion PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rango",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$14 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "switch_" + symbol.value.toString(), "switch");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // switch_estructura ::= SWITCH PARENTESISAPERTURA variable PARENTESISCIERRE NT$14 corcheteIzquierdo casos_switch corcheteDerecho 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_estructura",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // casos_switch ::= caso_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // casos_switch ::= casos_switch caso_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // caso_switch ::= CASE expresion DOS_PUNTOS sentencia_lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_switch",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // caso_switch ::= DEFAULT DOS_PUNTOS sentencia_lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_switch",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // return_estructura ::= RETURN expresion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // return_estructura ::= RETURN FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // break_estructura ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_estructura",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // print ::= PRINT PARENTESISAPERTURA literales PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // print ::= PRINT PARENTESISAPERTURA variable PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // print ::= PRINT PARENTESISAPERTURA variable error 
            {
              Object RESULT =null;
		 System.err.println("Error: No se cerró el print"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // print ::= PRINT error 
            {
              Object RESULT =null;
		 System.err.println("Error: Print mal formado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // print ::= PRINT variable PARENTESISCIERRE error 
            {
              Object RESULT =null;
		 System.err.println("Print mal formado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // read ::= READ PARENTESISAPERTURA expresion PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // read ::= READ PARENTESISAPERTURA PARENTESISCIERRE error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
