
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\010\003\000" +
    "\002\010\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\004" +
    "\005\000\002\004\003\000\002\061\005\000\002\061\004" +
    "\000\002\061\003\000\002\005\004\000\002\005\004\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\011" +
    "\003\000\002\011\003\000\002\012\003\000\002\013\004" +
    "\000\002\013\004\000\002\014\006\000\002\015\003\000" +
    "\002\015\004\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\003" +
    "\000\002\017\004\000\002\017\003\000\002\020\004\000" +
    "\002\020\004\000\002\060\004\000\002\060\004\000\002" +
    "\021\005\000\002\021\004\000\002\024\004\000\002\024" +
    "\005\000\002\024\003\000\002\023\003\000\002\023\005" +
    "\000\002\023\003\000\002\004\005\000\002\061\005\000" +
    "\002\025\005\000\002\025\005\000\002\026\007\000\002" +
    "\027\006\000\002\030\003\000\002\030\004\000\002\030" +
    "\003\000\002\031\003\000\002\033\004\000\002\033\005" +
    "\000\002\032\003\000\002\032\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\004\000\002\035\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\037\005" +
    "\000\002\040\003\000\002\040\003\000\002\041\004\000" +
    "\002\063\002\000\002\041\005\000\002\042\005\000\002" +
    "\043\003\000\002\043\003\000\002\043\004\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\005" +
    "\000\002\044\003\000\002\044\003\000\002\045\003\000" +
    "\002\045\004\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\004\000\002\047\007\000\002\047\011" +
    "\000\002\050\011\000\002\062\007\000\002\051\005\000" +
    "\002\051\006\000\002\051\003\000\002\052\011\000\002" +
    "\053\003\000\002\053\004\000\002\054\006\000\002\054" +
    "\005\000\002\022\005\000\002\022\004\000\002\055\004" +
    "\000\002\056\006\000\002\056\006\000\002\057\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\022\003\020\016\011\026\013\027\017\065" +
    "\022\066\014\067\012\070\005\001\002\000\006\003\321" +
    "\004\320\001\002\000\006\003\ufffb\025\ufffb\001\002\000" +
    "\020\002\uffd5\026\uffd5\027\uffd5\065\uffd5\066\uffd5\067\uffd5" +
    "\070\uffd5\001\002\000\006\003\ufffa\025\ufffa\001\002\000" +
    "\006\003\316\025\317\001\002\000\032\014\055\015\040" +
    "\025\060\026\013\027\017\056\046\061\054\062\045\065" +
    "\022\066\014\067\012\070\005\001\002\000\006\003\ufffc" +
    "\025\ufffc\001\002\000\006\003\ufff9\025\ufff9\001\002\000" +
    "\006\003\ufffd\025\ufffd\001\002\000\004\002\036\001\002" +
    "\000\006\003\025\011\024\001\002\000\006\003\ufff8\025" +
    "\ufff8\001\002\000\020\002\uffd3\026\uffd3\027\uffd3\065\uffd3" +
    "\066\uffd3\067\uffd3\070\uffd3\001\002\000\020\002\uffff\026" +
    "\013\027\017\065\022\066\014\067\012\070\005\001\002" +
    "\000\006\003\ufffe\025\ufffe\001\002\000\020\002\uffd4\026" +
    "\uffd4\027\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\001\002" +
    "\000\022\003\031\012\027\026\013\027\017\065\022\066" +
    "\014\067\012\070\005\001\002\000\006\003\uffca\004\uffca" +
    "\001\002\000\006\003\uffd0\004\uffd0\001\002\000\006\003" +
    "\uffcc\004\uffcc\001\002\000\006\012\uffc9\017\uffc9\001\002" +
    "\000\006\012\uffc7\017\uffc7\001\002\000\006\012\034\017" +
    "\033\001\002\000\016\026\013\027\017\065\022\066\014" +
    "\067\012\070\005\001\002\000\006\003\uffcb\004\uffcb\001" +
    "\002\000\006\012\uffc8\017\uffc8\001\002\000\004\002\001" +
    "\001\002\000\100\002\uffd6\003\uffd6\005\uffd6\011\uffd6\014" +
    "\uffd6\015\uffd6\020\uffd6\023\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\040" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\062\uffd6\065\uffd6\066\uffd6\067\uffd6\070" +
    "\uffd6\001\002\000\004\011\313\001\002\000\100\002\uffd7" +
    "\003\uffd7\005\uffd7\011\uffd7\014\uffd7\015\uffd7\020\uffd7\023" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\040\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7" +
    "\065\uffd7\066\uffd7\067\uffd7\070\uffd7\001\002\000\100\002" +
    "\uffda\003\uffda\005\uffda\011\uffda\014\uffda\015\uffda\020\uffda" +
    "\023\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\040\uffda\052\uffda\053\uffda" +
    "\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062" +
    "\uffda\065\uffda\066\uffda\067\uffda\070\uffda\001\002\000\010" +
    "\003\306\010\310\013\307\001\002\000\034\002\000\014" +
    "\055\015\040\025\060\026\013\027\017\056\046\061\054" +
    "\062\045\065\022\066\014\067\012\070\005\001\002\000" +
    "\010\013\302\020\107\023\110\001\002\000\004\011\106" +
    "\001\002\000\004\010\104\001\002\000\036\002\uffdf\005" +
    "\uffdf\014\uffdf\015\uffdf\025\uffdf\026\uffdf\027\uffdf\056\uffdf" +
    "\061\uffdf\062\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\001" +
    "\002\000\100\002\uffdb\003\uffdb\005\uffdb\011\uffdb\014\uffdb" +
    "\015\uffdb\020\uffdb\023\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\040\uffdb" +
    "\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\062\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb" +
    "\001\002\000\100\002\uffdc\003\uffdc\005\uffdc\011\uffdc\014" +
    "\uffdc\015\uffdc\020\uffdc\023\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\040" +
    "\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc" +
    "\060\uffdc\061\uffdc\062\uffdc\065\uffdc\066\uffdc\067\uffdc\070" +
    "\uffdc\001\002\000\100\002\uffd8\003\uffd8\005\uffd8\011\uffd8" +
    "\014\uffd8\015\uffd8\020\uffd8\023\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\040\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057" +
    "\uffd8\060\uffd8\061\uffd8\062\uffd8\065\uffd8\066\uffd8\067\uffd8" +
    "\070\uffd8\001\002\000\004\013\103\001\002\000\004\011" +
    "\075\001\002\000\006\003\065\010\066\001\002\000\100" +
    "\002\uffd9\003\uffd9\005\uffd9\011\uffd9\014\uffd9\015\uffd9\020" +
    "\uffd9\023\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\035\uffd9\040\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9" +
    "\062\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\001\002\000" +
    "\010\003\uffb5\006\062\010\uffb5\001\002\000\100\002\uffdd" +
    "\003\uffdd\005\uffdd\011\uffdd\014\uffdd\015\uffdd\020\uffdd\023" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\040\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd" +
    "\065\uffdd\066\uffdd\067\uffdd\070\uffdd\001\002\000\004\025" +
    "\063\001\002\000\004\007\064\001\002\000\004\010\uffc1" +
    "\001\002\000\100\002\uffb6\003\uffb6\005\uffb6\011\uffb6\014" +
    "\uffb6\015\uffb6\020\uffb6\023\uffb6\025\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\040" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\061\uffb6\062\uffb6\065\uffb6\066\uffb6\067\uffb6\070" +
    "\uffb6\001\002\000\014\020\067\021\070\022\073\023\074" +
    "\024\071\001\002\000\104\002\ufff7\003\ufff7\005\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\020\ufff7\023\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\035\ufff7\040\ufff7\052\ufff7\053\ufff7\054\ufff7" +
    "\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\065" +
    "\ufff7\066\ufff7\067\ufff7\070\ufff7\001\002\000\104\002\ufff6" +
    "\003\ufff6\005\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\020\ufff6\023\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\040\ufff6\052" +
    "\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6" +
    "\061\ufff6\062\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\001" +
    "\002\000\104\002\ufff3\003\ufff3\005\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\020\ufff3\023\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\040\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056" +
    "\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\065\ufff3\066\ufff3" +
    "\067\ufff3\070\ufff3\001\002\000\100\002\uffb8\003\uffb8\005" +
    "\uffb8\011\uffb8\014\uffb8\015\uffb8\020\uffb8\023\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\040\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8" +
    "\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\065\uffb8\066" +
    "\uffb8\067\uffb8\070\uffb8\001\002\000\104\002\ufff5\003\ufff5" +
    "\005\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\020" +
    "\ufff5\023\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\032\ufff5\033\ufff5\034\ufff5\035\ufff5\040\ufff5\052\ufff5\053" +
    "\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5" +
    "\062\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\001\002\000" +
    "\104\002\ufff4\003\ufff4\005\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\020\ufff4\023\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\040\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\065\ufff4\066\ufff4\067\ufff4" +
    "\070\ufff4\001\002\000\016\020\067\021\070\022\073\023" +
    "\074\024\071\025\077\001\002\000\004\012\102\001\002" +
    "\000\004\012\uffb5\001\002\000\004\012\101\001\002\000" +
    "\100\002\uff86\003\uff86\005\uff86\011\uff86\014\uff86\015\uff86" +
    "\020\uff86\023\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031" +
    "\uff86\032\uff86\033\uff86\034\uff86\035\uff86\040\uff86\052\uff86" +
    "\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061" +
    "\uff86\062\uff86\065\uff86\066\uff86\067\uff86\070\uff86\001\002" +
    "\000\100\002\uff85\003\uff85\005\uff85\011\uff85\014\uff85\015" +
    "\uff85\020\uff85\023\uff85\025\uff85\026\uff85\027\uff85\030\uff85" +
    "\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\040\uff85\052" +
    "\uff85\053\uff85\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85" +
    "\061\uff85\062\uff85\065\uff85\066\uff85\067\uff85\070\uff85\001" +
    "\002\000\100\002\uff87\003\uff87\005\uff87\011\uff87\014\uff87" +
    "\015\uff87\020\uff87\023\uff87\025\uff87\026\uff87\027\uff87\030" +
    "\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035\uff87\040\uff87" +
    "\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057\uff87\060" +
    "\uff87\061\uff87\062\uff87\065\uff87\066\uff87\067\uff87\070\uff87" +
    "\001\002\000\014\020\067\021\070\022\073\023\074\024" +
    "\071\001\002\000\100\002\uffb7\003\uffb7\005\uffb7\011\uffb7" +
    "\014\uffb7\015\uffb7\020\uffb7\023\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7" +
    "\040\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\065\uffb7\066\uffb7\067\uffb7" +
    "\070\uffb7\001\002\000\006\020\107\023\110\001\002\000" +
    "\046\012\uffa0\013\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\036\uffa0\037\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\063\uffa0\064\uffa0\001\002" +
    "\000\046\012\uff9f\013\uff9f\030\uff9f\031\uff9f\032\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\046\uff9f\063\uff9f\064\uff9f\001" +
    "\002\000\004\012\112\001\002\000\004\004\113\001\002" +
    "\000\006\057\115\060\114\001\002\000\004\063\300\001" +
    "\002\000\006\020\107\023\110\001\002\000\010\005\uff8d" +
    "\057\uff8d\060\uff8d\001\002\000\010\005\120\057\115\060" +
    "\114\001\002\000\100\002\uff8e\003\uff8e\005\uff8e\011\uff8e" +
    "\014\uff8e\015\uff8e\020\uff8e\023\uff8e\025\uff8e\026\uff8e\027" +
    "\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e" +
    "\040\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057" +
    "\uff8e\060\uff8e\061\uff8e\062\uff8e\065\uff8e\066\uff8e\067\uff8e" +
    "\070\uff8e\001\002\000\010\005\uff8c\057\uff8c\060\uff8c\001" +
    "\002\000\004\063\123\001\002\000\060\003\140\011\147" +
    "\020\107\023\110\026\013\027\017\030\134\031\125\032" +
    "\157\033\163\034\142\035\150\040\131\052\135\054\151" +
    "\055\130\056\046\061\054\062\045\065\161\066\014\067" +
    "\012\070\132\001\002\000\070\003\uff97\005\uff97\011\uff97" +
    "\020\uff97\023\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032" +
    "\uff97\033\uff97\034\uff97\035\uff97\040\uff97\052\uff97\053\uff97" +
    "\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062" +
    "\uff97\065\uff97\066\uff97\067\uff97\070\uff97\001\002\000\006" +
    "\020\uffb3\023\uffb3\001\002\000\004\013\277\001\002\000" +
    "\070\003\uff99\005\uff99\011\uff99\020\uff99\023\uff99\026\uff99" +
    "\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035" +
    "\uff99\040\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99" +
    "\057\uff99\060\uff99\061\uff99\062\uff99\065\uff99\066\uff99\067" +
    "\uff99\070\uff99\001\002\000\004\011\264\001\002\000\006" +
    "\020\uffaa\023\uffaa\001\002\000\010\003\ufffb\006\260\025" +
    "\ufffb\001\002\000\070\003\uff98\005\uff98\011\uff98\020\uff98" +
    "\023\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033" +
    "\uff98\034\uff98\035\uff98\040\uff98\052\uff98\053\uff98\054\uff98" +
    "\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\065" +
    "\uff98\066\uff98\067\uff98\070\uff98\001\002\000\006\020\uffb4" +
    "\023\uffb4\001\002\000\004\011\252\001\002\000\006\012" +
    "\uffa2\013\uffa2\001\002\000\070\003\uff9c\005\uff9c\011\uff9c" +
    "\020\uff9c\023\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032" +
    "\uff9c\033\uff9c\034\uff9c\035\uff9c\040\uff9c\052\uff9c\053\uff9c" +
    "\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062" +
    "\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\001\002\000\006" +
    "\012\ufff1\013\ufff1\001\002\000\016\041\172\042\173\043" +
    "\174\044\175\045\170\046\171\001\002\000\006\020\uffb0" +
    "\023\uffb0\001\002\000\066\003\140\005\uff8b\011\147\020" +
    "\107\023\110\026\013\027\017\030\134\031\125\032\157" +
    "\033\163\034\142\035\150\040\131\052\135\054\151\055" +
    "\130\056\046\057\uff8b\060\uff8b\061\054\062\045\065\161" +
    "\066\014\067\012\070\132\001\002\000\042\012\uffa6\013" +
    "\uffa6\030\134\031\125\032\157\033\163\034\142\035\150" +
    "\036\243\037\244\041\172\042\173\043\174\044\175\045" +
    "\170\046\171\001\002\000\070\003\uff9b\005\uff9b\011\uff9b" +
    "\020\uff9b\023\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\033\uff9b\034\uff9b\035\uff9b\040\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062" +
    "\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\001\002\000\070" +
    "\003\uff9a\005\uff9a\011\uff9a\020\uff9a\023\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a" +
    "\040\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057" +
    "\uff9a\060\uff9a\061\uff9a\062\uff9a\065\uff9a\066\uff9a\067\uff9a" +
    "\070\uff9a\001\002\000\044\003\140\011\147\020\107\023" +
    "\110\026\013\027\017\030\134\031\125\032\157\033\163" +
    "\034\142\035\150\040\131\065\161\066\014\067\012\070" +
    "\132\001\002\000\006\020\uffaf\023\uffaf\001\002\000\004" +
    "\011\203\001\002\000\004\025\177\001\002\000\016\041" +
    "\172\042\173\043\174\044\175\045\170\046\171\001\002" +
    "\000\006\012\uffa3\013\uffa3\001\002\000\006\020\107\023" +
    "\110\001\002\000\006\012\uffa7\013\uffa7\001\002\000\006" +
    "\020\uffb2\023\uffb2\001\002\000\066\003\uff9e\005\uff9e\011" +
    "\uff9e\020\uff9e\023\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e" +
    "\032\uff9e\033\uff9e\034\uff9e\035\uff9e\040\uff9e\052\uff9e\054" +
    "\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e" +
    "\065\uff9e\066\uff9e\067\uff9e\070\uff9e\001\002\000\010\003" +
    "\ufffe\006\164\025\ufffe\001\002\000\006\012\uffa4\013\uffa4" +
    "\001\002\000\006\020\uffb1\023\uffb1\001\002\000\004\007" +
    "\165\001\002\000\004\025\uffc3\001\002\000\006\012\uffa5" +
    "\013\uffa5\001\002\000\014\020\067\021\070\022\073\023" +
    "\074\024\071\001\002\000\020\003\uffe7\004\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\001\002\000\020\003" +
    "\uffe6\004\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\001\002\000\020\003\uffeb\004\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\001\002\000\020\003\uffea\004\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\001\002\000" +
    "\020\003\uffe9\004\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\001\002\000\020\003\uffe8\004\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\001\002\000\006\012\ufff2" +
    "\013\ufff2\001\002\000\004\006\200\001\002\000\004\025" +
    "\201\001\002\000\004\007\202\001\002\000\022\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\001\002\000\022\003\206\026\013\027\017\051\211" +
    "\065\161\066\014\067\012\070\132\001\002\000\004\012" +
    "\234\001\002\000\006\047\212\050\213\001\002\000\004" +
    "\012\uffee\001\002\000\014\020\067\021\070\022\073\023" +
    "\074\024\071\001\002\000\006\047\212\050\213\001\002" +
    "\000\014\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\001" +
    "\002\000\022\003\uffe5\004\uffe5\012\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\001\002\000\022\003\uffe4\004" +
    "\uffe4\012\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\001\002\000\006\003\220\004\216\001\002\000\006\004" +
    "\216\012\uffc5\001\002\000\020\005\224\026\013\027\017" +
    "\065\022\066\014\067\012\070\005\001\002\000\010\004" +
    "\uffbd\012\uffbd\013\uffbd\001\002\000\010\004\uffbe\012\uffbe" +
    "\013\uffbe\001\002\000\010\004\uffc0\012\uffc0\013\uffc0\001" +
    "\002\000\006\005\uffba\017\uffba\001\002\000\006\005\226" +
    "\017\225\001\002\000\010\004\uffbc\012\uffbc\013\uffbc\001" +
    "\002\000\016\026\013\027\017\065\022\066\014\067\012" +
    "\070\005\001\002\000\010\004\uffbb\012\uffbb\013\uffbb\001" +
    "\002\000\006\005\uffb9\017\uffb9\001\002\000\010\004\uffbf" +
    "\012\uffbf\013\uffbf\001\002\000\004\012\uffef\001\002\000" +
    "\014\020\067\021\070\022\073\023\074\024\071\001\002" +
    "\000\004\012\ufff0\001\002\000\060\003\140\011\147\020" +
    "\107\023\110\026\013\027\017\030\134\031\125\032\157" +
    "\033\163\034\142\035\150\040\131\052\135\054\151\055" +
    "\130\056\046\061\054\062\045\065\161\066\014\067\012" +
    "\070\132\001\002\000\070\003\uff92\005\uff92\011\uff92\020" +
    "\uff92\023\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92" +
    "\033\uff92\034\uff92\035\uff92\040\uff92\052\uff92\053\uff92\054" +
    "\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92" +
    "\065\uff92\066\uff92\067\uff92\070\uff92\001\002\000\004\012" +
    "\237\001\002\000\006\012\uffa1\013\uffa1\001\002\000\006" +
    "\020\107\023\110\001\002\000\006\012\uffab\013\uffab\001" +
    "\002\000\006\020\107\023\110\001\002\000\006\012\uffad" +
    "\013\uffad\001\002\000\006\012\uffac\013\uffac\001\002\000" +
    "\006\012\uffae\013\uffae\001\002\000\006\012\uffa8\013\uffa8" +
    "\001\002\000\066\003\uff9d\005\uff9d\011\uff9d\020\uff9d\023" +
    "\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d" +
    "\034\uff9d\035\uff9d\040\uff9d\052\uff9d\054\uff9d\055\uff9d\056" +
    "\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\065\uff9d\066\uff9d" +
    "\067\uff9d\070\uff9d\001\002\000\006\003\220\004\216\001" +
    "\002\000\010\004\216\012\uffc6\013\uffc6\001\002\000\006" +
    "\047\212\050\213\001\002\000\004\012\254\001\002\000" +
    "\060\003\140\011\147\020\107\023\110\026\013\027\017" +
    "\030\134\031\125\032\157\033\163\034\142\035\150\040" +
    "\131\052\135\054\151\055\130\056\046\061\054\062\045" +
    "\065\161\066\014\067\012\070\132\001\002\000\070\003" +
    "\uff95\005\uff95\011\uff95\020\uff95\023\uff95\026\uff95\027\uff95" +
    "\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95\040" +
    "\uff95\052\uff95\053\256\054\uff95\055\uff95\056\uff95\057\uff95" +
    "\060\uff95\061\uff95\062\uff95\065\uff95\066\uff95\067\uff95\070" +
    "\uff95\001\002\000\060\003\140\011\147\020\107\023\110" +
    "\026\013\027\017\030\134\031\125\032\157\033\163\034" +
    "\142\035\150\040\131\052\135\054\151\055\130\056\046" +
    "\061\054\062\045\065\161\066\014\067\012\070\132\001" +
    "\002\000\070\003\uff94\005\uff94\011\uff94\020\uff94\023\uff94" +
    "\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034" +
    "\uff94\035\uff94\040\uff94\052\uff94\053\uff94\054\uff94\055\uff94" +
    "\056\uff94\057\uff94\060\uff94\061\uff94\062\uff94\065\uff94\066" +
    "\uff94\067\uff94\070\uff94\001\002\000\004\007\261\001\002" +
    "\000\004\025\uffc4\001\002\000\006\020\107\023\110\001" +
    "\002\000\006\012\uffa9\013\uffa9\001\002\000\004\025\265" +
    "\001\002\000\004\063\266\001\002\000\010\003\270\020" +
    "\107\023\110\001\002\000\004\012\275\001\002\000\004" +
    "\012\uff8f\001\002\000\004\064\272\001\002\000\006\020" +
    "\107\023\110\001\002\000\006\012\uff91\064\274\001\002" +
    "\000\004\012\uff90\001\002\000\032\014\055\015\040\025" +
    "\060\026\013\027\017\056\046\061\054\062\045\065\022" +
    "\066\014\067\012\070\005\001\002\000\070\003\uff93\005" +
    "\uff93\011\uff93\020\uff93\023\uff93\026\uff93\027\uff93\030\uff93" +
    "\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\040\uff93\052" +
    "\uff93\053\uff93\054\uff93\055\uff93\056\uff93\057\uff93\060\uff93" +
    "\061\uff93\062\uff93\065\uff93\066\uff93\067\uff93\070\uff93\001" +
    "\002\000\070\003\uff96\005\uff96\011\uff96\020\uff96\023\uff96" +
    "\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034" +
    "\uff96\035\uff96\040\uff96\052\uff96\053\uff96\054\uff96\055\uff96" +
    "\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96\065\uff96\066" +
    "\uff96\067\uff96\070\uff96\001\002\000\060\003\140\011\147" +
    "\020\107\023\110\026\013\027\017\030\134\031\125\032" +
    "\157\033\163\034\142\035\150\040\131\052\135\054\151" +
    "\055\130\056\046\061\054\062\045\065\161\066\014\067" +
    "\012\070\132\001\002\000\066\003\140\005\uff8a\011\147" +
    "\020\107\023\110\026\013\027\017\030\134\031\125\032" +
    "\157\033\163\034\142\035\150\040\131\052\135\054\151" +
    "\055\130\056\046\057\uff8a\060\uff8a\061\054\062\045\065" +
    "\161\066\014\067\012\070\132\001\002\000\100\002\uff88" +
    "\003\uff88\005\uff88\011\uff88\014\uff88\015\uff88\020\uff88\023" +
    "\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88" +
    "\033\uff88\034\uff88\035\uff88\040\uff88\052\uff88\053\uff88\054" +
    "\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062\uff88" +
    "\065\uff88\066\uff88\067\uff88\070\uff88\001\002\000\004\013" +
    "\304\001\002\000\100\002\uff89\003\uff89\005\uff89\011\uff89" +
    "\014\uff89\015\uff89\020\uff89\023\uff89\025\uff89\026\uff89\027" +
    "\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89" +
    "\040\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\057" +
    "\uff89\060\uff89\061\uff89\062\uff89\065\uff89\066\uff89\067\uff89" +
    "\070\uff89\001\002\000\036\002\uffde\005\uffde\014\uffde\015" +
    "\uffde\025\uffde\026\uffde\027\uffde\056\uffde\061\uffde\062\uffde" +
    "\065\uffde\066\uffde\067\uffde\070\uffde\001\002\000\100\002" +
    "\uffe1\003\uffe1\005\uffe1\011\uffe1\014\uffe1\015\uffe1\020\uffe1" +
    "\023\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\040\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1\001\002\000\100" +
    "\002\uffe2\003\uffe2\005\uffe2\011\uffe2\014\uffe2\015\uffe2\020" +
    "\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\040\uffe2\052\uffe2\053" +
    "\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2" +
    "\062\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\001\002\000" +
    "\014\020\067\021\070\022\073\023\074\024\071\001\002" +
    "\000\004\013\312\001\002\000\100\002\uffe0\003\uffe0\005" +
    "\uffe0\011\uffe0\014\uffe0\015\uffe0\020\uffe0\023\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\040\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\065\uffe0\066" +
    "\uffe0\067\uffe0\070\uffe0\001\002\000\006\020\107\023\110" +
    "\001\002\000\004\012\315\001\002\000\100\002\uff84\003" +
    "\uff84\005\uff84\011\uff84\014\uff84\015\uff84\020\uff84\023\uff84" +
    "\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033" +
    "\uff84\034\uff84\035\uff84\040\uff84\052\uff84\053\uff84\054\uff84" +
    "\055\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062\uff84\065" +
    "\uff84\066\uff84\067\uff84\070\uff84\001\002\000\040\003\uffec" +
    "\005\uffec\010\uffec\011\uffec\012\uffec\013\uffec\017\uffec\041" +
    "\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec" +
    "\050\uffec\001\002\000\040\003\uffed\005\uffed\010\uffed\011" +
    "\uffed\012\uffed\013\uffed\017\uffed\041\uffed\042\uffed\043\uffed" +
    "\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\001\002\000" +
    "\034\003\324\014\055\015\040\025\060\026\013\027\017" +
    "\056\046\061\054\062\045\065\022\066\014\067\012\070" +
    "\005\001\002\000\024\002\uffd1\003\uffcf\004\uffcf\026\uffd1" +
    "\027\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\001\002\000" +
    "\020\002\uffd2\026\uffd2\027\uffd2\065\uffd2\066\uffd2\067\uffd2" +
    "\070\uffd2\001\002\000\034\005\325\014\055\015\040\025" +
    "\060\026\013\027\017\056\046\061\054\062\045\065\022" +
    "\066\014\067\012\070\005\001\002\000\020\002\uffcd\026" +
    "\uffcd\027\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd\001\002" +
    "\000\020\002\uffce\026\uffce\027\uffce\065\uffce\066\uffce\067" +
    "\uffce\070\uffce\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\020\002\014\003\007\005\015\010\006\017" +
    "\020\020\005\060\003\001\001\000\004\021\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\007\005\042\010\006\013\051" +
    "\014\050\015\043\016\047\022\040\027\046\034\060\035" +
    "\055\052\036\055\052\056\041\057\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\007\005\015\010\006\020\022\060" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\007\005\027\010\006\023\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\007\005" +
    "\034\010\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\007\005\042\010\006\013\051\014\050\016\304\022" +
    "\040\027\046\034\060\035\055\052\036\055\052\056\041" +
    "\057\056\001\001\000\004\044\302\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\077\035\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\104\001\001\000" +
    "\002\001\001\000\004\044\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\053\116\054\115\001\001\000\002\001\001\000\004" +
    "\044\121\001\001\000\002\001\001\000\004\054\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\007\004\155\005\152\010\006\022\132\025" +
    "\151\026\140\036\154\037\161\041\153\042\135\043\125" +
    "\044\143\045\142\046\157\047\136\050\144\052\126\055" +
    "\123\062\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\247\001\001" +
    "\000\002\001\001\000\050\003\007\004\155\005\152\010" +
    "\006\022\132\025\151\026\140\036\154\037\161\041\153" +
    "\042\135\043\125\044\143\046\246\047\136\050\144\052" +
    "\126\055\123\062\145\001\001\000\010\006\237\036\241" +
    "\040\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\007\004\155\005\152\010\006\025\151\026\140" +
    "\036\154\037\161\041\153\042\135\043\235\044\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\166\001\001\000\002\001\001\000\004\044" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\007\005\204\010\006\012\206\025\151\026\207\061" +
    "\203\001\001\000\002\001\001\000\004\011\231\001\001" +
    "\000\002\001\001\000\004\007\230\001\001\000\004\011" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\214\031\220\033\216\001\001\000" +
    "\006\031\227\033\216\001\001\000\012\003\007\005\221" +
    "\010\006\032\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\007\005\226\010\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\232\001\001\000\002\001" +
    "\001\000\050\003\007\004\155\005\152\010\006\022\132" +
    "\025\151\026\140\036\154\037\161\041\153\042\135\043" +
    "\125\044\143\046\234\047\136\050\144\052\126\055\123" +
    "\062\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\245\001\001\000\002\001\001" +
    "\000\004\044\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\250\031\220\033\216\001\001\000\006\031" +
    "\227\033\216\001\001\000\004\011\252\001\001\000\002" +
    "\001\001\000\050\003\007\004\155\005\152\010\006\022" +
    "\132\025\151\026\140\036\154\037\161\041\153\042\135" +
    "\043\125\044\143\046\254\047\136\050\144\052\126\055" +
    "\123\062\145\001\001\000\002\001\001\000\050\003\007" +
    "\004\155\005\152\010\006\022\132\025\151\026\140\036" +
    "\154\037\161\041\153\042\135\043\125\044\143\046\256" +
    "\047\136\050\144\052\126\055\123\062\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\044\270\051\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\007\005\042\010\006\013\051\014\050\016\275\022" +
    "\040\027\046\034\060\035\055\052\036\055\052\056\041" +
    "\057\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\007\004\155\005\152\010\006\022\132\025\151" +
    "\026\140\036\154\037\161\041\153\042\135\043\125\044" +
    "\143\045\300\046\157\047\136\050\144\052\126\055\123" +
    "\062\145\001\001\000\050\003\007\004\155\005\152\010" +
    "\006\022\132\025\151\026\140\036\154\037\161\041\153" +
    "\042\135\043\125\044\143\046\246\047\136\050\144\052" +
    "\126\055\123\062\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\310\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\313\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\007\005\042\010\006\013\051\014" +
    "\050\015\322\016\047\022\040\027\046\034\060\035\055" +
    "\052\036\055\052\056\041\057\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\007\005\042\010\006" +
    "\013\051\014\050\016\304\022\040\027\046\034\060\035" +
    "\055\052\036\055\052\056\041\057\056\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    BasicLexerCupV lex;

    @SuppressWarnings("deprecation")
    public parser(BasicLexerCupV lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= MAIN sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tipos ::= L_INTEGER 
            {
              Object RESULT =null;
		int iVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("tipo: " + iVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos ::= L_STRING 
            {
              Object RESULT =null;
		int sVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("tipo: " + sVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipos ::= L_FLOAT 
            {
              Object RESULT =null;
		int fVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("tipo: " + fVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipos ::= L_CHAR 
            {
              Object RESULT =null;
		int cVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("tipo: " + cVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipos ::= bool 
            {
              Object RESULT =null;
		int bVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("tipo: " + bVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bool ::= TRUE 
            {
              Object RESULT =null;
		RESULT="true";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bool ::= FALSE 
            {
              Object RESULT =null;
		RESULT="false";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literales ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="rodolfo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literales ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="cometa";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literales ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="cupido";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literales ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="bromista";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literales ::= BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="trueno";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresionRelacional ::= asignarTipo operadorRelacional literales 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión relacional: " + op + " " + l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresionRelacional ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Expresión relacional inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresionLogica ::= asignarTipo operadorLogico literales 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión lógica: " + op + " " + l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresionLogica ::= negacion literales 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión lógica con negación: !" + n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresionLogica ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Expresión lógica inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // asignarTipo ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Asignación: " + idVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarTipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asignarTipo ::= tipos error 
            {
              Object RESULT =null;
		 System.err.println("Error: Falta identificador después del tipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarTipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operadorRelacional ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operadorRelacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operadorRelacional ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operadorRelacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operadorRelacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operadorRelacional ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operadorLogico ::= CONJUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operadorLogico ::= DISYUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // negacion ::= NEGACION 
            {
              Object RESULT =null;
		RESULT="baltazar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // creacion ::= asignarTipo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // creacion ::= asignarTipo error 
            {
              Object RESULT =null;
		
               parser.action_obj.reportProductionError("Falta punto y coma al final de la declaración", parser);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // creacionAsignacion ::= asignarTipo ASIGNA literales FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= asignaVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= print 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= read 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= break_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia ::= return_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia ::= switch_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // funciones ::= error 
            {
              Object RESULT =null;
		
               parser.action_obj.reportProductionError("Definición de función inválida", parser);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // funcion ::= encabezadoFuncion bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // funcion ::= encabezadoFuncion error 
            {
              Object RESULT =null;
		
              parser.action_obj.reportProductionError("Falta bloque de código", parser);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // encabezadoFuncion ::= asignarTipo parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // encabezadoFuncion ::= encabezadoFuncion error 
            {
              Object RESULT =null;
		
                        parser.action_obj.reportProductionError("Encabezado de función inválido", parser);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bloque ::= corcheteIzquierdo sentencias corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloque ::= corcheteIzquierdo error 
            {
              Object RESULT =null;
		
             parser.action_obj.reportProductionError("Bloque de código incompleto", parser);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametros ::= PARENTESISAPERTURA PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametros ::= PARENTESISAPERTURA parametroAux PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametros ::= error 
            {
              Object RESULT =null;
		
                 parser.action_obj.reportProductionError("Definición de parámetros inválida", parser);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametroAux ::= asignarTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametroAux ::= parametroAux COMA asignarTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parametroAux ::= error 
            {
              Object RESULT =null;
		
                   parser.action_obj.reportProductionError("Parámetros mal definidos", parser);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresionRelacional ::= crearArreglos operadorRelacional arreglos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresionLogica ::= crearArreglos operadorLogico arreglos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipoArreglo ::= L_CHAR CORCHETEAPERTURA CORCHETECIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipoArreglo ::= L_INTEGER CORCHETEAPERTURA CORCHETECIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // crearArreglos ::= tipoArreglo IDENTIFICADOR CORCHETEAPERTURA IDENTIFICADOR CORCHETECIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearArreglos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // modificarArreglos ::= IDENTIFICADOR CORCHETEAPERTURA IDENTIFICADOR CORCHETECIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modificarArreglos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arreglos ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arreglos ::= arreglos arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arreglos ::= error 
            {
              Object RESULT =null;
		
               parser.action_obj.reportProductionError("Definición de arreglos inválida", parser);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arreglo ::= parametrosArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametrosArreglo ::= corcheteIzquierdo corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametrosArreglo ::= corcheteIzquierdo parametrosArregloAux corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametrosArregloAux ::= asignarTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArregloAux",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametrosArregloAux ::= parametrosArregloAux COMA asignarTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArregloAux",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // asignaVariable ::= variable ASIGNA literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // asignaVariable ::= modificarArreglos ASIGNA literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignaVariable ::= variable error 
            {
              Object RESULT =null;
		
                     parser.action_obj.reportProductionError("Asignación de variable mal formada", parser);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // variable ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operandoBinaria ::= SUMA 
            {
              Object RESULT =null;
		RESULT="navidad";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operandoBinaria ::= RESTA 
            {
              Object RESULT =null;
		RESULT="intercambio";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operandoBinaria ::= DIVISION 
            {
              Object RESULT =null;
		RESULT="reyes";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operandoBinaria ::= MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT="nochebuena";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operandoBinaria ::= MODULO 
            {
              Object RESULT =null;
		RESULT="magos";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operandoBinaria ::= POTENCIA 
            {
              Object RESULT =null;
		RESULT="adviento";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresionBinaria ::= expresion operandoBinaria expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operandoUnario ::= INCREMENTO 
            {
              Object RESULT =null;
		RESULT="quien";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operandoUnario ::= DECREMENTO 
            {
              Object RESULT =null;
		RESULT="grinch";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresionUnario ::= expresion operandoUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$0 ::= 
            {
              Object RESULT =null;
RESULT="-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresionUnario ::= NEGATIVO NT$0 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresionRelacionalMat ::= expresion operadorRelacional expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacionalMat",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresiones ::= expresionRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresiones ::= operandoBinaria expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresiones ::= expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresiones ::= expresionUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresiones ::= expresionRelacionalMat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresiones ::= PARENTESISAPERTURA expresiones PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= INTEGER 
            {
              Object RESULT =null;
		RESULT="rodolfo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= FLOAT 
            {
              Object RESULT =null;
		RESULT="bromista";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentencia_lista ::= sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_lista",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentencia_lista ::= sentencia_lista sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_lista",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentenciaEstructura ::= if_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentenciaEstructura ::= for_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentenciaEstructura ::= while_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentenciaEstructura ::= switch_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentenciaEstructura ::= return_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentenciaEstructura ::= break_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentenciaEstructura ::= expresiones FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // if_estructura ::= IF PARENTESISAPERTURA operadorLogico PARENTESISCIERRE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // if_estructura ::= IF PARENTESISAPERTURA operadorLogico PARENTESISCIERRE sentenciaEstructura ELSE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // for_estructura ::= FOR PARENTESISAPERTURA IDENTIFICADOR DOS_PUNTOS rango PARENTESISCIERRE sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_estructura",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // while_estructura ::= WHILE PARENTESISAPERTURA expresionLogica PARENTESISCIERRE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_estructura",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // rango ::= expresion PUNTOS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rango",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // rango ::= expresion PUNTOS expresion PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rango",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // rango ::= error 
            {
              Object RESULT =null;
		
            parser.action_obj.reportProductionError("Rango inválido", parser);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rango",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // switch_estructura ::= SWITCH PARENTESISAPERTURA expresion PARENTESISCIERRE corcheteIzquierdo casos_switch corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_estructura",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // casos_switch ::= caso_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // casos_switch ::= casos_switch caso_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // caso_switch ::= CASE expresion DOS_PUNTOS sentencia_lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_switch",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // caso_switch ::= DEFAULT DOS_PUNTOS sentencia_lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_switch",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // return_estructura ::= RETURN expresion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // return_estructura ::= RETURN FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // break_estructura ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_estructura",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // print ::= PRINT PARENTESISAPERTURA literales PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // print ::= PRINT PARENTESISAPERTURA variable PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // read ::= READ PARENTESISAPERTURA expresion PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
