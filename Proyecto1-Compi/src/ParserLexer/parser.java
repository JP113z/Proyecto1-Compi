
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\064\002\000\002\002" +
    "\005\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\003\000\002\010\003\000\002\004\005\000\002\004\003" +
    "\000\002\061\005\000\002\061\004\000\002\061\003\000" +
    "\002\005\004\000\002\005\004\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\003\000\002\013\004\000\002\014\006\000" +
    "\002\015\003\000\002\015\004\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\017\003\000\002\017\004" +
    "\000\002\065\002\000\002\020\006\000\002\060\004\000" +
    "\002\021\006\000\002\021\006\000\002\063\005\000\002" +
    "\066\002\000\002\024\005\000\002\067\002\000\002\024" +
    "\006\000\002\023\003\000\002\070\002\000\002\023\006" +
    "\000\002\004\005\000\002\061\005\000\002\071\002\000" +
    "\002\025\006\000\002\072\002\000\002\025\006\000\002" +
    "\073\002\000\002\026\010\000\002\074\002\000\002\027" +
    "\006\000\002\030\003\000\002\030\004\000\002\031\003" +
    "\000\002\033\004\000\002\033\005\000\002\032\003\000" +
    "\002\075\002\000\002\032\006\000\002\004\005\000\002" +
    "\061\005\000\002\076\002\000\002\034\006\000\002\077" +
    "\002\000\002\034\006\000\002\035\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\037\005\000\002" +
    "\040\003\000\002\040\003\000\002\041\004\000\002\100" +
    "\002\000\002\041\005\000\002\042\005\000\002\043\003" +
    "\000\002\043\003\000\002\043\004\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\101\002\000\002" +
    "\043\006\000\002\044\003\000\002\044\003\000\002\045" +
    "\003\000\002\045\004\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\004\000\002\047\007\000\002" +
    "\047\011\000\002\050\011\000\002\062\007\000\002\051" +
    "\005\000\002\051\006\000\002\102\002\000\002\052\012" +
    "\000\002\053\003\000\002\053\004\000\002\054\006\000" +
    "\002\054\005\000\002\022\005\000\002\022\004\000\002" +
    "\055\004\000\002\056\006\000\002\056\006\000\002\057" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\006\003\004\016\005\001\002\000\004\002" +
    "\ufffe\001\002\000\014\020\000\021\000\022\000\023\000" +
    "\024\000\001\002\000\004\002\007\001\002\000\004\002" +
    "\001\001\002\000\014\020\012\021\016\022\021\023\020" +
    "\024\013\001\002\000\004\011\uffd4\001\002\000\006\003" +
    "\ufffd\025\ufffd\001\002\000\006\003\ufff9\025\ufff9\001\002" +
    "\000\016\002\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\001\002\000\004\025\023\001\002\000\006\003\ufffc" +
    "\025\ufffc\001\002\000\016\002\uffff\020\012\021\016\022" +
    "\021\023\020\024\013\001\002\000\006\003\ufffa\025\ufffa" +
    "\001\002\000\006\003\ufffb\025\ufffb\001\002\000\016\002" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\001\002" +
    "\000\004\011\uffd2\001\002\000\004\011\025\001\002\000" +
    "\016\012\uffce\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\001\002\000\004\004\027\001\002\000\064\003\054\011" +
    "\064\014\106\015\071\020\032\021\016\022\021\023\075" +
    "\024\013\025\041\030\046\031\033\032\103\033\111\034" +
    "\057\035\066\040\040\052\047\054\072\055\037\056\065" +
    "\061\062\062\052\065\107\070\042\001\002\000\016\002" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\001\002" +
    "\000\066\003\uff90\005\uff90\011\uff90\020\uff90\021\uff90\022" +
    "\uff90\023\uff90\024\uff90\030\uff90\031\uff90\032\uff90\033\uff90" +
    "\034\uff90\035\uff90\040\uff90\052\uff90\053\uff90\054\uff90\055" +
    "\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90\065\uff90" +
    "\070\uff90\001\002\000\046\003\ufffd\012\uff99\013\uff99\025" +
    "\ufffd\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99" +
    "\036\uff99\037\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045" +
    "\uff99\046\uff99\001\002\000\006\020\uffad\023\uffad\001\002" +
    "\000\004\013\333\001\002\000\066\003\uff92\005\uff92\011" +
    "\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92\030\uff92" +
    "\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\040\uff92\052" +
    "\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92\060\uff92" +
    "\061\uff92\062\uff92\065\uff92\070\uff92\001\002\000\004\010" +
    "\330\001\002\000\004\011\316\001\002\000\006\020\uffa4" +
    "\023\uffa4\001\002\000\006\006\311\010\uffaf\001\002\000" +
    "\004\006\306\001\002\000\074\003\uffdc\005\uffdc\011\uffdc" +
    "\014\uffdc\015\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\040\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056" +
    "\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\065\uffdc\070\uffdc" +
    "\001\002\000\066\003\uff91\005\uff91\011\uff91\020\uff91\021" +
    "\uff91\022\uff91\023\uff91\024\uff91\030\uff91\031\uff91\032\uff91" +
    "\033\uff91\034\uff91\035\uff91\040\uff91\052\uff91\053\uff91\054" +
    "\uff91\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91" +
    "\065\uff91\070\uff91\001\002\000\074\003\uffd8\005\uffd8\011" +
    "\uffd8\014\uffd8\015\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\040\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8" +
    "\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\065\uffd8\070" +
    "\uffd8\001\002\000\006\020\uffae\023\uffae\001\002\000\004" +
    "\011\300\001\002\000\026\003\276\014\106\015\071\020" +
    "\012\021\016\022\021\023\020\024\013\025\041\062\133" +
    "\001\002\000\006\012\uff9c\013\uff9c\001\002\000\010\013" +
    "\270\020\140\023\141\001\002\000\066\003\uff95\005\uff95" +
    "\011\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95\030" +
    "\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95\040\uff95" +
    "\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060" +
    "\uff95\061\uff95\062\uff95\065\uff95\070\uff95\001\002\000\030" +
    "\003\uffd7\013\uffef\014\uffd7\015\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\062\uffd7\001\002\000\016" +
    "\041\144\042\152\043\147\044\146\045\150\046\151\001" +
    "\002\000\074\003\uffda\005\uffda\011\uffda\014\uffda\015\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\040\uffda" +
    "\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060" +
    "\uffda\061\uffda\062\uffda\065\uffda\070\uffda\001\002\000\006" +
    "\020\uffaa\023\uffaa\001\002\000\042\012\uffa0\013\uffa0\030" +
    "\046\031\033\032\103\033\111\034\057\035\066\036\262" +
    "\037\263\041\144\042\152\043\147\044\146\045\150\046" +
    "\151\001\002\000\066\003\uff94\005\uff94\011\uff94\020\uff94" +
    "\021\uff94\022\uff94\023\uff94\024\uff94\030\uff94\031\uff94\032" +
    "\uff94\033\uff94\034\uff94\035\uff94\040\uff94\052\uff94\053\uff94" +
    "\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062" +
    "\uff94\065\uff94\070\uff94\001\002\000\004\013\256\001\002" +
    "\000\066\003\uff93\005\uff93\011\uff93\020\uff93\021\uff93\022" +
    "\uff93\023\uff93\024\uff93\030\uff93\031\uff93\032\uff93\033\uff93" +
    "\034\uff93\035\uff93\040\uff93\052\uff93\053\uff93\054\uff93\055" +
    "\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062\uff93\065\uff93" +
    "\070\uff93\001\002\000\042\003\uff9b\011\uff9b\020\uff9b\021" +
    "\uff9b\022\uff9b\023\uff9b\024\uff9b\030\uff9b\031\uff9b\032\uff9b" +
    "\033\uff9b\034\uff9b\035\uff9b\040\uff9b\065\uff9b\070\uff9b\001" +
    "\002\000\004\011\231\001\002\000\006\020\uffa9\023\uffa9" +
    "\001\002\000\074\003\uffdb\005\uffdb\011\uffdb\014\uffdb\015" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\040" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\062\uffdb\065\uffdb\070\uffdb\001\002\000" +
    "\004\010\226\001\002\000\004\011\223\001\002\000\004" +
    "\011\165\001\002\000\004\025\160\001\002\000\022\010" +
    "\153\013\143\041\144\042\152\043\147\044\146\045\150" +
    "\046\151\001\002\000\046\003\ufffa\012\uff98\013\uff98\025" +
    "\ufffa\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98" +
    "\036\uff98\037\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\046\uff98\001\002\000\026\003\uffde\014\uffde\015\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\062" +
    "\uffde\001\002\000\006\012\uff9d\013\uff9d\001\002\000\074" +
    "\003\uffd9\005\uffd9\011\uffd9\014\uffd9\015\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\035\uffd9\040\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9" +
    "\062\uffd9\065\uffd9\070\uffd9\001\002\000\006\020\140\023" +
    "\141\001\002\000\006\012\uffa1\013\uffa1\001\002\000\006" +
    "\020\uffac\023\uffac\001\002\000\004\062\133\001\002\000" +
    "\006\003\131\025\132\001\002\000\004\011\115\001\002" +
    "\000\004\006\112\001\002\000\006\012\uff9e\013\uff9e\001" +
    "\002\000\006\020\uffab\023\uffab\001\002\000\004\007\uffc3" +
    "\001\002\000\004\007\114\001\002\000\004\025\uffc2\001" +
    "\002\000\020\025\126\026\120\027\123\065\125\066\122" +
    "\067\117\070\116\001\002\000\100\003\ufff5\005\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\023\ufff5\024\ufff5\025\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\033\ufff5\034\ufff5\035\ufff5\040\ufff5\052\ufff5\053\ufff5" +
    "\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062" +
    "\ufff5\065\ufff5\070\ufff5\001\002\000\100\003\ufff6\005\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\020\ufff6\021" +
    "\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\035\ufff6\040\ufff6\052\ufff6\053" +
    "\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6" +
    "\062\ufff6\065\ufff6\070\ufff6\001\002\000\100\003\ufff4\005" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\040\ufff4\052\ufff4" +
    "\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061" +
    "\ufff4\062\ufff4\065\ufff4\070\ufff4\001\002\000\004\012\130" +
    "\001\002\000\100\003\ufff7\005\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\040\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7" +
    "\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\065\ufff7\070" +
    "\ufff7\001\002\000\100\003\ufff3\005\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\020\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\035\ufff3\040\ufff3\052\ufff3\053\ufff3\054\ufff3\055" +
    "\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\065\ufff3" +
    "\070\ufff3\001\002\000\004\012\127\001\002\000\100\003" +
    "\ufff8\005\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\030" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\040\ufff8" +
    "\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060" +
    "\ufff8\061\ufff8\062\ufff8\065\ufff8\070\ufff8\001\002\000\006" +
    "\012\uffaf\013\uffaf\001\002\000\074\003\uff7f\005\uff7f\011" +
    "\uff7f\014\uff7f\015\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f" +
    "\024\uff7f\025\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034" +
    "\uff7f\035\uff7f\040\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f" +
    "\056\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f\065\uff7f\070" +
    "\uff7f\001\002\000\074\003\uff7e\005\uff7e\011\uff7e\014\uff7e" +
    "\015\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025" +
    "\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e" +
    "\040\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057" +
    "\uff7e\060\uff7e\061\uff7e\062\uff7e\065\uff7e\070\uff7e\001\002" +
    "\000\034\005\uffea\010\uffea\012\uffea\013\uffea\017\uffea\041" +
    "\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea" +
    "\050\uffea\001\002\000\034\005\uffeb\010\uffeb\012\uffeb\013" +
    "\uffeb\017\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\001\002\000\016\026\120\027" +
    "\123\065\125\066\122\067\117\070\116\001\002\000\004" +
    "\005\135\001\002\000\016\002\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\001\002\000\004\013\137\001\002" +
    "\000\004\005\uffcf\001\002\000\012\012\uff99\013\uff99\063" +
    "\uff99\064\uff99\001\002\000\012\012\uff98\013\uff98\063\uff98" +
    "\064\uff98\001\002\000\006\012\uff9f\013\uff9f\001\002\000" +
    "\074\003\uffe0\005\uffe0\011\uffe0\014\uffe0\015\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\040\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061" +
    "\uffe0\062\uffe0\065\uffe0\070\uffe0\001\002\000\026\004\uffe9" +
    "\020\uffe9\023\uffe9\025\uffe9\026\uffe9\027\uffe9\065\uffe9\066" +
    "\uffe9\067\uffe9\070\uffe9\001\002\000\020\025\126\026\120" +
    "\027\123\065\125\066\122\067\117\070\116\001\002\000" +
    "\026\004\uffe6\020\uffe6\023\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\065\uffe6\066\uffe6\067\uffe6\070\uffe6\001\002\000\026\004" +
    "\uffe7\020\uffe7\023\uffe7\025\uffe7\026\uffe7\027\uffe7\065\uffe7" +
    "\066\uffe7\067\uffe7\070\uffe7\001\002\000\026\004\uffe5\020" +
    "\uffe5\023\uffe5\025\uffe5\026\uffe5\027\uffe5\065\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\001\002\000\026\004\uffe4\020\uffe4\023" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\065\uffe4\066\uffe4\067\uffe4" +
    "\070\uffe4\001\002\000\026\004\uffe8\020\uffe8\023\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8" +
    "\001\002\000\016\026\120\027\123\065\125\066\122\067" +
    "\117\070\116\001\002\000\004\013\155\001\002\000\074" +
    "\003\uffdf\005\uffdf\011\uffdf\014\uffdf\015\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\040\uffdf\052\uffdf\053" +
    "\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf" +
    "\062\uffdf\065\uffdf\070\uffdf\001\002\000\006\012\uffb5\013" +
    "\uffb5\001\002\000\006\012\ufff0\013\ufff0\001\002\000\004" +
    "\006\uffc1\001\002\000\004\006\162\001\002\000\004\025" +
    "\163\001\002\000\004\007\164\001\002\000\022\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\001\002\000\024\003\170\020\012\021\016\022\021" +
    "\023\020\024\013\051\173\065\107\070\042\001\002\000" +
    "\004\012\217\001\002\000\006\047\174\050\175\001\002" +
    "\000\004\012\uffec\001\002\000\016\026\120\027\123\065" +
    "\125\066\122\067\117\070\116\001\002\000\006\047\174" +
    "\050\175\001\002\000\016\026\uffe1\027\uffe1\065\uffe1\066" +
    "\uffe1\067\uffe1\070\uffe1\001\002\000\024\004\uffe3\012\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\065\uffe3\066\uffe3\067\uffe3\070" +
    "\uffe3\001\002\000\024\004\uffe2\012\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\001\002\000" +
    "\004\004\201\001\002\000\010\004\uffbb\012\uffbb\013\uffbb" +
    "\001\002\000\006\004\201\012\uffc6\001\002\000\016\005" +
    "\205\020\012\021\016\022\021\023\020\024\013\001\002" +
    "\000\010\004\uffbd\012\uffbd\013\uffbd\001\002\000\006\005" +
    "\uffb8\017\uffb8\001\002\000\006\005\207\017\206\001\002" +
    "\000\010\004\uffba\012\uffba\013\uffba\001\002\000\014\020" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\001\002\000\010" +
    "\004\uffb9\012\uffb9\013\uffb9\001\002\000\014\020\012\021" +
    "\016\022\021\023\020\024\013\001\002\000\006\005\uffb6" +
    "\017\uffb6\001\002\000\010\004\uffbc\012\uffbc\013\uffbc\001" +
    "\002\000\004\012\uffed\001\002\000\020\025\126\026\120" +
    "\027\123\065\125\066\122\067\117\070\116\001\002\000" +
    "\004\012\uffb4\001\002\000\004\012\uffee\001\002\000\056" +
    "\003\220\011\064\020\032\021\016\022\021\023\075\024" +
    "\013\030\046\031\033\032\103\033\111\034\057\035\066" +
    "\040\040\052\047\054\072\055\037\056\065\061\062\062" +
    "\052\065\107\070\042\001\002\000\006\012\uffef\013\uffef" +
    "\001\002\000\016\041\144\042\152\043\147\044\146\045" +
    "\150\046\151\001\002\000\066\003\uff8b\005\uff8b\011\uff8b" +
    "\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\030\uff8b\031" +
    "\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\040\uff8b\052\uff8b" +
    "\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061" +
    "\uff8b\062\uff8b\065\uff8b\070\uff8b\001\002\000\006\020\140" +
    "\023\141\001\002\000\004\012\225\001\002\000\074\003" +
    "\uff7d\005\uff7d\011\uff7d\014\uff7d\015\uff7d\020\uff7d\021\uff7d" +
    "\022\uff7d\023\uff7d\024\uff7d\025\uff7d\030\uff7d\031\uff7d\032" +
    "\uff7d\033\uff7d\034\uff7d\035\uff7d\040\uff7d\052\uff7d\053\uff7d" +
    "\054\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d\061\uff7d\062" +
    "\uff7d\065\uff7d\070\uff7d\001\002\000\016\026\uffb3\027\uffb3" +
    "\065\uffb3\066\uffb3\067\uffb3\070\uffb3\001\002\000\016\026" +
    "\120\027\123\065\125\066\122\067\117\070\116\001\002" +
    "\000\074\003\uffb2\005\uffb2\011\uffb2\014\uffb2\015\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\040\uffb2\052" +
    "\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\061\uffb2\062\uffb2\065\uffb2\070\uffb2\001\002\000\004\025" +
    "\126\001\002\000\004\012\233\001\002\000\004\004\uff88" +
    "\001\002\000\004\004\235\001\002\000\006\057\237\060" +
    "\236\001\002\000\004\063\251\001\002\000\006\020\140" +
    "\023\141\001\002\000\010\005\uff86\057\uff86\060\uff86\001" +
    "\002\000\010\005\242\057\237\060\236\001\002\000\066" +
    "\003\uff87\005\uff87\011\uff87\020\uff87\021\uff87\022\uff87\023" +
    "\uff87\024\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87" +
    "\035\uff87\040\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056" +
    "\uff87\057\uff87\060\uff87\061\uff87\062\uff87\065\uff87\070\uff87" +
    "\001\002\000\010\005\uff85\057\uff85\060\uff85\001\002\000" +
    "\004\063\245\001\002\000\056\003\220\011\064\020\032" +
    "\021\016\022\021\023\075\024\013\030\046\031\033\032" +
    "\103\033\111\034\057\035\066\040\040\052\047\054\072" +
    "\055\037\056\065\061\062\062\052\065\107\070\042\001" +
    "\002\000\064\003\220\005\uff84\011\064\020\032\021\016" +
    "\022\021\023\075\024\013\030\046\031\033\032\103\033" +
    "\111\034\057\035\066\040\040\052\047\054\072\055\037" +
    "\056\065\057\uff84\060\uff84\061\062\062\052\065\107\070" +
    "\042\001\002\000\064\003\uff97\005\uff97\011\uff97\020\uff97" +
    "\021\uff97\022\uff97\023\uff97\024\uff97\030\uff97\031\uff97\032" +
    "\uff97\033\uff97\034\uff97\035\uff97\040\uff97\052\uff97\054\uff97" +
    "\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97\065" +
    "\uff97\070\uff97\001\002\000\064\003\uff96\005\uff96\011\uff96" +
    "\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\030\uff96\031" +
    "\uff96\032\uff96\033\uff96\034\uff96\035\uff96\040\uff96\052\uff96" +
    "\054\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96\062" +
    "\uff96\065\uff96\070\uff96\001\002\000\056\003\220\011\064" +
    "\020\032\021\016\022\021\023\075\024\013\030\046\031" +
    "\033\032\103\033\111\034\057\035\066\040\040\052\047" +
    "\054\072\055\037\056\065\061\062\062\052\065\107\070" +
    "\042\001\002\000\064\003\220\005\uff83\011\064\020\032" +
    "\021\016\022\021\023\075\024\013\030\046\031\033\032" +
    "\103\033\111\034\057\035\066\040\040\052\047\054\072" +
    "\055\037\056\065\057\uff83\060\uff83\061\062\062\052\065" +
    "\107\070\042\001\002\000\042\003\220\011\064\020\032" +
    "\021\016\022\021\023\075\024\013\030\046\031\033\032" +
    "\103\033\111\034\057\035\066\040\040\065\107\070\042" +
    "\001\002\000\004\012\255\001\002\000\006\012\uff9a\013" +
    "\uff9a\001\002\000\066\003\uff80\005\uff80\011\uff80\020\uff80" +
    "\021\uff80\022\uff80\023\uff80\024\uff80\030\uff80\031\uff80\032" +
    "\uff80\033\uff80\034\uff80\035\uff80\040\uff80\052\uff80\053\uff80" +
    "\054\uff80\055\uff80\056\uff80\057\uff80\060\uff80\061\uff80\062" +
    "\uff80\065\uff80\070\uff80\001\002\000\006\020\140\023\141" +
    "\001\002\000\006\012\uffa5\013\uffa5\001\002\000\006\020" +
    "\140\023\141\001\002\000\006\012\uffa7\013\uffa7\001\002" +
    "\000\006\012\uffa6\013\uffa6\001\002\000\006\012\uffa8\013" +
    "\uffa8\001\002\000\006\012\uffa2\013\uffa2\001\002\000\004" +
    "\004\201\001\002\000\010\004\201\012\uffc7\013\uffc7\001" +
    "\002\000\066\003\uff81\005\uff81\011\uff81\020\uff81\021\uff81" +
    "\022\uff81\023\uff81\024\uff81\030\uff81\031\uff81\032\uff81\033" +
    "\uff81\034\uff81\035\uff81\040\uff81\052\uff81\053\uff81\054\uff81" +
    "\055\uff81\056\uff81\057\uff81\060\uff81\061\uff81\062\uff81\065" +
    "\uff81\070\uff81\001\002\000\004\013\272\001\002\000\066" +
    "\003\uff82\005\uff82\011\uff82\020\uff82\021\uff82\022\uff82\023" +
    "\uff82\024\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82" +
    "\035\uff82\040\uff82\052\uff82\053\uff82\054\uff82\055\uff82\056" +
    "\uff82\057\uff82\060\uff82\061\uff82\062\uff82\065\uff82\070\uff82" +
    "\001\002\000\006\010\153\013\143\001\002\000\004\005" +
    "\277\001\002\000\026\003\uffdd\014\uffdd\015\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\062\uffdd\001" +
    "\002\000\074\003\uffd7\005\uffd7\011\uffd7\014\uffd7\015\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\040\uffd7" +
    "\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\065\uffd7\070\uffd7\001\002\000\016" +
    "\002\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\001" +
    "\002\000\006\047\174\050\175\001\002\000\004\012\302" +
    "\001\002\000\056\003\220\011\064\020\032\021\016\022" +
    "\021\023\075\024\013\030\046\031\033\032\103\033\111" +
    "\034\057\035\066\040\040\052\047\054\072\055\037\056" +
    "\065\061\062\062\052\065\107\070\042\001\002\000\066" +
    "\003\uff8e\005\uff8e\011\uff8e\020\uff8e\021\uff8e\022\uff8e\023" +
    "\uff8e\024\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e" +
    "\035\uff8e\040\uff8e\052\uff8e\053\304\054\uff8e\055\uff8e\056" +
    "\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\065\uff8e\070\uff8e" +
    "\001\002\000\056\003\220\011\064\020\032\021\016\022" +
    "\021\023\075\024\013\030\046\031\033\032\103\033\111" +
    "\034\057\035\066\040\040\052\047\054\072\055\037\056" +
    "\065\061\062\062\052\065\107\070\042\001\002\000\066" +
    "\003\uff8d\005\uff8d\011\uff8d\020\uff8d\021\uff8d\022\uff8d\023" +
    "\uff8d\024\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d" +
    "\035\uff8d\040\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056" +
    "\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\065\uff8d\070\uff8d" +
    "\001\002\000\004\007\uffc5\001\002\000\004\007\310\001" +
    "\002\000\004\025\uffc4\001\002\000\004\007\uffbf\001\002" +
    "\000\004\007\313\001\002\000\004\010\uffbe\001\002\000" +
    "\006\020\140\023\141\001\002\000\006\012\uffa3\013\uffa3" +
    "\001\002\000\004\025\317\001\002\000\004\063\320\001" +
    "\002\000\006\020\140\023\141\001\002\000\004\012\326" +
    "\001\002\000\004\064\323\001\002\000\006\020\140\023" +
    "\141\001\002\000\006\012\uff8a\064\325\001\002\000\004" +
    "\012\uff89\001\002\000\024\003\276\014\106\015\071\020" +
    "\012\021\016\022\021\023\020\024\013\025\041\001\002" +
    "\000\066\003\uff8c\005\uff8c\011\uff8c\020\uff8c\021\uff8c\022" +
    "\uff8c\023\uff8c\024\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c" +
    "\034\uff8c\035\uff8c\040\uff8c\052\uff8c\053\uff8c\054\uff8c\055" +
    "\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\065\uff8c" +
    "\070\uff8c\001\002\000\016\026\uffb1\027\uffb1\065\uffb1\066" +
    "\uffb1\067\uffb1\070\uffb1\001\002\000\016\026\120\027\123" +
    "\065\125\066\122\067\117\070\116\001\002\000\074\003" +
    "\uffb0\005\uffb0\011\uffb0\014\uffb0\015\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\040\uffb0\052\uffb0\053\uffb0" +
    "\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062" +
    "\uffb0\065\uffb0\070\uffb0\001\002\000\066\003\uff8f\005\uff8f" +
    "\011\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\030" +
    "\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\040\uff8f" +
    "\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060" +
    "\uff8f\061\uff8f\062\uff8f\065\uff8f\070\uff8f\001\002\000\014" +
    "\020\012\021\016\022\021\023\020\024\013\001\002\000" +
    "\004\012\336\001\002\000\004\004\uffcd\001\002\000\006" +
    "\012\342\017\341\001\002\000\006\012\uffca\017\uffca\001" +
    "\002\000\014\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\001\002\000\004\004\uffcb\001\002\000\014\020\012\021" +
    "\016\022\021\023\020\024\013\001\002\000\006\012\uffc8" +
    "\017\uffc8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\004\002\005\001\001\000\002\001\001\000" +
    "\004\064\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\014\017\016\020\013\060\010\001\001\000" +
    "\004\065\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\014\020\021\060\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\025\001\001\000\006\066\334\067\333\001\001" +
    "\000\004\021\027\001\001\000\070\003\104\004\101\005" +
    "\073\013\066\014\055\015\047\016\075\022\043\025\072" +
    "\026\054\027\035\034\042\035\067\036\100\037\107\041" +
    "\076\042\050\043\033\044\057\046\103\047\052\050\060" +
    "\052\034\055\030\056\077\057\044\062\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\100\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\104\005\272\013\066\014\055\016\274\027" +
    "\035\034\042\035\067\056\077\057\044\063\273\001\001" +
    "\000\002\001\001\000\004\044\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\256\036\260\040" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\072\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\123\035" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\156\035\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\073\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\104\005\166\012\170\025\072\026\171\061" +
    "\165\001\001\000\002\001\001\000\004\011\213\001\001" +
    "\000\002\001\001\000\004\007\212\001\001\000\004\011" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\177\031\201\033\176\001\001\000" +
    "\002\001\001\000\006\031\211\033\176\001\001\000\010" +
    "\003\104\005\202\032\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\075\207\001\001\000\002\001\001\000\006\003\104\005" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\215\035\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\104\004\101\005\220" +
    "\022\043\025\072\026\054\036\100\037\107\041\076\042" +
    "\050\043\033\044\057\046\221\047\052\050\060\052\034" +
    "\055\030\062\062\001\001\000\002\001\001\000\004\006" +
    "\144\001\001\000\002\001\001\000\004\044\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\076\226\001" +
    "\001\000\004\007\227\001\001\000\002\001\001\000\004" +
    "\035\231\001\001\000\002\001\001\000\004\102\233\001" +
    "\001\000\002\001\001\000\006\053\240\054\237\001\001" +
    "\000\002\001\001\000\004\044\243\001\001\000\002\001" +
    "\001\000\004\054\242\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\003\104\004\101\005" +
    "\220\022\043\025\072\026\054\036\100\037\107\041\076" +
    "\042\050\043\033\044\057\045\245\046\246\047\052\050" +
    "\060\052\034\055\030\062\062\001\001\000\046\003\104" +
    "\004\101\005\220\022\043\025\072\026\054\036\100\037" +
    "\107\041\076\042\050\043\033\044\057\046\247\047\052" +
    "\050\060\052\034\055\030\062\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\003\104\004\101\005\220" +
    "\022\043\025\072\026\054\036\100\037\107\041\076\042" +
    "\050\043\033\044\057\045\251\046\246\047\052\050\060" +
    "\052\034\055\030\062\062\001\001\000\046\003\104\004" +
    "\101\005\220\022\043\025\072\026\054\036\100\037\107" +
    "\041\076\042\050\043\033\044\057\046\247\047\052\050" +
    "\060\052\034\055\030\062\062\001\001\000\030\003\104" +
    "\004\101\005\220\025\072\026\054\036\100\037\107\041" +
    "\076\042\050\043\253\044\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\264\001" +
    "\001\000\002\001\001\000\004\044\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\266\031\201\033\176\001\001\000\006" +
    "\031\211\033\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\300\001\001\000\002\001\001\000\046\003\104" +
    "\004\101\005\220\022\043\025\072\026\054\036\100\037" +
    "\107\041\076\042\050\043\033\044\057\046\302\047\052" +
    "\050\060\052\034\055\030\062\062\001\001\000\002\001" +
    "\001\000\046\003\104\004\101\005\220\022\043\025\072" +
    "\026\054\036\100\037\107\041\076\042\050\043\033\044" +
    "\057\046\304\047\052\050\060\052\034\055\030\062\062" +
    "\001\001\000\002\001\001\000\004\071\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\074\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\321\051\320\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\323\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\104\005\272\013\066\014" +
    "\055\016\326\027\035\034\042\035\067\056\077\057\044" +
    "\001\001\000\002\001\001\000\004\077\330\001\001\000" +
    "\004\007\331\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\104\005\337\023\336\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\070\342\001\001\000\002\001\001\000\006\003" +
    "\104\005\343\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    BasicLexerCupV lex;

    @Override
    public void syntax_error(Symbol s) {
        System.err.println("Error sintáctico en línea " + (s.left + 1) +
                           ", columna " + (s.right + 1) + ". Token inesperado: " + s.value);

    }


    @SuppressWarnings("deprecation")
    public parser(BasicLexerCupV lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
        this.currentHash = null;
    }

    // Tabla de símbolos
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<>();
    String currentHash;

    public void imprimirTablaSimbolos() {
        for (String key : listaTablasSimbolos.keySet()) {
            System.out.println("\nTabla de símbolos: " + key);
            System.out.println("+--------+---------+----------------------+------------+");
            System.out.println("| Línea  | Columna | Lexema              | Tipo       |");
            System.out.println("+--------+---------+----------------------+------------+");
            for (String simbolo : listaTablasSimbolos.get(key)) {
                System.out.println(simbolo);
            }
            System.out.println("+--------+---------+----------------------+------------+\n");
        }
    }

    public void agregarTablaSimbolos(String tipoTabla, String nombre) {
        System.out.println("/+++Nueva tabla símbolos función o main+++/ " + nombre);
        ArrayList<String> nuevaTabla = new ArrayList<>();
        currentHash = nombre;
        listaTablasSimbolos.put(currentHash, nuevaTabla);
    }

    public void agregarVariable(int linea, int columna, String lexema, String tipo) {
        System.out.println("PARSER: identificador (agregar o verificar) " + lexema);
        if (currentHash == null) {
            System.err.println("Error: No hay una tabla de símbolos activa");
            return;
        }
        ArrayList<String> tabla = listaTablasSimbolos.get(currentHash);
        if (tabla == null) {
            System.err.println("Error: La tabla de símbolos '" + currentHash + "' no existe");
            return;
        }
        String entrada = String.format("| %-6d | %-7d | %-20s | %-10s |",
                linea + 1, columna + 1, lexema, tipo);
        tabla.add(entrada);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

 
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

       parser.agregarTablaSimbolos("main", "_verano_");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= MAIN NT$0 funciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;
		
             System.err.println("Error en la estructura inicial.");
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos ::= INTEGER 
            {
              Object RESULT =null;
		RESULT="rodolfo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipos ::= STRING 
            {
              Object RESULT =null;
		RESULT="cometa";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipos ::= CHAR 
            {
              Object RESULT =null;
		RESULT="cupido";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipos ::= FLOAT 
            {
              Object RESULT =null;
		RESULT="bromista";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipos ::= BOOL 
            {
              Object RESULT =null;
		RESULT="trueno";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literales ::= L_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "rodolfo");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literales ::= L_STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cometa");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literales ::= L_FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "bromista");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literales ::= L_CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cupido");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literales ::= TRUE 
            {
              Object RESULT =null;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, "true", "trueno");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literales ::= FALSE 
            {
              Object RESULT =null;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, "false", "trueno");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bool ::= TRUE 
            {
              Object RESULT =null;
		RESULT="true";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bool ::= FALSE 
            {
              Object RESULT =null;
		RESULT="false";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresionRelacional ::= asignarTipo operadorRelacional literales 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión relacional: " + op + " " + l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresionRelacional ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Expresión relacional inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresionLogica ::= asignarTipo operadorLogico literales 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión lógica: " + op + " " + l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresionLogica ::= negacion literales 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión lógica con negación: !" + n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresionLogica ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Expresión lógica inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignarTipo ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), t.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarTipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asignarTipo ::= tipos error 
            {
              Object RESULT =null;
		 System.err.println("Error: Falta identificador después del tipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarTipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operadorRelacional ::= MENOR 
            {
              Object RESULT =null;
		RESULT="snowball";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operadorRelacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="evergreen";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operadorRelacional ::= MAYOR 
            {
              Object RESULT =null;
		RESULT="minstix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operadorRelacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="upatree";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operadorRelacional ::= IGUAL 
            {
              Object RESULT =null;
		RESULT="mary";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operadorRelacional ::= DIFERENTE 
            {
              Object RESULT =null;
		RESULT="openslae";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operadorLogico ::= CONJUNCION 
            {
              Object RESULT =null;
		RESULT="melchor";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operadorLogico ::= DISYUNCION 
            {
              Object RESULT =null;
		RESULT="gaspar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // negacion ::= NEGACION 
            {
              Object RESULT =null;
		RESULT="baltazar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // creacion ::= asignarTipo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // creacionAsignacion ::= asignarTipo ASIGNA literales FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= asignaVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= print 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= read 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 parser.agregarTablaSimbolos("funcion", e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // funcion ::= encabezadoFuncion NT$1 parametros bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // encabezadoFuncion ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), t.toString());
        RESULT = id.toString();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bloque ::= corcheteIzquierdo sentencias return_funcion corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bloque ::= corcheteIzquierdo sentenciaEstructura return_funcion corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // return_funcion ::= RETURN literales FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_funcion",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$2 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametros ::= PARENTESISAPERTURA NT$2 PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$3 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametros ::= PARENTESISAPERTURA NT$3 parametroAux PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametroAux ::= asignarTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$4 ::= 
            {
              Object RESULT =null;
 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametroAux ::= parametroAux COMA NT$4 asignarTipo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresionRelacional ::= crearArreglos operadorRelacional arreglos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresionLogica ::= crearArreglos operadorLogico arreglos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$5 ::= 
            {
              Object RESULT =null;
		int cVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Character cVar = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = "abreempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipoArreglo ::= L_CHAR CORCHETEAPERTURA NT$5 CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Character cVar = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = "cierraempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$6 ::= 
            {
              Object RESULT =null;
		int iVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer iVar = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = "abreempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipoArreglo ::= L_INTEGER CORCHETEAPERTURA NT$6 CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer iVar = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = "cierraempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$7 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), t.toString() + "[]");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // crearArreglos ::= tipoArreglo IDENTIFICADOR NT$7 CORCHETEAPERTURA IDENTIFICADOR CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearArreglos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$8 ::= 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = "abreempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // modificarArreglos ::= IDENTIFICADOR CORCHETEAPERTURA NT$8 CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = "cierraempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modificarArreglos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arreglos ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arreglos ::= arreglos arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arreglo ::= parametrosArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametrosArreglo ::= corcheteIzquierdo corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametrosArreglo ::= corcheteIzquierdo parametrosArregloAux corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametrosArregloAux ::= asignarTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArregloAux",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$9 ::= 
            {
              Object RESULT =null;
 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametrosArregloAux ::= parametrosArregloAux COMA NT$9 asignarTipo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArregloAux",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresionRelacional ::= asignarTipo operadorRelacional variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresionLogica ::= asignarTipo operadorLogico variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$10 ::= 
            {
              Object RESULT =null;
RESULT="entrega";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // asignaVariable ::= variable ASIGNA NT$10 literales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$11 ::= 
            {
              Object RESULT =null;
RESULT="entrega";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // asignaVariable ::= modificarArreglos ASIGNA NT$11 literales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // variable ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Variable: " + idVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operandoBinaria ::= SUMA 
            {
              Object RESULT =null;
		RESULT="navidad";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operandoBinaria ::= RESTA 
            {
              Object RESULT =null;
		RESULT="intercambio";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operandoBinaria ::= DIVISION 
            {
              Object RESULT =null;
		RESULT="reyes";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operandoBinaria ::= MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT="nochebuena";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operandoBinaria ::= MODULO 
            {
              Object RESULT =null;
		RESULT="magos";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operandoBinaria ::= POTENCIA 
            {
              Object RESULT =null;
		RESULT="adviento";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresionBinaria ::= expresion operandoBinaria expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operandoUnario ::= INCREMENTO 
            {
              Object RESULT =null;
		RESULT="quien";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operandoUnario ::= DECREMENTO 
            {
              Object RESULT =null;
		RESULT="grinch";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresionUnario ::= expresion operandoUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$12 ::= 
            {
              Object RESULT =null;
RESULT="-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresionUnario ::= NEGATIVO NT$12 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresionRelacionalMat ::= expresion operadorRelacional expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacionalMat",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresiones ::= expresionRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresiones ::= operandoBinaria expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresiones ::= expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresiones ::= expresionUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresiones ::= expresionRelacionalMat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$13 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresiones ::= PARENTESISAPERTURA NT$13 expresiones PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= INTEGER 
            {
              Object RESULT =null;
		RESULT="rodolfo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= FLOAT 
            {
              Object RESULT =null;
		RESULT="bromista";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentencia_lista ::= sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_lista",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentencia_lista ::= sentencia_lista sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_lista",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentenciaEstructura ::= if_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentenciaEstructura ::= for_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentenciaEstructura ::= while_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentenciaEstructura ::= switch_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentenciaEstructura ::= return_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentenciaEstructura ::= break_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentenciaEstructura ::= expresiones FIN_EXPRESION 
            {
              Object RESULT =null;
		RESULT="finregalo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // if_estructura ::= IF PARENTESISAPERTURA operadorLogico PARENTESISCIERRE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // if_estructura ::= IF PARENTESISAPERTURA operadorLogico PARENTESISCIERRE sentenciaEstructura ELSE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // for_estructura ::= FOR PARENTESISAPERTURA IDENTIFICADOR DOS_PUNTOS rango PARENTESISCIERRE sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_estructura",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // while_estructura ::= WHILE PARENTESISAPERTURA expresionLogica PARENTESISCIERRE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_estructura",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // rango ::= expresion PUNTOS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rango",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // rango ::= expresion PUNTOS expresion PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rango",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$14 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "switch_" + symbol.value.toString(), "switch");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // switch_estructura ::= SWITCH PARENTESISAPERTURA variable PARENTESISCIERRE NT$14 corcheteIzquierdo casos_switch corcheteDerecho 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_estructura",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // casos_switch ::= caso_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // casos_switch ::= casos_switch caso_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // caso_switch ::= CASE expresion DOS_PUNTOS sentencia_lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_switch",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // caso_switch ::= DEFAULT DOS_PUNTOS sentencia_lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_switch",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // return_estructura ::= RETURN expresion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // return_estructura ::= RETURN FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // break_estructura ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_estructura",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // print ::= PRINT PARENTESISAPERTURA literales PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // print ::= PRINT PARENTESISAPERTURA variable PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // read ::= READ PARENTESISAPERTURA expresion PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
