
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\224\000\002\002\004\000\002\065\002\000\002\002" +
    "\005\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\062\003\000\002\062\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\010\003\000\002\010\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\003\000\002\057\005\000" +
    "\002\057\004\000\002\057\005\000\002\057\003\000\002" +
    "\005\004\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\011\003\000\002\011\003\000\002\012\003\000" +
    "\002\013\004\000\002\013\003\000\002\014\006\000\002" +
    "\014\006\000\002\014\005\000\002\014\006\000\002\014" +
    "\004\000\002\014\006\000\002\014\006\000\002\015\003" +
    "\000\002\015\004\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\003\000\002\017\004\000\002\066" +
    "\002\000\002\020\006\000\002\056\004\000\002\056\004" +
    "\000\002\056\003\000\002\021\006\000\002\021\006\000" +
    "\002\021\005\000\002\021\006\000\002\021\006\000\002" +
    "\061\005\000\002\061\005\000\002\067\002\000\002\024" +
    "\005\000\002\070\002\000\002\024\006\000\002\024\003" +
    "\000\002\023\004\000\002\023\006\000\002\063\006\000" +
    "\002\063\006\000\002\063\006\000\002\063\006\000\002" +
    "\071\002\000\002\025\010\000\002\072\002\000\002\026" +
    "\007\000\002\027\003\000\002\027\004\000\002\030\003" +
    "\000\002\032\004\000\002\032\005\000\002\031\003\000" +
    "\002\073\002\000\002\031\006\000\002\074\002\000\002" +
    "\033\006\000\002\075\002\000\002\033\007\000\002\033" +
    "\006\000\002\034\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\036\005\000\002\037\003\000\002" +
    "\037\003\000\002\040\004\000\002\076\002\000\002\040" +
    "\005\000\002\041\005\000\002\042\003\000\002\042\003" +
    "\000\002\042\004\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\077\002\000\002\042\006\000\002" +
    "\043\003\000\002\043\003\000\002\044\003\000\002\044" +
    "\004\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\004\000\002\046\007\000\002\046\011\000\002" +
    "\047\015\000\002\060\007\000\002\050\011\000\002\051" +
    "\003\000\002\051\004\000\002\051\003\000\002\052\007" +
    "\000\002\064\006\000\002\022\005\000\002\022\004\000" +
    "\002\053\004\000\002\054\007\000\002\054\007\000\002" +
    "\054\006\000\002\054\004\000\002\054\006\000\002\055" +
    "\007\000\002\055\007\000\002\055\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\006\003\004\016\005\001\002\000\004\002" +
    "\ufffe\001\002\000\020\003\000\020\000\021\000\022\000" +
    "\023\000\024\000\025\000\001\002\000\004\002\007\001" +
    "\002\000\004\002\001\001\002\000\020\003\017\020\012" +
    "\021\016\022\022\023\023\024\013\025\021\001\002\000" +
    "\006\003\uffcb\011\uffcb\001\002\000\004\025\ufffd\001\002" +
    "\000\004\025\ufff9\001\002\000\022\002\uffcd\003\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\001\002" +
    "\000\004\025\026\001\002\000\004\025\ufffc\001\002\000" +
    "\006\003\uffc7\011\uffc7\001\002\000\022\002\uffff\003\017" +
    "\020\012\021\016\022\022\023\023\024\013\025\021\001" +
    "\002\000\004\003\024\001\002\000\004\025\ufffb\001\002" +
    "\000\004\025\ufffa\001\002\000\006\003\uffc8\011\uffc8\001" +
    "\002\000\022\002\uffcc\003\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\001\002\000\006\003\uffc9\011" +
    "\uffc9\001\002\000\006\003\032\011\030\001\002\000\016" +
    "\012\uffbf\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\001" +
    "\002\000\004\004\033\001\002\000\004\004\uffbb\001\002" +
    "\000\066\003\063\004\074\005\057\010\053\011\073\014" +
    "\116\015\100\020\037\021\016\022\022\023\104\024\013" +
    "\025\045\030\052\031\036\032\113\033\120\034\066\035" +
    "\076\040\044\052\055\054\102\055\042\056\075\061\071" +
    "\062\061\001\002\000\022\002\uffca\003\uffca\020\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\001\002\000\060" +
    "\003\uff84\005\uff84\011\uff84\013\uff84\020\uff84\021\uff84\022" +
    "\uff84\023\uff84\024\uff84\030\uff84\031\uff84\032\uff84\033\uff84" +
    "\034\uff84\035\uff84\040\uff84\052\uff84\053\uff84\054\uff84\055" +
    "\uff84\056\uff84\061\uff84\062\uff84\001\002\000\006\020\uffa1" +
    "\023\uffa1\001\002\000\044\012\uff8d\013\uff8d\025\ufffd\030" +
    "\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d" +
    "\037\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046" +
    "\uff8d\001\002\000\004\013\u010d\001\002\000\060\003\uff86" +
    "\005\uff86\011\uff86\013\uff86\020\uff86\021\uff86\022\uff86\023" +
    "\uff86\024\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86" +
    "\035\uff86\040\uff86\052\uff86\053\uff86\054\uff86\055\uff86\056" +
    "\uff86\061\uff86\062\uff86\001\002\000\004\011\u0101\001\002" +
    "\000\020\010\373\041\170\042\177\043\173\044\172\045" +
    "\174\046\176\001\002\000\006\020\uff98\023\uff98\001\002" +
    "\000\006\006\364\010\uffa3\001\002\000\034\003\uffd2\004" +
    "\uffd2\005\uffd2\010\uffd2\014\uffd2\015\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\062\uffd2\001\002\000" +
    "\024\004\uffae\010\uffae\013\uffae\041\uffae\042\uffae\043\uffae" +
    "\044\uffae\045\uffae\046\uffae\001\002\000\060\003\uff85\005" +
    "\uff85\011\uff85\013\uff85\020\uff85\021\uff85\022\uff85\023\uff85" +
    "\024\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035" +
    "\uff85\040\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85" +
    "\061\uff85\062\uff85\001\002\000\034\003\uffce\004\uffce\005" +
    "\uffce\010\uffce\014\uffce\015\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\062\uffce\001\002\000\006\020" +
    "\uffa2\023\uffa2\001\002\000\016\026\133\027\136\064\140" +
    "\065\135\066\132\067\130\001\002\000\022\004\074\010" +
    "\354\041\170\042\177\043\173\044\172\045\174\046\176" +
    "\001\002\000\004\011\345\001\002\000\034\003\341\004" +
    "\074\005\342\010\053\014\116\015\100\020\012\021\016" +
    "\022\022\023\023\024\013\025\045\062\146\001\002\000" +
    "\004\003\335\001\002\000\006\012\uff90\013\uff90\001\002" +
    "\000\010\013\332\020\164\023\165\001\002\000\060\003" +
    "\uff89\005\uff89\011\uff89\013\uff89\020\uff89\021\uff89\022\uff89" +
    "\023\uff89\024\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034" +
    "\uff89\035\uff89\040\uff89\052\uff89\053\uff89\054\uff89\055\uff89" +
    "\056\uff89\061\uff89\062\uff89\001\002\000\036\003\uffdd\004" +
    "\uffdd\005\uffdd\010\uffdd\013\uffed\014\uffdd\015\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\062\uffdd\001" +
    "\002\000\020\010\324\041\170\042\177\043\173\044\172" +
    "\045\174\046\176\001\002\000\034\003\uffd0\004\uffd0\005" +
    "\uffd0\010\uffd0\014\uffd0\015\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\062\uffd0\001\002\000\006\020" +
    "\uff9e\023\uff9e\001\002\000\042\012\uff94\013\uff94\030\052" +
    "\031\036\032\113\033\120\034\066\035\076\036\317\037" +
    "\320\041\170\042\177\043\173\044\172\045\174\046\176" +
    "\001\002\000\060\003\uff88\005\uff88\011\uff88\013\uff88\020" +
    "\uff88\021\uff88\022\uff88\023\uff88\024\uff88\030\uff88\031\uff88" +
    "\032\uff88\033\uff88\034\uff88\035\uff88\040\uff88\052\uff88\053" +
    "\uff88\054\uff88\055\uff88\056\uff88\061\uff88\062\uff88\001\002" +
    "\000\004\013\313\001\002\000\060\003\uff87\005\uff87\011" +
    "\uff87\013\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87" +
    "\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035\uff87\040" +
    "\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87\061\uff87" +
    "\062\uff87\001\002\000\036\003\uff8f\011\uff8f\020\uff8f\021" +
    "\uff8f\022\uff8f\023\uff8f\024\uff8f\030\uff8f\031\uff8f\032\uff8f" +
    "\033\uff8f\034\uff8f\035\uff8f\040\uff8f\001\002\000\010\005" +
    "\301\064\277\067\303\001\002\000\004\011\253\001\002" +
    "\000\006\020\uff9d\023\uff9d\001\002\000\034\003\uffd1\004" +
    "\uffd1\005\uffd1\010\uffd1\014\uffd1\015\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\062\uffd1\001\002\000" +
    "\004\011\242\001\002\000\004\010\237\001\002\000\004" +
    "\011\227\001\002\000\024\003\175\010\200\013\167\041" +
    "\170\042\177\043\173\044\172\045\174\046\176\001\002" +
    "\000\044\012\uff8c\013\uff8c\025\ufffa\030\uff8c\031\uff8c\032" +
    "\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\001\002\000" +
    "\034\003\uffd5\004\uffd5\005\uffd5\010\uffd5\014\uffd5\015\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\062" +
    "\uffd5\001\002\000\006\012\uff91\013\uff91\001\002\000\034" +
    "\003\uffcf\004\uffcf\005\uffcf\010\uffcf\014\uffcf\015\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\062\uffcf" +
    "\001\002\000\034\003\uffd3\004\uffd3\005\uffd3\010\uffd3\014" +
    "\uffd3\015\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\062\uffd3\001\002\000\006\020\164\023\165\001" +
    "\002\000\006\012\uff95\013\uff95\001\002\000\006\020\uffa0" +
    "\023\uffa0\001\002\000\004\025\157\001\002\000\006\005" +
    "\150\062\146\001\002\000\010\003\123\011\122\025\125" +
    "\001\002\000\006\012\uff92\013\uff92\001\002\000\006\020" +
    "\uff9f\023\uff9f\001\002\000\024\004\uffb0\010\uffb0\013\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\001" +
    "\002\000\020\025\125\026\133\027\136\064\140\065\135" +
    "\066\132\067\130\001\002\000\034\003\uff72\004\uff72\005" +
    "\uff72\010\uff72\014\uff72\015\uff72\020\uff72\021\uff72\022\uff72" +
    "\023\uff72\024\uff72\025\uff72\062\uff72\001\002\000\004\012" +
    "\126\001\002\000\042\003\uffa3\004\uffa3\005\uffa3\010\uffa3" +
    "\012\uffa3\013\uffa3\014\uffa3\015\uffa3\017\uffa3\020\uffa3\021" +
    "\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\062\uffa3\001\002" +
    "\000\004\003\127\001\002\000\034\003\uff71\004\uff71\005" +
    "\uff71\010\uff71\014\uff71\015\uff71\020\uff71\021\uff71\022\uff71" +
    "\023\uff71\024\uff71\025\uff71\062\uff71\001\002\000\042\003" +
    "\ufff3\004\ufff3\005\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\062\ufff3\001\002\000\042\003\ufff2\004\ufff2" +
    "\005\ufff2\010\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\062\ufff2\001\002\000\042\003\ufff4\004\ufff4\005\ufff4\010" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\062\ufff4\001" +
    "\002\000\042\003\ufff1\004\ufff1\005\ufff1\010\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\017\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\023\ufff1\024\ufff1\025\ufff1\062\ufff1\001\002\000\006" +
    "\003\143\012\144\001\002\000\042\003\ufff5\004\ufff5\005" +
    "\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\062" +
    "\ufff5\001\002\000\042\003\ufff0\004\ufff0\005\ufff0\010\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\062\ufff0\001\002" +
    "\000\004\012\141\001\002\000\042\003\ufff6\004\ufff6\005" +
    "\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\062" +
    "\ufff6\001\002\000\004\013\142\001\002\000\034\003\uff75" +
    "\004\uff75\005\uff75\010\uff75\014\uff75\015\uff75\020\uff75\021" +
    "\uff75\022\uff75\023\uff75\024\uff75\025\uff75\062\uff75\001\002" +
    "\000\034\003\uff73\004\uff73\005\uff73\010\uff73\014\uff73\015" +
    "\uff73\020\uff73\021\uff73\022\uff73\023\uff73\024\uff73\025\uff73" +
    "\062\uff73\001\002\000\004\013\145\001\002\000\034\003" +
    "\uff74\004\uff74\005\uff74\010\uff74\014\uff74\015\uff74\020\uff74" +
    "\021\uff74\022\uff74\023\uff74\024\uff74\025\uff74\062\uff74\001" +
    "\002\000\020\025\125\026\133\027\136\064\140\065\135" +
    "\066\132\067\130\001\002\000\004\005\152\001\002\000" +
    "\004\003\151\001\002\000\022\002\uffc2\003\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\001\002\000" +
    "\022\002\uffc5\003\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\001\002\000\004\013\156\001\002\000" +
    "\004\013\155\001\002\000\004\005\uffc1\001\002\000\004" +
    "\005\uffc0\001\002\000\026\003\uffe8\006\uffb4\010\uffe8\013" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8" +
    "\001\002\000\004\006\161\001\002\000\004\025\162\001" +
    "\002\000\004\007\163\001\002\000\020\010\uffb3\041\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\001\002\000" +
    "\014\012\uff8d\013\uff8d\036\uff8d\037\uff8d\063\uff8d\001\002" +
    "\000\014\012\uff8c\013\uff8c\036\uff8c\037\uff8c\063\uff8c\001" +
    "\002\000\006\012\uff93\013\uff93\001\002\000\034\003\uffde" +
    "\004\uffde\005\uffde\010\uffde\014\uffde\015\uffde\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\062\uffde\001\002" +
    "\000\026\004\uffe7\020\uffe7\023\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\001\002\000\020" +
    "\025\125\026\133\027\136\064\140\065\135\066\132\067" +
    "\130\001\002\000\026\004\uffe4\020\uffe4\023\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\001" +
    "\002\000\026\004\uffe5\020\uffe5\023\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\001\002\000" +
    "\026\004\uffe3\020\uffe3\023\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\064\uffe3\065\uffe3\066\uffe3\067\uffe3\001\002\000\036\003" +
    "\uffd8\004\uffd8\005\uffd8\010\uffd8\014\uffd8\015\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\062" +
    "\uffd8\001\002\000\026\004\uffe2\020\uffe2\023\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\001" +
    "\002\000\026\004\uffe6\020\uffe6\023\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\001\002\000" +
    "\056\003\210\011\073\020\037\021\016\022\022\023\104" +
    "\024\013\025\211\026\133\027\136\030\052\031\036\032" +
    "\113\033\120\034\066\035\076\040\044\051\205\064\140" +
    "\065\135\066\132\067\130\001\002\000\004\013\224\001" +
    "\002\000\036\003\uffda\004\uffda\005\uffda\010\uffda\014\uffda" +
    "\015\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\062\uffda\001\002\000\022\041\170\042\177" +
    "\043\173\044\172\045\174\046\176\047\221\050\220\001" +
    "\002\000\006\003\215\013\216\001\002\000\016\026\uffdf" +
    "\027\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\001\002\000" +
    "\004\025\214\001\002\000\016\026\133\027\136\064\140" +
    "\065\135\066\132\067\130\001\002\000\040\003\uffe9\004" +
    "\uffe9\005\uffe9\010\uffe9\013\uffed\014\uffe9\015\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\062" +
    "\uffe9\001\002\000\004\013\212\001\002\000\036\003\uffd9" +
    "\004\uffd9\005\uffd9\010\uffd9\014\uffd9\015\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\062\uffd9" +
    "\001\002\000\040\003\uffeb\004\uffeb\005\uffeb\010\uffeb\012" +
    "\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\062\uffeb\001\002\000\026\003" +
    "\uffe8\010\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8" +
    "\046\uffe8\047\uffe8\050\uffe8\001\002\000\036\003\uffd6\004" +
    "\uffd6\005\uffd6\010\uffd6\014\uffd6\015\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\062\uffd6\001" +
    "\002\000\036\003\uffdc\004\uffdc\005\uffdc\010\uffdc\014\uffdc" +
    "\015\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\062\uffdc\001\002\000\020\025\125\026\133" +
    "\027\136\064\140\065\135\066\132\067\130\001\002\000" +
    "\020\025\uffe0\026\uffe0\027\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\067\uffe0\001\002\000\020\025\uffe1\026\uffe1\027\uffe1\064" +
    "\uffe1\065\uffe1\066\uffe1\067\uffe1\001\002\000\040\003\uffea" +
    "\004\uffea\005\uffea\010\uffea\012\uffea\014\uffea\015\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\062\uffea\001\002\000\040\003\uffec\004\uffec\005\uffec\010" +
    "\uffec\012\uffec\014\uffec\015\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\062\uffec\001\002\000" +
    "\036\003\uffdb\004\uffdb\005\uffdb\010\uffdb\014\uffdb\015\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\062\uffdb\001\002\000\006\012\uffee\013\uffee\001\002" +
    "\000\006\012\uffef\013\uffef\001\002\000\020\003\232\020" +
    "\012\021\016\022\022\023\023\024\013\051\205\001\002" +
    "\000\004\012\233\001\002\000\006\047\221\050\220\001" +
    "\002\000\006\012\uffe9\017\uffe9\001\002\000\052\003\234" +
    "\011\073\020\037\021\016\022\022\023\104\024\013\030" +
    "\052\031\036\032\113\033\120\034\066\035\076\040\044" +
    "\052\055\054\102\055\042\056\075\061\071\062\061\001" +
    "\002\000\006\012\uffed\013\uffed\001\002\000\016\041\170" +
    "\042\177\043\173\044\172\045\174\046\176\001\002\000" +
    "\060\003\uff7f\005\uff7f\011\uff7f\013\uff7f\020\uff7f\021\uff7f" +
    "\022\uff7f\023\uff7f\024\uff7f\030\uff7f\031\uff7f\032\uff7f\033" +
    "\uff7f\034\uff7f\035\uff7f\040\uff7f\052\uff7f\053\uff7f\054\uff7f" +
    "\055\uff7f\056\uff7f\061\uff7f\062\uff7f\001\002\000\016\026" +
    "\uffa8\027\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\001\002" +
    "\000\016\026\133\027\136\064\140\065\135\066\132\067" +
    "\130\001\002\000\034\003\uffa7\004\uffa7\005\uffa7\010\uffa7" +
    "\014\uffa7\015\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\062\uffa7\001\002\000\012\012\244\020\164" +
    "\023\165\025\125\001\002\000\004\012\251\001\002\000" +
    "\004\003\250\001\002\000\004\012\246\001\002\000\004" +
    "\013\247\001\002\000\034\003\uff70\004\uff70\005\uff70\010" +
    "\uff70\014\uff70\015\uff70\020\uff70\021\uff70\022\uff70\023\uff70" +
    "\024\uff70\025\uff70\062\uff70\001\002\000\034\003\uff6e\004" +
    "\uff6e\005\uff6e\010\uff6e\014\uff6e\015\uff6e\020\uff6e\021\uff6e" +
    "\022\uff6e\023\uff6e\024\uff6e\025\uff6e\062\uff6e\001\002\000" +
    "\004\013\252\001\002\000\034\003\uff6f\004\uff6f\005\uff6f" +
    "\010\uff6f\014\uff6f\015\uff6f\020\uff6f\021\uff6f\022\uff6f\023" +
    "\uff6f\024\uff6f\025\uff6f\062\uff6f\001\002\000\004\025\125" +
    "\001\002\000\004\012\255\001\002\000\004\004\256\001" +
    "\002\000\006\057\261\060\257\001\002\000\004\063\274" +
    "\001\002\000\006\005\uff7b\057\uff7b\001\002\000\006\020" +
    "\164\023\165\001\002\000\006\005\uff7d\057\uff7d\001\002" +
    "\000\006\005\264\057\261\001\002\000\060\003\uff7e\005" +
    "\uff7e\011\uff7e\013\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e" +
    "\024\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035" +
    "\uff7e\040\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e" +
    "\061\uff7e\062\uff7e\001\002\000\006\005\uff7c\057\uff7c\001" +
    "\002\000\004\063\267\001\002\000\052\003\234\011\073" +
    "\020\037\021\016\022\022\023\104\024\013\030\052\031" +
    "\036\032\113\033\120\034\066\035\076\040\044\052\055" +
    "\054\102\055\042\056\075\061\071\062\061\001\002\000" +
    "\054\003\234\011\073\013\272\020\037\021\016\022\022" +
    "\023\104\024\013\030\052\031\036\032\113\033\120\034" +
    "\066\035\076\040\044\052\055\054\102\055\042\056\075" +
    "\061\071\062\061\001\002\000\054\003\uff8b\011\uff8b\013" +
    "\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\030\uff8b" +
    "\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\040\uff8b\052" +
    "\uff8b\054\uff8b\055\uff8b\056\uff8b\061\uff8b\062\uff8b\001\002" +
    "\000\006\005\uff7a\057\uff7a\001\002\000\054\003\uff8a\011" +
    "\uff8a\013\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a" +
    "\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\040" +
    "\uff8a\052\uff8a\054\uff8a\055\uff8a\056\uff8a\061\uff8a\062\uff8a" +
    "\001\002\000\052\003\234\011\073\020\037\021\016\022" +
    "\022\023\104\024\013\030\052\031\036\032\113\033\120" +
    "\034\066\035\076\040\044\052\055\054\102\055\042\056" +
    "\075\061\071\062\061\001\002\000\054\003\234\011\073" +
    "\013\276\020\037\021\016\022\022\023\104\024\013\030" +
    "\052\031\036\032\113\033\120\034\066\035\076\040\044" +
    "\052\055\054\102\055\042\056\075\061\071\062\061\001" +
    "\002\000\006\005\uff79\057\uff79\001\002\000\010\005\ufff8" +
    "\013\ufff8\017\ufff8\001\002\000\006\005\305\017\304\001" +
    "\002\000\024\004\uffad\010\uffad\013\uffad\041\uffad\042\uffad" +
    "\043\uffad\044\uffad\045\uffad\046\uffad\001\002\000\006\005" +
    "\uffab\017\uffab\001\002\000\010\005\ufff7\013\ufff7\017\ufff7" +
    "\001\002\000\006\064\uffaa\067\uffaa\001\002\000\024\004" +
    "\uffac\010\uffac\013\uffac\041\uffac\042\uffac\043\uffac\044\uffac" +
    "\045\uffac\046\uffac\001\002\000\006\064\277\067\303\001" +
    "\002\000\006\005\uffa9\017\uffa9\001\002\000\036\003\234" +
    "\011\073\020\037\021\016\022\022\023\104\024\013\030" +
    "\052\031\036\032\113\033\120\034\066\035\076\040\044" +
    "\001\002\000\004\012\312\001\002\000\006\012\uff8e\013" +
    "\uff8e\001\002\000\060\003\uff76\005\uff76\011\uff76\013\uff76" +
    "\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76\030\uff76\031" +
    "\uff76\032\uff76\033\uff76\034\uff76\035\uff76\040\uff76\052\uff76" +
    "\053\uff76\054\uff76\055\uff76\056\uff76\061\uff76\062\uff76\001" +
    "\002\000\006\020\164\023\165\001\002\000\006\012\uff99" +
    "\013\uff99\001\002\000\006\020\164\023\165\001\002\000" +
    "\006\012\uff9b\013\uff9b\001\002\000\006\012\uff9a\013\uff9a" +
    "\001\002\000\006\012\uff9c\013\uff9c\001\002\000\006\012" +
    "\uff96\013\uff96\001\002\000\004\004\074\001\002\000\004" +
    "\004\074\001\002\000\006\004\074\013\326\001\002\000" +
    "\034\003\uffb7\004\uffb7\005\uffb7\010\uffb7\014\uffb7\015\uffb7" +
    "\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\062" +
    "\uffb7\001\002\000\024\004\uffaf\010\uffaf\013\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\001\002\000" +
    "\006\004\074\013\331\001\002\000\034\003\uffb8\004\uffb8" +
    "\005\uffb8\010\uffb8\014\uffb8\015\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\062\uffb8\001\002\000\060" +
    "\003\uff77\005\uff77\011\uff77\013\uff77\020\uff77\021\uff77\022" +
    "\uff77\023\uff77\024\uff77\030\uff77\031\uff77\032\uff77\033\uff77" +
    "\034\uff77\035\uff77\040\uff77\052\uff77\053\uff77\054\uff77\055" +
    "\uff77\056\uff77\061\uff77\062\uff77\001\002\000\004\013\334" +
    "\001\002\000\060\003\uff78\005\uff78\011\uff78\013\uff78\020" +
    "\uff78\021\uff78\022\uff78\023\uff78\024\uff78\030\uff78\031\uff78" +
    "\032\uff78\033\uff78\034\uff78\035\uff78\040\uff78\052\uff78\053" +
    "\uff78\054\uff78\055\uff78\056\uff78\061\uff78\062\uff78\001\002" +
    "\000\022\002\uffc4\003\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\001\002\000\010\003\175\010\200" +
    "\013\167\001\002\000\004\005\344\001\002\000\034\003" +
    "\uffd4\004\uffd4\005\uffd4\010\uffd4\014\uffd4\015\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\062\uffd4\001" +
    "\002\000\034\003\uffdd\004\uffdd\005\uffdd\010\uffdd\014\uffdd" +
    "\015\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\062\uffdd\001\002\000\004\003\343\001\002\000\022" +
    "\002\uffc3\003\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\001\002\000\022\002\uffc6\003\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\001\002\000" +
    "\020\003\232\020\012\021\016\022\022\023\023\024\013" +
    "\051\205\001\002\000\004\012\347\001\002\000\052\003" +
    "\234\011\073\020\037\021\016\022\022\023\104\024\013" +
    "\030\052\031\036\032\113\033\120\034\066\035\076\040" +
    "\044\052\055\054\102\055\042\056\075\061\071\062\061" +
    "\001\002\000\060\003\uff82\005\uff82\011\uff82\013\uff82\020" +
    "\uff82\021\uff82\022\uff82\023\uff82\024\uff82\030\uff82\031\uff82" +
    "\032\uff82\033\uff82\034\uff82\035\uff82\040\uff82\052\uff82\053" +
    "\351\054\uff82\055\uff82\056\uff82\061\uff82\062\uff82\001\002" +
    "\000\052\003\234\011\073\020\037\021\016\022\022\023" +
    "\104\024\013\030\052\031\036\032\113\033\120\034\066" +
    "\035\076\040\044\052\055\054\102\055\042\056\075\061" +
    "\071\062\061\001\002\000\060\003\uff81\005\uff81\011\uff81" +
    "\013\uff81\020\uff81\021\uff81\022\uff81\023\uff81\024\uff81\030" +
    "\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81\040\uff81" +
    "\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\061\uff81\062" +
    "\uff81\001\002\000\004\004\074\001\002\000\004\004\074" +
    "\001\002\000\006\004\074\013\356\001\002\000\034\003" +
    "\uffb6\004\uffb6\005\uffb6\010\uffb6\014\uffb6\015\uffb6\020\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\062\uffb6\001" +
    "\002\000\006\004\074\013\360\001\002\000\034\003\uffb5" +
    "\004\uffb5\005\uffb5\010\uffb5\014\uffb5\015\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\062\uffb5\001\002" +
    "\000\004\013\362\001\002\000\004\003\363\001\002\000" +
    "\036\003\uffd7\004\uffd7\005\uffd7\010\uffd7\014\uffd7\015\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\062\uffd7\001\002\000\004\025\uffb2\001\002\000\004" +
    "\025\366\001\002\000\004\007\367\001\002\000\020\010" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\001\002\000\006\020\164\023\165\001\002\000\006\012" +
    "\uff97\013\uff97\001\002\000\006\064\277\067\303\001\002" +
    "\000\006\064\uffa6\067\uffa6\001\002\000\006\064\277\067" +
    "\303\001\002\000\004\013\376\001\002\000\034\003\uffa5" +
    "\004\uffa5\005\uffa5\010\uffa5\014\uffa5\015\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\062\uffa5\001\002" +
    "\000\004\013\u0100\001\002\000\034\003\uffa4\004\uffa4\005" +
    "\uffa4\010\uffa4\014\uffa4\015\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\025\uffa4\062\uffa4\001\002\000\016\010" +
    "\053\020\012\021\016\022\022\023\023\024\013\001\002" +
    "\000\004\017\u0104\001\002\000\006\003\175\010\200\001" +
    "\002\000\020\003\232\020\012\021\016\022\022\023\023" +
    "\024\013\051\205\001\002\000\004\017\u0106\001\002\000" +
    "\010\020\164\023\165\040\044\001\002\000\004\012\u0109" +
    "\001\002\000\006\036\317\037\320\001\002\000\004\004" +
    "\u010a\001\002\000\030\003\341\004\074\010\053\014\116" +
    "\015\100\020\012\021\016\022\022\023\023\024\013\025" +
    "\045\001\002\000\032\003\341\004\074\005\u010c\010\053" +
    "\014\116\015\100\020\012\021\016\022\022\023\023\024" +
    "\013\025\045\001\002\000\060\003\uff80\005\uff80\011\uff80" +
    "\013\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\030" +
    "\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80\040\uff80" +
    "\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\061\uff80\062" +
    "\uff80\001\002\000\060\003\uff83\005\uff83\011\uff83\013\uff83" +
    "\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83\030\uff83\031" +
    "\uff83\032\uff83\033\uff83\034\uff83\035\uff83\040\uff83\052\uff83" +
    "\053\uff83\054\uff83\055\uff83\056\uff83\061\uff83\062\uff83\001" +
    "\002\000\014\020\012\021\016\022\022\023\023\024\013" +
    "\001\002\000\004\012\u0110\001\002\000\004\004\uffbe\001" +
    "\002\000\006\012\u0115\017\u0114\001\002\000\004\025\u0113" +
    "\001\002\000\006\012\uffba\017\uffba\001\002\000\014\020" +
    "\012\021\016\022\022\023\023\024\013\001\002\000\004" +
    "\004\uffbc\001\002\000\004\025\u0117\001\002\000\006\012" +
    "\uffb9\017\uffb9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\004\002\005\001\001\000\002\001\001\000" +
    "\004\065\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\014\017\017\020\013\056\010\001\001\000" +
    "\004\066\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\014\020\024\056\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\030\001\001\000\006\067\u010e\070\u010d\001\001\000" +
    "\004\021\033\001\001\000\002\001\001\000\076\003\113" +
    "\004\111\005\102\013\076\014\064\015\055\016\104\022" +
    "\047\025\063\026\042\027\053\030\120\032\046\033\045" +
    "\034\100\035\110\036\116\040\105\041\057\042\037\043" +
    "\066\045\114\046\061\047\067\050\040\053\034\054\106" +
    "\055\050\060\071\063\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\371\001\001\000\004\076\367\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\360\010\130" +
    "\001\001\000\010\006\352\030\326\032\046\001\001\000" +
    "\002\001\001\000\042\003\113\005\335\013\076\014\064" +
    "\016\337\025\063\026\042\027\053\030\120\032\046\033" +
    "\045\034\100\054\106\055\050\061\336\063\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\332\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\322" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\313\035\315\037\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\077\307\001\001\000" +
    "\006\031\277\062\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\146\001\001\000\004\034\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\136\010" +
    "\130\034\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\153\010\130\034\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\071\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\225" +
    "\010\130\034\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\205\004\111\005\202\007" +
    "\203\010\130\012\206\035\110\036\116\040\105\041\057" +
    "\042\200\043\066\057\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\170\011\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\212\010\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\222\010\130" +
    "\034\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\205\005\230\012" +
    "\206\057\227\001\001\000\002\001\001\000\004\011\216" +
    "\001\001\000\002\001\001\000\042\003\205\004\111\005" +
    "\234\022\047\035\110\036\116\040\105\041\057\042\037" +
    "\043\066\045\235\046\061\047\067\050\040\053\034\060" +
    "\071\001\001\000\002\001\001\000\004\006\170\001\001" +
    "\000\002\001\001\000\004\074\237\001\001\000\006\007" +
    "\240\010\130\001\001\000\002\001\001\000\006\034\242" +
    "\043\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\051\262\052\261\064\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\265\001\001\000\002\001\001" +
    "\000\004\052\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\003\205\004\111\005\234" +
    "\022\047\035\110\036\116\040\105\041\057\042\037\043" +
    "\066\044\267\045\270\046\061\047\067\050\040\053\034" +
    "\060\071\001\001\000\042\003\205\004\111\005\234\022" +
    "\047\035\110\036\116\040\105\041\057\042\037\043\066" +
    "\045\272\046\061\047\067\050\040\053\034\060\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\003\205\004\111\005\234\022\047\035\110\036" +
    "\116\040\105\041\057\042\037\043\066\044\274\045\270" +
    "\046\061\047\067\050\040\053\034\060\071\001\001\000" +
    "\042\003\205\004\111\005\234\022\047\035\110\036\116" +
    "\040\105\041\057\042\037\043\066\045\272\046\061\047" +
    "\067\050\040\053\034\060\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\073\305\001\001" +
    "\000\002\001\001\000\004\062\306\001\001\000\002\001" +
    "\001\000\024\003\205\004\111\005\234\035\110\036\116" +
    "\040\105\041\057\042\310\043\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\321" +
    "\001\001\000\002\001\001\000\004\043\320\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\027\327\030\120\032\046\001\001\000" +
    "\010\027\324\030\120\032\046\001\001\000\006\030\326" +
    "\032\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\326\032\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\205\005\230\012\206\057\345" +
    "\001\001\000\002\001\001\000\042\003\205\004\111\005" +
    "\234\022\047\035\110\036\116\040\105\041\057\042\037" +
    "\043\066\045\347\046\061\047\067\050\040\053\034\060" +
    "\071\001\001\000\002\001\001\000\042\003\205\004\111" +
    "\005\234\022\047\035\110\036\116\040\105\041\057\042" +
    "\037\043\066\045\351\046\061\047\067\050\040\053\034" +
    "\060\071\001\001\000\002\001\001\000\010\027\356\030" +
    "\120\032\046\001\001\000\010\027\354\030\120\032\046" +
    "\001\001\000\006\030\326\032\046\001\001\000\002\001" +
    "\001\000\006\030\326\032\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\072\364\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\370\001\001\000\002\001" +
    "\001\000\004\062\376\001\001\000\004\075\373\001\001" +
    "\000\004\062\374\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\205" +
    "\005\u0102\014\u0101\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\205\005\230\012\206\057\u0104\001\001" +
    "\000\002\001\001\000\006\040\u0106\043\u0107\001\001\000" +
    "\002\001\001\000\004\037\314\001\001\000\002\001\001" +
    "\000\042\003\113\005\335\013\076\014\064\015\u010a\016" +
    "\104\025\063\026\042\027\053\030\120\032\046\033\045" +
    "\034\100\054\106\055\050\063\107\001\001\000\040\003" +
    "\113\005\335\013\076\014\064\016\337\025\063\026\042" +
    "\027\053\030\120\032\046\033\045\034\100\054\106\055" +
    "\050\063\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\u0111\023\u0110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\u0115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    BasicLexerCupV lex;

    private int errorCount = 0;

    @Override
    public void syntax_error(Symbol s) {
        errorCount++;
        System.err.println("Error sintáctico en línea " + (s.left + 1) +
                           ", columna " + (s.right + 1) + ". Token inesperado: " + s.value);
    }

    // Método para verificar si hubo errores
    public boolean hasErrors() {
        return errorCount > 0;
    }

    @SuppressWarnings("deprecation")
    public parser(BasicLexerCupV lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
        this.currentHash = null;
    }

    // Tabla de símbolos
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<>();
    String currentHash;

    public void imprimirTablaSimbolos() {
        for (String key : listaTablasSimbolos.keySet()) {
            System.out.println("\nTabla de símbolos: " + key);
            System.out.println("+--------+---------+----------------------+------------+");
            System.out.println("| Línea  | Columna | Lexema              | Tipo       |");
            System.out.println("+--------+---------+----------------------+------------+");
            for (String simbolo : listaTablasSimbolos.get(key)) {
                System.out.println(simbolo);
            }
            System.out.println("+--------+---------+----------------------+------------+\n");
        }
    }

    public void agregarTablaSimbolos(String tipoTabla, String nombre) {
        System.out.println("/+++Nueva tabla símbolos función o main+++/ " + nombre);
        ArrayList<String> nuevaTabla = new ArrayList<>();
        currentHash = nombre;
        listaTablasSimbolos.put(currentHash, nuevaTabla);
    }

    public void agregarVariable(int linea, int columna, String lexema, String tipo) {
        System.out.println("PARSER: identificador (agregar o verificar) " + lexema);
        if (currentHash == null) {
            System.err.println("Error: No hay una tabla de símbolos activa");
            return;
        }
        ArrayList<String> tabla = listaTablasSimbolos.get(currentHash);
        if (tabla == null) {
            System.err.println("Error: La tabla de símbolos '" + currentHash + "' no existe");
            return;
        }
        String entrada = String.format("| %-6d | %-7d | %-20s | %-10s |",
                linea + 1, columna + 1, lexema, tipo);
        tabla.add(entrada);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

 
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

       parser.agregarTablaSimbolos("main", "_verano_");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= MAIN NT$0 funciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;
		
             System.err.println("Error en la estructura inicial.");
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos ::= INTEGER 
            {
              Object RESULT =null;
		RESULT="rodolfo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipos ::= STRING 
            {
              Object RESULT =null;
		RESULT="cometa";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipos ::= CHAR 
            {
              Object RESULT =null;
		RESULT="cupido";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipos ::= FLOAT 
            {
              Object RESULT =null;
		RESULT="bromista";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipos ::= BOOL 
            {
              Object RESULT =null;
		RESULT="trueno";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tiposArr ::= L_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Symbol symbol = (Symbol) CUP$parser$stack.peek();
                              parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "rodolfo");
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiposArr",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tiposArr ::= L_CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Symbol symbol = (Symbol) CUP$parser$stack.peek();
                            parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cupido");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiposArr",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literales ::= L_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "rodolfo");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literales ::= L_STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cometa");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literales ::= L_FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "bromista");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literales ::= L_CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cupido");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literales ::= bool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bool ::= TRUE 
            {
              Object RESULT =null;
		RESULT="true";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bool ::= FALSE 
            {
              Object RESULT =null;
		RESULT="false";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresionRelacional ::= asignarTipo operadorRelacional literales 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión relacional: " + op + " " + l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresionRelacional ::= asignarTipo operadorRelacional variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresionRelacional ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Expresión relacional inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresionLogica ::= asignarTipo operadorLogico literales 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión lógica: " + op + " " + l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresionLogica ::= negacion literales 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión lógica con negación: !" + n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresionLogica ::= asignarTipo operadorLogico variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresionLogica ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Expresión lógica inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // asignarTipo ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (t == null || idVar == null) {
            System.err.println("Error: Tipo o identificador no definido.");
            parser.agregarVariable(0, 0, "undefined", "undefined");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, idVar.toString(), t.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarTipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operadorRelacional ::= MENOR 
            {
              Object RESULT =null;
		RESULT="snowball";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operadorRelacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="evergreen";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operadorRelacional ::= MAYOR 
            {
              Object RESULT =null;
		RESULT="minstix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operadorRelacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="upatree";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operadorRelacional ::= IGUAL 
            {
              Object RESULT =null;
		RESULT="mary";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operadorRelacional ::= DIFERENTE 
            {
              Object RESULT =null;
		RESULT="openslae";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operadorLogico ::= CONJUNCION 
            {
              Object RESULT =null;
		RESULT="melchor";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operadorLogico ::= DISYUNCION 
            {
              Object RESULT =null;
		RESULT="gaspar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // negacion ::= NEGACION 
            {
              Object RESULT =null;
		RESULT="baltazar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // creacion ::= asignarTipo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // creacion ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Asignación inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // creacionAsignacion ::= asignarTipo ASIGNA literales FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // creacionAsignacion ::= asignarTipo ASIGNA expresiones FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // creacionAsignacion ::= asignarTipo ASIGNA expresionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // creacionAsignacion ::= asignarTipo ASIGNA IDENTIFICADOR FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // creacionAsignacion ::= asignarTipo error 
            {
              Object RESULT =null;
		 System.err.println("Error: Expresión inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // creacionAsignacion ::= ASIGNA literales FIN_EXPRESION error 
            {
              Object RESULT =null;
		 System.err.println("Error: Falta la asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // creacionAsignacion ::= asignarTipo ASIGNA literales error 
            {
              Object RESULT =null;
		 System.err.println("Error: Falta el fin de expresión"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia ::= expresionArr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia ::= asignaVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia ::= print 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia ::= read 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 parser.agregarTablaSimbolos("funcion", e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funcion ::= encabezadoFuncion NT$1 parametros bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // encabezadoFuncion ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), t.toString());
        RESULT = id.toString();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // encabezadoFuncion ::= IDENTIFICADOR error 
            {
              Object RESULT =null;
		 System.err.println("Error: Al encabezado de la función le falta el tipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // encabezadoFuncion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bloque ::= corcheteIzquierdo sentencias return_funcion corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloque ::= corcheteIzquierdo sentenciaEstructura return_funcion corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bloque ::= corcheteIzquierdo corcheteDerecho error 
            {
              Object RESULT =null;
		 System.err.println("Error: bloque vacio"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloque ::= corcheteIzquierdo sentencias corcheteDerecho error 
            {
              Object RESULT =null;
		 System.err.println("Error: A la función le falta el retorno"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque ::= corcheteIzquierdo sentenciaEstructura corcheteDerecho error 
            {
              Object RESULT =null;
		 System.err.println("Error: A la función le falta el retorno"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // return_funcion ::= RETURN literales FIN_EXPRESION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if (t == null) {
            System.err.println("Error: El tipo de retorno es nulo.");
            parser.agregarVariable(0, 0, "return", "undefined");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "return", t.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_funcion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // return_funcion ::= RETURN variable FIN_EXPRESION 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if (v == null) {
            System.err.println("Error: El valor de retorno es nulo.");
            parser.agregarVariable(0, 0, "return", "undefined");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "return", v.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_funcion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$2 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametros ::= PARENTESISAPERTURA NT$2 PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$3 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametros ::= PARENTESISAPERTURA NT$3 parametroAux PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametros ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error: Parametros mal definidos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametroAux ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (t == null || id == null) {
            System.err.println("Error: Parámetro inválido (tipo o identificador nulo).");
            parser.agregarVariable(0, 0, "parametro: undefined", "undefined");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "parametro: " + id.toString(), t.toString());
            System.out.println("Parámetro agregado: " + id.toString() + " de tipo " + t.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametroAux ::= parametroAux COMA tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (t == null || id == null) {
            System.err.println("Error: Parámetro adicional inválido (tipo o identificador nulo).");
            parser.agregarVariable(0, 0, "parametro: undefined", "undefined");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "parametro: " + id.toString(), t.toString());
            System.out.println("Parámetro adicional agregado: " + id.toString() + " de tipo " + t.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresionArr ::= crearArreglos operadorRelacional arreglos FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionArr",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresionArr ::= crearArreglos ASIGNA arreglos FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionArr",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresionArr ::= arreglos ASIGNA arreglos FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionArr",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresionArr ::= arreglos operadorRelacional arreglos FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionArr",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$4 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Symbol symbol = (Symbol) CUP$parser$stack.peek();
                parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), t.toString() + "[]");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // crearArreglos ::= tipos IDENTIFICADOR NT$4 CORCHETEAPERTURA IDENTIFICADOR CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idVarArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idVarArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idVarArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearArreglos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$5 ::= 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = "abreempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // modificarArreglos ::= IDENTIFICADOR CORCHETEAPERTURA NT$5 IDENTIFICADOR CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "cierraempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modificarArreglos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // arreglos ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arreglos ::= arreglos arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arreglo ::= parametrosArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametrosArreglo ::= corcheteIzquierdo corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametrosArreglo ::= corcheteIzquierdo parametrosArregloAux corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametrosArregloAux ::= tiposArr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArregloAux",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$6 ::= 
            {
              Object RESULT =null;
 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parametrosArregloAux ::= parametrosArregloAux COMA NT$6 tiposArr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArregloAux",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$7 ::= 
            {
              Object RESULT =null;
RESULT="entrega";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // asignaVariable ::= variable ASIGNA NT$7 literales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$8 ::= 
            {
              Object RESULT =null;
RESULT="entrega";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // asignaVariable ::= modificarArreglos ASIGNA NT$8 tiposArr FIN_EXPRESION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // asignaVariable ::= modificarArreglos operadorRelacional tiposArr FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // variable ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Variable: " + idVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operandoBinaria ::= SUMA 
            {
              Object RESULT =null;
		RESULT="navidad";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operandoBinaria ::= RESTA 
            {
              Object RESULT =null;
		RESULT="intercambio";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operandoBinaria ::= DIVISION 
            {
              Object RESULT =null;
		RESULT="reyes";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operandoBinaria ::= MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT="nochebuena";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operandoBinaria ::= MODULO 
            {
              Object RESULT =null;
		RESULT="magos";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operandoBinaria ::= POTENCIA 
            {
              Object RESULT =null;
		RESULT="adviento";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresionBinaria ::= expresion operandoBinaria expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operandoUnario ::= INCREMENTO 
            {
              Object RESULT =null;
		RESULT="quien";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operandoUnario ::= DECREMENTO 
            {
              Object RESULT =null;
		RESULT="grinch";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresionUnario ::= expresion operandoUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$9 ::= 
            {
              Object RESULT =null;
RESULT="-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresionUnario ::= NEGATIVO NT$9 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresionRelacionalMat ::= expresion operadorRelacional expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacionalMat",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresiones ::= expresionRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresiones ::= operandoBinaria expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresiones ::= expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresiones ::= expresionUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresiones ::= expresionRelacionalMat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$10 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresiones ::= PARENTESISAPERTURA NT$10 expresiones PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresion ::= INTEGER 
            {
              Object RESULT =null;
		RESULT="rodolfo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresion ::= FLOAT 
            {
              Object RESULT =null;
		RESULT="bromista";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencia_lista ::= sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_lista",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencia_lista ::= sentencia_lista sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_lista",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentenciaEstructura ::= if_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentenciaEstructura ::= for_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentenciaEstructura ::= while_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentenciaEstructura ::= switch_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentenciaEstructura ::= return_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentenciaEstructura ::= break_estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentenciaEstructura ::= expresiones FIN_EXPRESION 
            {
              Object RESULT =null;
		RESULT="finregalo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // if_estructura ::= IF PARENTESISAPERTURA expresionLogica PARENTESISCIERRE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // if_estructura ::= IF PARENTESISAPERTURA expresionLogica PARENTESISCIERRE sentenciaEstructura ELSE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // for_estructura ::= FOR PARENTESISAPERTURA creacionAsignacion COMA expresionLogica COMA expresionUnario PARENTESISCIERRE corcheteIzquierdo sentencias corcheteDerecho 
            {
              Object RESULT =null;
		
        System.out.println("Estructura for reconocida.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_estructura",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // while_estructura ::= WHILE PARENTESISAPERTURA expresionLogica PARENTESISCIERRE sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_estructura",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // switch_estructura ::= SWITCH PARENTESISAPERTURA variable PARENTESISCIERRE corcheteIzquierdo casos_switch corcheteDerecho 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_estructura",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // casos_switch ::= caso_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // casos_switch ::= casos_switch caso_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // casos_switch ::= default_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // caso_switch ::= CASE expresion DOS_PUNTOS sentencia_lista FIN_EXPRESION 
            {
              Object RESULT =null;
		
        System.out.println("Caso switch reconocido.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_switch",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // default_case ::= DEFAULT DOS_PUNTOS sentencia_lista FIN_EXPRESION 
            {
              Object RESULT =null;
		
        System.out.println("Caso default reconocido.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_case",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // return_estructura ::= RETURN expresion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // return_estructura ::= RETURN FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // break_estructura ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_estructura",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // print ::= PRINT PARENTESISAPERTURA literales PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // print ::= PRINT PARENTESISAPERTURA variable PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // print ::= PRINT PARENTESISAPERTURA variable error 
            {
              Object RESULT =null;
		 System.err.println("Error: No se cerró el print"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // print ::= PRINT error 
            {
              Object RESULT =null;
		 System.err.println("Error: Print mal formado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // print ::= PRINT variable PARENTESISCIERRE error 
            {
              Object RESULT =null;
		 System.err.println("Print mal formado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // read ::= READ PARENTESISAPERTURA expresion PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // read ::= READ PARENTESISAPERTURA variable PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // read ::= READ PARENTESISAPERTURA PARENTESISCIERRE error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
