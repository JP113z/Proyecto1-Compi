package ParserLexer;
import java_cup.runtime.*;

action code {: :};

parser code {:
    BasicLexerCupV lex;

    @SuppressWarnings("deprecation")
    public parser(BasicLexerCupV lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
:}

init with {: :};

scan with {: return lex.next_token(); :};

/* Terminales */
terminal corcheteIzquierdo, corcheteDerecho, CORCHETEAPERTURA, CORCHETECIERRE, ASIGNA, PARENTESISAPERTURA, PARENTESISCIERRE, FIN_EXPRESION,
        PRINT, READ, MAIN, COMA;
terminal INTEGER, STRING, CHAR, FLOAT, BOOL, IDENTIFICADOR, TRUE, FALSE;
terminal SUMA, RESTA, DIVISION, MULTIPLICACION, MODULO, POTENCIA, INCREMENTO, DECREMENTO, NEGATIVO;
terminal MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL, IGUAL, DIFERENTE;
terminal CONJUNCION, DISYUNCION, NEGACION;
terminal IF, ELSE, WHILE, FOR, SWITCH, CASE, DEFAULT, BREAK, RETURN, DOS_PUNTOS, PUNTOS;
terminal L_INTEGER, L_STRING, L_FLOAT, L_CHAR;

/* No terminales */
non terminal inicio, tipos, expresionRelacional, asignarTipo, operadorRelacional, literales, bool, operadorLogico, negacion,
creacion, creacionAsignacion, sentencias, sentencia, funciones, funcion, bloque, return_estructura,
parametroAux, parametros, tipoArreglo, crearArreglos, modificarArreglos, arreglos, arreglo,
parametrosArregloAux, parametrosArreglo, asignaVariable, variable, operandoBinaria, expresionBinaria,
operandoUnario, expresionUnario, expresionRelacionalMat, expresiones, expresion, sentencia_lista, sentenciaEstructura, if_estructura,
for_estructura, rango, switch_estructura, casos_switch, caso_switch, break_estructura, print, read, encabezadoFuncion, expresionLogica,
while_estructura;

/* Precedencia */
precedence left ELSE;
precedence left MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL;
precedence left IGUAL, DIFERENTE;
precedence left CONJUNCION, DISYUNCION;

/* Producción inicial */
start with inicio;

inicio ::= MAIN sentencias
         | funciones; // Incorporamos funciones en el flujo principal

/* Definiciones */
tipos ::= L_INTEGER | L_STRING | L_FLOAT | L_CHAR | bool;
bool ::= TRUE | FALSE;
literales ::= INTEGER | STRING | CHAR | FLOAT | BOOL;

expresionRelacional ::= asignarTipo operadorRelacional literales;
expresionLogica ::= asignarTipo operadorLogico literales | negacion literales;

asignarTipo ::= tipos IDENTIFICADOR;

operadorRelacional ::= MENOR | MENOR_IGUAL | MAYOR | MAYOR_IGUAL | IGUAL | DIFERENTE;
operadorLogico ::= CONJUNCION | DISYUNCION;
negacion ::= NEGACION;

creacion ::= asignarTipo FIN_EXPRESION;
creacionAsignacion ::= asignarTipo ASIGNA literales FIN_EXPRESION;

sentencias ::= sentencia | sentencias sentencia;
sentencia ::= asignaVariable
            | creacion
            | creacionAsignacion
            | print
            | read
            | break_estructura
            | return_estructura
            | switch_estructura;

funciones ::= funcion
           | funciones funcion; // Permite múltiples funciones en cascada

funcion ::= encabezadoFuncion bloque;

encabezadoFuncion ::= asignarTipo parametros;

bloque ::= corcheteIzquierdo sentencias corcheteDerecho;

parametros ::= PARENTESISAPERTURA PARENTESISCIERRE
             | PARENTESISAPERTURA parametroAux PARENTESISCIERRE;
parametroAux ::= asignarTipo | parametroAux COMA asignarTipo;

expresionRelacional ::= crearArreglos operadorRelacional arreglos;
expresionLogica ::= crearArreglos operadorLogico arreglos;

tipoArreglo ::= L_CHAR CORCHETEAPERTURA CORCHETECIERRE
              | L_INTEGER CORCHETEAPERTURA CORCHETECIERRE;

crearArreglos ::= tipoArreglo IDENTIFICADOR CORCHETEAPERTURA IDENTIFICADOR CORCHETECIERRE;
modificarArreglos ::= IDENTIFICADOR CORCHETEAPERTURA IDENTIFICADOR CORCHETECIERRE;

arreglos ::= arreglo | arreglos arreglo;
arreglo ::= parametrosArreglo;

parametrosArreglo ::= corcheteIzquierdo corcheteDerecho
                    | corcheteIzquierdo parametrosArregloAux corcheteDerecho;
parametrosArregloAux ::= asignarTipo | parametrosArregloAux COMA asignarTipo;

expresionRelacional ::= asignarTipo operadorRelacional variable;
expresionLogica ::= asignarTipo operadorLogico variable;

asignaVariable ::= variable ASIGNA literales | modificarArreglos ASIGNA literales;

variable ::= IDENTIFICADOR;

operandoBinaria ::= SUMA | RESTA | DIVISION | MULTIPLICACION | MODULO | POTENCIA;
expresionBinaria ::= expresion operandoBinaria expresion;

operandoUnario ::= INCREMENTO | DECREMENTO;
expresionUnario ::= expresion operandoUnario | NEGATIVO expresion;

expresionRelacionalMat ::= expresion operadorRelacional expresion;

expresiones ::= expresionRelacional
              | expresion
              | operandoBinaria expresion
              | expresionBinaria
              | expresionUnario
              | expresionRelacionalMat
              | PARENTESISAPERTURA expresiones PARENTESISCIERRE;


expresion ::= INTEGER | FLOAT;

sentencia_lista ::= sentenciaEstructura | sentencia_lista sentenciaEstructura;

sentenciaEstructura ::= if_estructura
                      | for_estructura
                      | while_estructura
                      | switch_estructura
                      | return_estructura
                      | break_estructura
                      | expresiones FIN_EXPRESION;

if_estructura ::= IF PARENTESISAPERTURA operadorLogico PARENTESISCIERRE sentenciaEstructura
                | IF PARENTESISAPERTURA operadorLogico PARENTESISCIERRE sentenciaEstructura ELSE sentenciaEstructura;

for_estructura ::= FOR PARENTESISAPERTURA IDENTIFICADOR DOS_PUNTOS rango PARENTESISCIERRE sentencia;
while_estructura ::= WHILE PARENTESISAPERTURA expresionLogica PARENTESISCIERRE sentenciaEstructura;

rango ::= expresion PUNTOS expresion
        | expresion PUNTOS expresion PUNTOS;

switch_estructura ::= SWITCH PARENTESISAPERTURA expresion PARENTESISCIERRE corcheteIzquierdo casos_switch corcheteDerecho;
casos_switch ::= caso_switch | casos_switch caso_switch;
caso_switch ::= CASE expresion DOS_PUNTOS sentencia_lista
              | DEFAULT DOS_PUNTOS sentencia_lista;

return_estructura ::= RETURN expresion FIN_EXPRESION
                    | RETURN FIN_EXPRESION;
break_estructura ::= BREAK FIN_EXPRESION;

print ::= PRINT PARENTESISAPERTURA literales PARENTESISCIERRE
        | PRINT PARENTESISAPERTURA variable PARENTESISCIERRE;

read ::= READ PARENTESISAPERTURA expresion PARENTESISCIERRE;
