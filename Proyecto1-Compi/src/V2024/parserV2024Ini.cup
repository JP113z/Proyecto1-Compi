package ParserLexer;
import java_cup.runtime.*;


//utiliza class BasicLexerCupV que genera el lexer.jflex, pequeños cambios de lo tomado de la página de cup
//cambios en parser code, init with y scan with {:

action code {: :}; //Por ahora se queda vacio

parser code {:
    // Connect this parser to a scanner!
    BasicLexerCupV lex;

    @SuppressWarnings("deprecation")
    public parser(BasicLexerCupV lex){
        this.lex=lex; 
        this.symbolFactory = new DefaultSymbolFactory();
    }

:}

init with {: :};

/* define how to connect to the scanner! */
scan with {: return lex.next_token(); :};

/* Terminales (tokens retornados por el scanner). */
terminal ABRECUENTO, CIERRACUENTO,  ABREEMPAQUE, CIERREEMPAQUE, ASIGNA, PARENTESISAPERTURA, PARENTESISCIERRE, FIN_EXPRESION,
        PRINT, READ, MAIN, COMA;
terminal INTEGER, STRING, CHAR, FLOAT,BOOL, IDENTIFICADOR; /*  tipos de datos e identificador */
terminal  SUMA,RESTA, DIVISION, MULTIPLICACION, MODULO, POTENCIA, INCREMENTO, DECREMENTO, NEGATIVO; /*  expresiones aritméticas y operadores unarios */
terminal MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL, IGUAL, DIFERENTE; /* expresiones relacionales*/
terminal CONJUNCION, DISYUNCION, NEGACION; /* expresiones lógicas*/
terminal IF, ELSE, WHILE, FOR, SWITCH, CASE, DEFAULT, BREAK, RETURN, DOS_PUNTOS; /*estructuras de control*/
terminal  L_INTEGER, L_STRING, L_FLOAT;

// no terminales
non terminal programa, programaAux ;

//produccion de inicio
start with programa;

programa ::= programaAux ;
programa ::= INTEGER ;
