package ParserLexer;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;

action code {: :};

parser code {:
    BasicLexerCupV lex;

    @SuppressWarnings("deprecation")
    public parser(BasicLexerCupV lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
        this.currentHash = null;
    }

        HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<String, ArrayList<String>>();
        String currentHash;
        public void imprimirTablaSimbolos() {
            for (String key : listaTablasSimbolos.keySet()) {
                System.out.println("Tabla de símbolo: " + key);
                System.out.println("Valores: ");
                for (String item : listaTablasSimbolos.get(key)) {
                    System.out.println(item);
                }
                System.out.println("");
            }
        }
        // Método para agregar una nueva tabla de símbolos (función o main)
        public void agregarTablaSimbolos(String tipoTabla, String nombre) {
            System.out.println("/+++Nueva tabla símbolos función o main+++/ " + nombre);
            String tipo;
            if (tipoTabla.equals("main")) {
                tipo = "tipo:main";
            } else {
                tipo = "tipo:funcion:" + nombre;
            }
            ArrayList<String> nuevaTabla = new ArrayList<>();
            nuevaTabla.add(tipo);
            currentHash = nombre;
            listaTablasSimbolos.put(currentHash, nuevaTabla);
        }

        public void agregarVariable(String nombre, String tipo) {
            System.out.println("PARSER: identificador (agregar o verificar) " + nombre);
            if (currentHash == null) {
                System.err.println("Error: No hay una tabla de símbolos activa");
                return;
            }
            ArrayList<String> tabla = listaTablasSimbolos.get(currentHash);
            if (tabla == null) {
                System.err.println("Error: La tabla de símbolos '" + currentHash + "' no existe");
                return;
            }
            tabla.add(nombre + ":" + tipo);
        }
:}

init with {: :};

scan with {: return lex.next_token(); :};

/* Terminales */
terminal corcheteIzquierdo, corcheteDerecho, CORCHETEAPERTURA, CORCHETECIERRE, ASIGNA, PARENTESISAPERTURA, PARENTESISCIERRE, FIN_EXPRESION,
        PRINT, READ, MAIN, COMA;
terminal INTEGER, STRING, CHAR, FLOAT, BOOL, IDENTIFICADOR, TRUE, FALSE;
terminal SUMA, RESTA, DIVISION, MULTIPLICACION, MODULO, POTENCIA, INCREMENTO, DECREMENTO, NEGATIVO;
terminal MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL, IGUAL, DIFERENTE;
terminal CONJUNCION, DISYUNCION, NEGACION;
terminal IF, ELSE, WHILE, FOR, SWITCH, CASE, DEFAULT, BREAK, RETURN, DOS_PUNTOS, PUNTOS;
terminal Integer L_INTEGER;
terminal String L_STRING;
terminal Float L_FLOAT;
terminal Character L_CHAR;

/* No terminales */
non terminal inicio, tipos, expresionRelacional, asignarTipo, operadorRelacional, literales, bool, operadorLogico, negacion,
creacion, creacionAsignacion, sentencias, sentencia, funciones, funcion, bloque, return_estructura,
parametroAux, parametros, tipoArreglo, crearArreglos, modificarArreglos, arreglos, arreglo,
parametrosArregloAux, parametrosArreglo, asignaVariable, variable, operandoBinaria, expresionBinaria,
operandoUnario, expresionUnario, expresionRelacionalMat, expresiones, expresion, sentencia_lista, sentenciaEstructura, if_estructura,
for_estructura, rango, switch_estructura, casos_switch, caso_switch, break_estructura, print, read, encabezadoFuncion, expresionLogica,
while_estructura;

/* Precedencia */
precedence left ELSE;
precedence left MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL;
precedence left IGUAL, DIFERENTE;
precedence left CONJUNCION, DISYUNCION;

/* Producción inicial */
start with inicio;

inicio ::= MAIN
    {: parser.agregarTablaSimbolos("main", "_verano_"); :}
    sentencias
    {: parser.imprimirTablaSimbolos(); :}
         | funciones
         | error {: System.err.println("Error en la estructura inicial."); :};

/* Definiciones */
tipos ::=INTEGER {:RESULT="rodolfo";:}
        | STRING {:RESULT="cometa";:}
        | CHAR {:RESULT="cupido";:}
        | FLOAT {:RESULT="bromista";:}
        | BOOL {:RESULT="trueno";:};


literales ::= L_INTEGER:iVar {: System.out.println("Tipo: " + iVar.toString()); :}
              | L_STRING:sVar {: System.out.println("Tipo: " + sVar.toString()); :}
              | L_FLOAT:fVar {: System.out.println("Tipo: " + fVar.toString()); :}
              | L_CHAR:cVar {: System.out.println("Tipo: " + cVar.toString()); :}
              | bool;

bool ::= TRUE {:RESULT="true";:}
        | FALSE{:RESULT="false";:};

expresionRelacional ::= asignarTipo operadorRelacional:op literales:l {: System.out.println("Expresión relacional: " + op + " " + l); :}
                     | error {: System.err.println("Error: Expresión relacional inválida"); :};

expresionLogica ::= asignarTipo operadorLogico:op literales:l {: System.out.println("Expresión lógica: " + op + " " + l); :}
                  | negacion literales:n {: System.out.println("Expresión lógica con negación: !" + n); :}
                  | error {: System.err.println("Error: Expresión lógica inválida"); :};

asignarTipo ::= tipos:t IDENTIFICADOR:idVar
    {:
        parser.agregarVariable(idVar.toString(), t.toString());
        System.out.println("Asignación: " + idVar.toString());
    :}
    | tipos error {: System.err.println("Error: Falta identificador después del tipo"); :};

operadorRelacional ::= MENOR {:RESULT="snowball";:}
                       | MENOR_IGUAL {:RESULT="evergreen";:}
                       | MAYOR {:RESULT="minstix";:}
                       | MAYOR_IGUAL {:RESULT="upatree";:}
                       | IGUAL {:RESULT="mary";:}
                       | DIFERENTE {:RESULT="openslae";:};

operadorLogico ::= CONJUNCION {:RESULT="melchor";:}
                   | DISYUNCION {:RESULT="gaspar";:};

negacion ::= NEGACION {:RESULT="baltazar";:};

creacion ::= asignarTipo FIN_EXPRESION;

creacionAsignacion ::= asignarTipo ASIGNA literales FIN_EXPRESION;

sentencias ::= sentencia | sentencias sentencia;
sentencia ::= asignaVariable
            | creacion
            | creacionAsignacion
            | print
            | read
            | break_estructura
            | return_estructura
            | switch_estructura;

funciones ::= funcion
           | funciones funcion;

funcion ::= encabezadoFuncion:e
    {: parser.agregarTablaSimbolos("funcion", e.toString()); :}
    bloque;

encabezadoFuncion ::= tipos:t IDENTIFICADOR:id parametros
    {:
        RESULT = id.toString();
    :};

bloque ::= corcheteIzquierdo sentencias corcheteDerecho;

parametros ::= PARENTESISAPERTURA{: RESULT = "abreregalo"; :}
                PARENTESISCIERRE{: RESULT = "cierraregalo"; :}
             | PARENTESISAPERTURA{: RESULT = "abreregalo"; :}
              parametroAux PARENTESISCIERRE{: RESULT = "cierraregalo"; :};

parametroAux ::= asignarTipo | parametroAux COMA{: RESULT = ","; :}
                                asignarTipo;

expresionRelacional ::= crearArreglos operadorRelacional arreglos;
expresionLogica ::= crearArreglos operadorLogico arreglos;

tipoArreglo ::= L_CHAR:cVar
                CORCHETEAPERTURA {: RESULT = "abreempaque"; :}
                CORCHETECIERRE {: RESULT = "cierraempaque"; :}
              | L_INTEGER:iVar
                CORCHETEAPERTURA {: RESULT = "abreempaque"; :}
                CORCHETECIERRE {: RESULT = "cierraempaque"; :};


crearArreglos ::= tipoArreglo:t IDENTIFICADOR:id
    {:
        parser.agregarVariable(id.toString(), t.toString() + "[]");
    :}
    CORCHETEAPERTURA IDENTIFICADOR CORCHETECIERRE;

modificarArreglos ::= IDENTIFICADOR:idVar
                      CORCHETEAPERTURA{: RESULT = "abreempaque"; :}
                       CORCHETECIERRE{: RESULT = "cierraempaque"; :};


arreglos ::= arreglo | arreglos arreglo;
arreglo ::= parametrosArreglo;

parametrosArreglo ::= corcheteIzquierdo corcheteDerecho
                    | corcheteIzquierdo parametrosArregloAux corcheteDerecho;
parametrosArregloAux ::= asignarTipo | parametrosArregloAux COMA{: RESULT = ","; :}
                                        asignarTipo;

expresionRelacional ::= asignarTipo operadorRelacional variable;
expresionLogica ::= asignarTipo operadorLogico variable;

asignaVariable ::= variable ASIGNA{:RESULT="entrega";:} literales | modificarArreglos ASIGNA{:RESULT="entrega";:} literales;

variable ::= IDENTIFICADOR:idVar {: System.out.println("Variable: " + idVar.toString()); :};

operandoBinaria ::= SUMA {:RESULT="navidad";:}
                | RESTA {:RESULT="intercambio";:}
                | DIVISION {:RESULT="reyes";:}
                | MULTIPLICACION {:RESULT="nochebuena";:}
                | MODULO {:RESULT="magos";:}
                | POTENCIA {:RESULT="adviento";:};

expresionBinaria ::= expresion operandoBinaria expresion;

operandoUnario ::= INCREMENTO {:RESULT="quien";:}
                | DECREMENTO {:RESULT="grinch";:};
expresionUnario ::= expresion operandoUnario | NEGATIVO {:RESULT="-";:}
                                                expresion;

expresionRelacionalMat ::= expresion operadorRelacional expresion;

expresiones ::= expresionRelacional
              | expresion
              | operandoBinaria expresion
              | expresionBinaria
              | expresionUnario
              | expresionRelacionalMat
              | PARENTESISAPERTURA {: RESULT = "abreregalo"; :}
              expresiones
              PARENTESISCIERRE{: RESULT = "cierraregalo"; :};


expresion ::= INTEGER {:RESULT="rodolfo";:}
            | FLOAT {:RESULT="bromista";:};

sentencia_lista ::= sentenciaEstructura | sentencia_lista sentenciaEstructura;

sentenciaEstructura ::= if_estructura
                      | for_estructura
                      | while_estructura
                      | switch_estructura
                      | return_estructura
                      | break_estructura
                      | expresiones
                      FIN_EXPRESION{:RESULT="finregalo";:};

if_estructura ::= IF PARENTESISAPERTURA operadorLogico PARENTESISCIERRE sentenciaEstructura
                | IF PARENTESISAPERTURA operadorLogico PARENTESISCIERRE sentenciaEstructura ELSE sentenciaEstructura;

for_estructura ::= FOR PARENTESISAPERTURA IDENTIFICADOR DOS_PUNTOS rango PARENTESISCIERRE sentencia;
while_estructura ::= WHILE PARENTESISAPERTURA expresionLogica PARENTESISCIERRE sentenciaEstructura;

rango ::= expresion PUNTOS expresion
        | expresion PUNTOS expresion PUNTOS;

switch_estructura ::= SWITCH PARENTESISAPERTURA variable:v PARENTESISCIERRE
    {:
        parser.agregarVariable("switch_" + v.toString(), "switch");
    :}
    corcheteIzquierdo casos_switch corcheteDerecho;

casos_switch ::= caso_switch | casos_switch caso_switch;
caso_switch ::= CASE expresion DOS_PUNTOS sentencia_lista
              | DEFAULT DOS_PUNTOS sentencia_lista;

return_estructura ::= RETURN expresion FIN_EXPRESION
                    | RETURN FIN_EXPRESION;
break_estructura ::= BREAK FIN_EXPRESION;

print ::= PRINT PARENTESISAPERTURA literales PARENTESISCIERRE
        | PRINT PARENTESISAPERTURA variable PARENTESISCIERRE;

read ::= READ PARENTESISAPERTURA expresion PARENTESISCIERRE;