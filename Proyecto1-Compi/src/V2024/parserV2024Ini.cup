package ParserLexer;
import java_cup.runtime.*;

action code {::};

parser code {:
    BasicLexerCupV lex;

    @SuppressWarnings("deprecation")
    public parser(BasicLexerCupV lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
:}

init with {: :};

scan with {: return lex.next_token(); :};

/* Terminales */
terminal corcheteIzquierdo, corcheteDerecho, CORCHETEAPERTURA, CORCHETECIERRE, ASIGNA, PARENTESISAPERTURA, PARENTESISCIERRE, FIN_EXPRESION,
        PRINT, READ, MAIN, COMA;
terminal INTEGER, STRING, CHAR, FLOAT, BOOL, IDENTIFICADOR, TRUE, FALSE;
terminal SUMA, RESTA, DIVISION, MULTIPLICACION, MODULO, POTENCIA, INCREMENTO, DECREMENTO, NEGATIVO;
terminal MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL, IGUAL, DIFERENTE;
terminal CONJUNCION, DISYUNCION, NEGACION;
terminal IF, ELSE, WHILE, FOR, SWITCH, CASE, DEFAULT, BREAK, RETURN, DOS_PUNTOS, PUNTOS;
terminal L_INTEGER, L_STRING, L_FLOAT, L_CHAR;

/* No terminales */
non terminal inicio, tipos, expresionRelacional, asignarTipo, operadorRelacional, literales, bool, operadorLogico, negacion,
creacion, creacionAsignacion, sentencias, sentencia, funciones, funcion, bloque, return_estructura,
parametroAux, parametros, tipoArreglo, crearArreglos, modificarArreglos, arreglos, arreglo,
parametrosArregloAux, parametrosArreglo, asignaVariable, variable, operandoBinaria, expresionBinaria,
operandoUnario, expresionUnario, expresionRelacionalMat, expresiones, expresion, sentencia_lista, sentenciaEstructura, if_estructura,
for_estructura, rango, switch_estructura, casos_switch, caso_switch, break_estructura, print, read, encabezadoFuncion, expresionLogica,
while_estructura;

/* Precedencia */
precedence left ELSE;
precedence left MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL;
precedence left IGUAL, DIFERENTE;
precedence left CONJUNCION, DISYUNCION;

/* Producción inicial */
start with inicio;

inicio ::= MAIN sentencias
         | funciones;

/* Definiciones */
tipos ::= L_INTEGER:iVar {: System.out.println("tipo: " + iVar.toString()); :}
        | L_STRING:sVar {: System.out.println("tipo: " + sVar.toString()); :}
        | L_FLOAT:fVar {: System.out.println("tipo: " + fVar.toString()); :}
        | L_CHAR:cVar {: System.out.println("tipo: " + cVar.toString()); :}
        | bool:bVar{: System.out.println("tipo: " + bVar.toString()); :};

bool ::= TRUE {:RESULT="true";:}
        | FALSE{:RESULT="false";:};

literales ::= INTEGER:i {:RESULT="rodolfo";:}
            | STRING:s {:RESULT="cometa";:}
            | CHAR:c {:RESULT="cupido";:}
            | FLOAT:f {:RESULT="bromista";:}
            | BOOL:b {:RESULT="trueno";:};


expresionRelacional ::= asignarTipo operadorRelacional:op literales:l {: System.out.println("Expresión relacional: " + op + " " + l); :}
                     | error {: System.err.println("Error: Expresión relacional inválida"); :};

expresionLogica ::= asignarTipo operadorLogico:op literales:l {: System.out.println("Expresión lógica: " + op + " " + l); :}
                  | negacion literales:n {: System.out.println("Expresión lógica con negación: !" + n); :}
                  | error {: System.err.println("Error: Expresión lógica inválida"); :};

asignarTipo ::= tipos IDENTIFICADOR:idVar {: System.out.println("Asignación: " + idVar.toString()); :}
              | tipos error {: System.err.println("Error: Falta identificador después del tipo"); :};

operadorRelacional ::= MENOR {:RESULT="snowball";:}
                       | MENOR_IGUAL {:RESULT="evergreen";:}
                       | MAYOR {:RESULT="minstix";:}
                       | MAYOR_IGUAL {:RESULT="upatree";:}
                       | IGUAL {:RESULT="mary";:}
                       | DIFERENTE {:RESULT="openslae";:};

operadorLogico ::= CONJUNCION {:RESULT="melchor";:}
                   | DISYUNCION {:RESULT="gaspar";:};

negacion ::= NEGACION {:RESULT="baltazar";:};

creacion ::= asignarTipo FIN_EXPRESION
           | asignarTipo error {:
               parser.action_obj.reportProductionError("Falta punto y coma al final de la declaración", parser);
           :};

creacionAsignacion ::= asignarTipo ASIGNA literales FIN_EXPRESION;

sentencias ::= sentencia | sentencias sentencia;

sentencia ::= asignaVariable
            | creacion
            | creacionAsignacion
            | print
            | read
            | break_estructura
            | return_estructura
            | switch_estructura;

funciones ::= funcion
           | funciones funcion
           | error {:
               parser.action_obj.reportProductionError("Definición de función inválida", parser);
           :};

funcion ::= encabezadoFuncion bloque
          | encabezadoFuncion error {:
              parser.action_obj.reportProductionError("Falta bloque de código", parser);
          :};

encabezadoFuncion ::= asignarTipo parametros
                    | encabezadoFuncion error {:
                        parser.action_obj.reportProductionError("Encabezado de función inválido", parser);
                    :};

bloque ::= corcheteIzquierdo sentencias corcheteDerecho
         | corcheteIzquierdo error {:
             parser.action_obj.reportProductionError("Bloque de código incompleto", parser);
         :};

parametros ::= PARENTESISAPERTURA PARENTESISCIERRE
             | PARENTESISAPERTURA parametroAux PARENTESISCIERRE
             | error {:
                 parser.action_obj.reportProductionError("Definición de parámetros inválida", parser);
             :};

parametroAux ::= asignarTipo
               | parametroAux COMA asignarTipo
               | error {:
                   parser.action_obj.reportProductionError("Parámetros mal definidos", parser);
               :};

expresionRelacional ::= crearArreglos operadorRelacional arreglos;

expresionLogica ::= crearArreglos operadorLogico arreglos;

tipoArreglo ::= L_CHAR CORCHETEAPERTURA CORCHETECIERRE
              | L_INTEGER CORCHETEAPERTURA CORCHETECIERRE;

crearArreglos ::= tipoArreglo IDENTIFICADOR CORCHETEAPERTURA IDENTIFICADOR CORCHETECIERRE;

modificarArreglos ::= IDENTIFICADOR CORCHETEAPERTURA IDENTIFICADOR CORCHETECIERRE;

arreglos ::= arreglo | arreglos arreglo
           | error {:
               parser.action_obj.reportProductionError("Definición de arreglos inválida", parser);
           :};

arreglo ::= parametrosArreglo;

parametrosArreglo ::= corcheteIzquierdo corcheteDerecho
                    | corcheteIzquierdo parametrosArregloAux corcheteDerecho;

parametrosArregloAux ::= asignarTipo
                       | parametrosArregloAux COMA asignarTipo;

asignaVariable ::= variable ASIGNA literales
                 | modificarArreglos ASIGNA literales
                 | variable error {:
                     parser.action_obj.reportProductionError("Asignación de variable mal formada", parser);
                 :};

variable ::= IDENTIFICADOR:idVar;

operandoBinaria ::= SUMA {:RESULT="navidad";:}
                | RESTA {:RESULT="intercambio";:}
                | DIVISION {:RESULT="reyes";:}
                | MULTIPLICACION {:RESULT="nochebuena";:}
                | MODULO {:RESULT="magos";:}
                | POTENCIA {:RESULT="adviento";:};

expresionBinaria ::= expresion operandoBinaria expresion;

operandoUnario ::= INCREMENTO {:RESULT="quien";:}
                | DECREMENTO {:RESULT="grinch";:};

expresionUnario ::= expresion operandoUnario | NEGATIVO {:RESULT="-";:} expresion;

expresionRelacionalMat ::= expresion operadorRelacional expresion;

expresiones ::= expresionRelacional
              | expresion
              | operandoBinaria expresion
              | expresionBinaria
              | expresionUnario
              | expresionRelacionalMat
              | PARENTESISAPERTURA expresiones PARENTESISCIERRE;

expresion ::= INTEGER {:RESULT="rodolfo";:}
            | FLOAT {:RESULT="bromista";:};

sentencia_lista ::= sentenciaEstructura | sentencia_lista sentenciaEstructura;

sentenciaEstructura ::= if_estructura
                      | for_estructura
                      | while_estructura
                      | switch_estructura
                      | return_estructura
                      | break_estructura
                      | expresiones FIN_EXPRESION;

if_estructura ::= IF PARENTESISAPERTURA operadorLogico PARENTESISCIERRE sentenciaEstructura
                | IF PARENTESISAPERTURA operadorLogico PARENTESISCIERRE sentenciaEstructura ELSE sentenciaEstructura;

for_estructura ::= FOR PARENTESISAPERTURA IDENTIFICADOR DOS_PUNTOS rango PARENTESISCIERRE sentencia;

while_estructura ::= WHILE PARENTESISAPERTURA expresionLogica PARENTESISCIERRE sentenciaEstructura;

rango ::= expresion PUNTOS expresion
        | expresion PUNTOS expresion PUNTOS
        | error {:
            parser.action_obj.reportProductionError("Rango inválido", parser);
        :};

switch_estructura ::= SWITCH PARENTESISAPERTURA expresion PARENTESISCIERRE corcheteIzquierdo casos_switch corcheteDerecho;

casos_switch ::= caso_switch | casos_switch caso_switch;

caso_switch ::= CASE expresion DOS_PUNTOS sentencia_lista
              | DEFAULT DOS_PUNTOS sentencia_lista;

return_estructura ::= RETURN expresion FIN_EXPRESION
                    | RETURN FIN_EXPRESION;

break_estructura ::= BREAK FIN_EXPRESION;

print ::= PRINT PARENTESISAPERTURA literales PARENTESISCIERRE
        | PRINT PARENTESISAPERTURA variable PARENTESISCIERRE;

read ::= READ PARENTESISAPERTURA expresion PARENTESISCIERRE;
